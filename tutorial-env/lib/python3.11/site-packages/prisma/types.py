# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Users types

class UsersOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Users create method"""
    id: _int


class UsersCreateInput(UsersOptionalCreateInput):
    """Required arguments to the Users create method"""
    name: _str
    email: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UsersOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Users create method, without relations"""
    id: _int


class UsersCreateWithoutRelationsInput(UsersOptionalCreateWithoutRelationsInput):
    """Required arguments to the Users create method, without relations"""
    name: _str
    email: _str
    password: _str


class UsersCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UsersCreateWithoutRelationsInput'
    connect: 'UsersWhereUniqueInput'


class UsersCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UsersCreateWithoutRelationsInput', List['UsersCreateWithoutRelationsInput']]
    connect: Union['UsersWhereUniqueInput', List['UsersWhereUniqueInput']]


_UsersWhereUnique_id_Input = TypedDict(
    '_UsersWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UsersWhereUnique_name_Input = TypedDict(
    '_UsersWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

_UsersWhereUnique_email_Input = TypedDict(
    '_UsersWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UsersWhereUniqueInput = Union[
    '_UsersWhereUnique_id_Input',
    '_UsersWhereUnique_name_Input',
    '_UsersWhereUnique_email_Input',
]


class UsersUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    email: _str
    password: _str


class UsersUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    email: _str
    password: _str


class UsersUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UsersCreateWithoutRelationsInput']
    connect: List['UsersWhereUniqueInput']
    set: List['UsersWhereUniqueInput']
    disconnect: List['UsersWhereUniqueInput']
    delete: List['UsersWhereUniqueInput']

    # TODO
    # update: List['UsersUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UsersUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UsersScalarWhereInput']
    # upsert: List['UsersUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UsersCreateOrConnectWithoutRelationsInput']


class UsersUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UsersCreateWithoutRelationsInput'
    connect: 'UsersWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UsersUpdateInput'
    # upsert: 'UsersUpsertWithoutRelationsInput'
    # connectOrCreate: 'UsersCreateOrConnectWithoutRelationsInput'


class UsersUpsertInput(TypedDict):
    create: 'UsersCreateInput'
    update: 'UsersUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Users_id_OrderByInput = TypedDict(
    '_Users_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Users_name_OrderByInput = TypedDict(
    '_Users_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Users_email_OrderByInput = TypedDict(
    '_Users_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Users_password_OrderByInput = TypedDict(
    '_Users_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

UsersOrderByInput = Union[
    '_Users_id_OrderByInput',
    '_Users_name_OrderByInput',
    '_Users_email_OrderByInput',
    '_Users_password_OrderByInput',
]



# recursive Users types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UsersRelationFilter = TypedDict(
    'UsersRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UsersListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UsersInclude(TypedDict, total=False):
    """Users relational arguments"""


    

class UsersIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""


class UsersIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""


class UsersIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""


class UsersIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""


class UsersIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class UsersArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyUsersArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class ProductIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    category: Union[bool, 'CategoryArgsFromUsersRecursive1']
    detalles: Union[bool, 'FindManyDetalleArgsFromUsersRecursive1']


class ProductIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    category: Union[bool, 'CategoryArgsFromUsersRecursive2']
    detalles: Union[bool, 'FindManyDetalleArgsFromUsersRecursive2']


class ProductIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    category: Union[bool, 'CategoryArgsFromUsersRecursive3']
    detalles: Union[bool, 'FindManyDetalleArgsFromUsersRecursive3']


class ProductIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    category: Union[bool, 'CategoryArgsFromUsersRecursive4']
    detalles: Union[bool, 'FindManyDetalleArgsFromUsersRecursive4']


class ProductIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class ProductArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyProductArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class CategoryIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    products: Union[bool, 'FindManyProductArgsFromUsersRecursive1']


class CategoryIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    products: Union[bool, 'FindManyProductArgsFromUsersRecursive2']


class CategoryIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    products: Union[bool, 'FindManyProductArgsFromUsersRecursive3']


class CategoryIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    products: Union[bool, 'FindManyProductArgsFromUsersRecursive4']


class CategoryIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class CategoryArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyCategoryArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class DetalleIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    product: Union[bool, 'ProductArgsFromUsersRecursive1']


class DetalleIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    product: Union[bool, 'ProductArgsFromUsersRecursive2']


class DetalleIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    product: Union[bool, 'ProductArgsFromUsersRecursive3']


class DetalleIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    product: Union[bool, 'ProductArgsFromUsersRecursive4']


class DetalleIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class DetalleArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'DetalleIncludeFromDetalleRecursive1'


class DetalleArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'DetalleIncludeFromDetalleRecursive2'


class DetalleArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'DetalleIncludeFromDetalleRecursive3'


class DetalleArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'DetalleIncludeFromDetalleRecursive4'


class DetalleArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyDetalleArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive1'


class FindManyDetalleArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive2'


class FindManyDetalleArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive3'


class FindManyDetalleArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive4'


class FindManyDetalleArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    


FindManyUsersArgs = FindManyUsersArgsFromUsers
FindFirstUsersArgs = FindManyUsersArgsFromUsers


    

class UsersWhereInput(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive1', List['UsersWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive1']
    OR: List['UsersWhereInputRecursive1']
    NOT: List['UsersWhereInputRecursive1']


class UsersWhereInputRecursive1(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive2', List['UsersWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive2']
    OR: List['UsersWhereInputRecursive2']
    NOT: List['UsersWhereInputRecursive2']


class UsersWhereInputRecursive2(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive3', List['UsersWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive3']
    OR: List['UsersWhereInputRecursive3']
    NOT: List['UsersWhereInputRecursive3']


class UsersWhereInputRecursive3(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive4', List['UsersWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive4']
    OR: List['UsersWhereInputRecursive4']
    NOT: List['UsersWhereInputRecursive4']


class UsersWhereInputRecursive4(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']



# aggregate Users types


    

class UsersScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UsersScalarWhereWithAggregatesInputRecursive1']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive1']


class UsersScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UsersScalarWhereWithAggregatesInputRecursive2']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive2']


class UsersScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UsersScalarWhereWithAggregatesInputRecursive3']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive3']


class UsersScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UsersScalarWhereWithAggregatesInputRecursive4']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive4']


class UsersScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']



class UsersGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    email: _str
    password: _str
    _sum: 'UsersSumAggregateOutput'
    _avg: 'UsersAvgAggregateOutput'
    _min: 'UsersMinAggregateOutput'
    _max: 'UsersMaxAggregateOutput'
    _count: 'UsersCountAggregateOutput'


class UsersAvgAggregateOutput(TypedDict, total=False):
    """Users output for aggregating averages"""
    id: float


class UsersSumAggregateOutput(TypedDict, total=False):
    """Users output for aggregating sums"""
    id: _int


class UsersScalarAggregateOutput(TypedDict, total=False):
    """Users output including scalar fields"""
    id: _int
    name: _str
    email: _str
    password: _str


UsersMinAggregateOutput = UsersScalarAggregateOutput
UsersMaxAggregateOutput = UsersScalarAggregateOutput


class UsersMaxAggregateInput(TypedDict, total=False):
    """Users input for aggregating by max"""
    id: bool
    name: bool
    email: bool
    password: bool


class UsersMinAggregateInput(TypedDict, total=False):
    """Users input for aggregating by min"""
    id: bool
    name: bool
    email: bool
    password: bool


class UsersNumberAggregateInput(TypedDict, total=False):
    """Users input for aggregating numbers"""
    id: bool


UsersAvgAggregateInput = UsersNumberAggregateInput
UsersSumAggregateInput = UsersNumberAggregateInput


UsersCountAggregateInput = TypedDict(
    'UsersCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'email': bool,
        'password': bool,
        '_all': bool,
    },
    total=False,
)

UsersCountAggregateOutput = TypedDict(
    'UsersCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'email': int,
        'password': int,
        '_all': int,
    },
    total=False,
)


UsersKeys = Literal[
    'id',
    'name',
    'email',
    'password',
]
UsersScalarFieldKeys = Literal[
    'id',
    'name',
    'email',
    'password',
]
UsersScalarFieldKeysT = TypeVar('UsersScalarFieldKeysT', bound=UsersScalarFieldKeys)

UsersRelationalFieldKeys = _NoneType

# Product types

class ProductOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Product create method"""
    id: _int
    category: 'CategoryCreateNestedWithoutRelationsInput'
    category_id: _int
    detalles: 'DetalleCreateManyNestedWithoutRelationsInput'


class ProductCreateInput(ProductOptionalCreateInput):
    """Required arguments to the Product create method"""
    name: _str
    description: _str
    price: _int
    Stock: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProductOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Product create method, without relations"""
    id: _int
    category_id: _int


class ProductCreateWithoutRelationsInput(ProductOptionalCreateWithoutRelationsInput):
    """Required arguments to the Product create method, without relations"""
    name: _str
    description: _str
    price: _int
    Stock: _int


class ProductCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductCreateWithoutRelationsInput'
    connect: 'ProductWhereUniqueInput'


class ProductCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProductCreateWithoutRelationsInput', List['ProductCreateWithoutRelationsInput']]
    connect: Union['ProductWhereUniqueInput', List['ProductWhereUniqueInput']]


_ProductWhereUnique_id_Input = TypedDict(
    '_ProductWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_ProductWhereUnique_name_Input = TypedDict(
    '_ProductWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

_ProductWhereUnique_description_Input = TypedDict(
    '_ProductWhereUnique_description_Input',
    {
        'description': '_str',
    },
    total=True
)

ProductWhereUniqueInput = Union[
    '_ProductWhereUnique_id_Input',
    '_ProductWhereUnique_name_Input',
    '_ProductWhereUnique_description_Input',
]


class ProductUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: _str
    price: Union[AtomicIntInput, _int]
    Stock: Union[AtomicIntInput, _int]
    category: 'CategoryUpdateOneWithoutRelationsInput'
    detalles: 'DetalleUpdateManyWithoutRelationsInput'


class ProductUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: _str
    price: Union[AtomicIntInput, _int]
    Stock: Union[AtomicIntInput, _int]


class ProductUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProductCreateWithoutRelationsInput']
    connect: List['ProductWhereUniqueInput']
    set: List['ProductWhereUniqueInput']
    disconnect: List['ProductWhereUniqueInput']
    delete: List['ProductWhereUniqueInput']

    # TODO
    # update: List['ProductUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProductUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProductScalarWhereInput']
    # upsert: List['ProductUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ProductCreateOrConnectWithoutRelationsInput']


class ProductUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductCreateWithoutRelationsInput'
    connect: 'ProductWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProductUpdateInput'
    # upsert: 'ProductUpsertWithoutRelationsInput'
    # connectOrCreate: 'ProductCreateOrConnectWithoutRelationsInput'


class ProductUpsertInput(TypedDict):
    create: 'ProductCreateInput'
    update: 'ProductUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Product_id_OrderByInput = TypedDict(
    '_Product_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Product_name_OrderByInput = TypedDict(
    '_Product_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Product_description_OrderByInput = TypedDict(
    '_Product_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Product_price_OrderByInput = TypedDict(
    '_Product_price_OrderByInput',
    {
        'price': 'SortOrder',
    },
    total=True
)

_Product_Stock_OrderByInput = TypedDict(
    '_Product_Stock_OrderByInput',
    {
        'Stock': 'SortOrder',
    },
    total=True
)

_Product_category_id_OrderByInput = TypedDict(
    '_Product_category_id_OrderByInput',
    {
        'category_id': 'SortOrder',
    },
    total=True
)

ProductOrderByInput = Union[
    '_Product_id_OrderByInput',
    '_Product_name_OrderByInput',
    '_Product_description_OrderByInput',
    '_Product_price_OrderByInput',
    '_Product_Stock_OrderByInput',
    '_Product_category_id_OrderByInput',
]



# recursive Product types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProductRelationFilter = TypedDict(
    'ProductRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProductListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProductInclude(TypedDict, total=False):
    """Product relational arguments"""
    category: Union[bool, 'CategoryArgsFromProduct']
    detalles: Union[bool, 'FindManyDetalleArgsFromProduct']


    

class UsersIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""


class UsersIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""


class UsersIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""


class UsersIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""


class UsersIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class UsersArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyUsersArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class ProductIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    category: Union[bool, 'CategoryArgsFromProductRecursive1']
    detalles: Union[bool, 'FindManyDetalleArgsFromProductRecursive1']


class ProductIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    category: Union[bool, 'CategoryArgsFromProductRecursive2']
    detalles: Union[bool, 'FindManyDetalleArgsFromProductRecursive2']


class ProductIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    category: Union[bool, 'CategoryArgsFromProductRecursive3']
    detalles: Union[bool, 'FindManyDetalleArgsFromProductRecursive3']


class ProductIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    category: Union[bool, 'CategoryArgsFromProductRecursive4']
    detalles: Union[bool, 'FindManyDetalleArgsFromProductRecursive4']


class ProductIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class ProductArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyProductArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class CategoryIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive1']


class CategoryIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive2']


class CategoryIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive3']


class CategoryIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive4']


class CategoryIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class CategoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyCategoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class DetalleIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive1']


class DetalleIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive2']


class DetalleIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive3']


class DetalleIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive4']


class DetalleIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class DetalleArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DetalleIncludeFromDetalleRecursive1'


class DetalleArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DetalleIncludeFromDetalleRecursive2'


class DetalleArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DetalleIncludeFromDetalleRecursive3'


class DetalleArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DetalleIncludeFromDetalleRecursive4'


class DetalleArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyDetalleArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive1'


class FindManyDetalleArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive2'


class FindManyDetalleArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive3'


class FindManyDetalleArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive4'


class FindManyDetalleArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    


FindManyProductArgs = FindManyProductArgsFromProduct
FindFirstProductArgs = FindManyProductArgsFromProduct


    

class ProductWhereInput(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    Stock: Union[_int, 'types.IntFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive1', List['ProductWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive1']
    OR: List['ProductWhereInputRecursive1']
    NOT: List['ProductWhereInputRecursive1']


class ProductWhereInputRecursive1(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    Stock: Union[_int, 'types.IntFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive2', List['ProductWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive2']
    OR: List['ProductWhereInputRecursive2']
    NOT: List['ProductWhereInputRecursive2']


class ProductWhereInputRecursive2(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    Stock: Union[_int, 'types.IntFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive3', List['ProductWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive3']
    OR: List['ProductWhereInputRecursive3']
    NOT: List['ProductWhereInputRecursive3']


class ProductWhereInputRecursive3(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    Stock: Union[_int, 'types.IntFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive4', List['ProductWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive4']
    OR: List['ProductWhereInputRecursive4']
    NOT: List['ProductWhereInputRecursive4']


class ProductWhereInputRecursive4(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    Stock: Union[_int, 'types.IntFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'



# aggregate Product types


    

class ProductScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    Stock: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive1']


class ProductScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    Stock: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive2']


class ProductScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    Stock: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive3']


class ProductScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    Stock: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive4']


class ProductScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    Stock: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']



class ProductGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    description: _str
    price: _int
    Stock: _int
    category_id: _int
    _sum: 'ProductSumAggregateOutput'
    _avg: 'ProductAvgAggregateOutput'
    _min: 'ProductMinAggregateOutput'
    _max: 'ProductMaxAggregateOutput'
    _count: 'ProductCountAggregateOutput'


class ProductAvgAggregateOutput(TypedDict, total=False):
    """Product output for aggregating averages"""
    id: float
    price: float
    Stock: float
    category_id: float


class ProductSumAggregateOutput(TypedDict, total=False):
    """Product output for aggregating sums"""
    id: _int
    price: _int
    Stock: _int
    category_id: _int


class ProductScalarAggregateOutput(TypedDict, total=False):
    """Product output including scalar fields"""
    id: _int
    name: _str
    description: _str
    price: _int
    Stock: _int
    category_id: _int


ProductMinAggregateOutput = ProductScalarAggregateOutput
ProductMaxAggregateOutput = ProductScalarAggregateOutput


class ProductMaxAggregateInput(TypedDict, total=False):
    """Product input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    price: bool
    Stock: bool
    category_id: bool


class ProductMinAggregateInput(TypedDict, total=False):
    """Product input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    price: bool
    Stock: bool
    category_id: bool


class ProductNumberAggregateInput(TypedDict, total=False):
    """Product input for aggregating numbers"""
    id: bool
    price: bool
    Stock: bool
    category_id: bool


ProductAvgAggregateInput = ProductNumberAggregateInput
ProductSumAggregateInput = ProductNumberAggregateInput


ProductCountAggregateInput = TypedDict(
    'ProductCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'price': bool,
        'Stock': bool,
        'category_id': bool,
        '_all': bool,
    },
    total=False,
)

ProductCountAggregateOutput = TypedDict(
    'ProductCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'price': int,
        'Stock': int,
        'category_id': int,
        '_all': int,
    },
    total=False,
)


ProductKeys = Literal[
    'id',
    'name',
    'description',
    'price',
    'Stock',
    'category',
    'category_id',
    'detalles',
]
ProductScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'price',
    'Stock',
    'category_id',
]
ProductScalarFieldKeysT = TypeVar('ProductScalarFieldKeysT', bound=ProductScalarFieldKeys)

ProductRelationalFieldKeys = Literal[
        'category',
        'detalles',
    ]

# Category types

class CategoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Category create method"""
    id: _int
    products: 'ProductCreateManyNestedWithoutRelationsInput'


class CategoryCreateInput(CategoryOptionalCreateInput):
    """Required arguments to the Category create method"""
    name: _str
    description: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CategoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Category create method, without relations"""
    id: _int


class CategoryCreateWithoutRelationsInput(CategoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the Category create method, without relations"""
    name: _str
    description: _str


class CategoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'


class CategoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CategoryCreateWithoutRelationsInput', List['CategoryCreateWithoutRelationsInput']]
    connect: Union['CategoryWhereUniqueInput', List['CategoryWhereUniqueInput']]


_CategoryWhereUnique_id_Input = TypedDict(
    '_CategoryWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

CategoryWhereUniqueInput = _CategoryWhereUnique_id_Input


class CategoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: _str
    products: 'ProductUpdateManyWithoutRelationsInput'


class CategoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: _str


class CategoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CategoryCreateWithoutRelationsInput']
    connect: List['CategoryWhereUniqueInput']
    set: List['CategoryWhereUniqueInput']
    disconnect: List['CategoryWhereUniqueInput']
    delete: List['CategoryWhereUniqueInput']

    # TODO
    # update: List['CategoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CategoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CategoryScalarWhereInput']
    # upsert: List['CategoryUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['CategoryCreateOrConnectWithoutRelationsInput']


class CategoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CategoryUpdateInput'
    # upsert: 'CategoryUpsertWithoutRelationsInput'
    # connectOrCreate: 'CategoryCreateOrConnectWithoutRelationsInput'


class CategoryUpsertInput(TypedDict):
    create: 'CategoryCreateInput'
    update: 'CategoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Category_id_OrderByInput = TypedDict(
    '_Category_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Category_name_OrderByInput = TypedDict(
    '_Category_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Category_description_OrderByInput = TypedDict(
    '_Category_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

CategoryOrderByInput = Union[
    '_Category_id_OrderByInput',
    '_Category_name_OrderByInput',
    '_Category_description_OrderByInput',
]



# recursive Category types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CategoryRelationFilter = TypedDict(
    'CategoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CategoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CategoryInclude(TypedDict, total=False):
    """Category relational arguments"""
    products: Union[bool, 'FindManyProductArgsFromCategory']


    

class UsersIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""


class UsersIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""


class UsersIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""


class UsersIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""


class UsersIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class UsersArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyUsersArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class ProductIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    category: Union[bool, 'CategoryArgsFromCategoryRecursive1']
    detalles: Union[bool, 'FindManyDetalleArgsFromCategoryRecursive1']


class ProductIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    category: Union[bool, 'CategoryArgsFromCategoryRecursive2']
    detalles: Union[bool, 'FindManyDetalleArgsFromCategoryRecursive2']


class ProductIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    category: Union[bool, 'CategoryArgsFromCategoryRecursive3']
    detalles: Union[bool, 'FindManyDetalleArgsFromCategoryRecursive3']


class ProductIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    category: Union[bool, 'CategoryArgsFromCategoryRecursive4']
    detalles: Union[bool, 'FindManyDetalleArgsFromCategoryRecursive4']


class ProductIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class ProductArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyProductArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class CategoryIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive1']


class CategoryIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive2']


class CategoryIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive3']


class CategoryIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive4']


class CategoryIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class CategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyCategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class DetalleIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    product: Union[bool, 'ProductArgsFromCategoryRecursive1']


class DetalleIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    product: Union[bool, 'ProductArgsFromCategoryRecursive2']


class DetalleIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    product: Union[bool, 'ProductArgsFromCategoryRecursive3']


class DetalleIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    product: Union[bool, 'ProductArgsFromCategoryRecursive4']


class DetalleIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class DetalleArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'DetalleIncludeFromDetalleRecursive1'


class DetalleArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'DetalleIncludeFromDetalleRecursive2'


class DetalleArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'DetalleIncludeFromDetalleRecursive3'


class DetalleArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'DetalleIncludeFromDetalleRecursive4'


class DetalleArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyDetalleArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive1'


class FindManyDetalleArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive2'


class FindManyDetalleArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive3'


class FindManyDetalleArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive4'


class FindManyDetalleArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    


FindManyCategoryArgs = FindManyCategoryArgsFromCategory
FindFirstCategoryArgs = FindManyCategoryArgsFromCategory


    

class CategoryWhereInput(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive1', List['CategoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive1']
    OR: List['CategoryWhereInputRecursive1']
    NOT: List['CategoryWhereInputRecursive1']


class CategoryWhereInputRecursive1(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive2', List['CategoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive2']
    OR: List['CategoryWhereInputRecursive2']
    NOT: List['CategoryWhereInputRecursive2']


class CategoryWhereInputRecursive2(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive3', List['CategoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive3']
    OR: List['CategoryWhereInputRecursive3']
    NOT: List['CategoryWhereInputRecursive3']


class CategoryWhereInputRecursive3(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive4', List['CategoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive4']
    OR: List['CategoryWhereInputRecursive4']
    NOT: List['CategoryWhereInputRecursive4']


class CategoryWhereInputRecursive4(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'



# aggregate Category types


    

class CategoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive1']


class CategoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive2']


class CategoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive3']


class CategoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive4']


class CategoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']



class CategoryGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    description: _str
    _sum: 'CategorySumAggregateOutput'
    _avg: 'CategoryAvgAggregateOutput'
    _min: 'CategoryMinAggregateOutput'
    _max: 'CategoryMaxAggregateOutput'
    _count: 'CategoryCountAggregateOutput'


class CategoryAvgAggregateOutput(TypedDict, total=False):
    """Category output for aggregating averages"""
    id: float


class CategorySumAggregateOutput(TypedDict, total=False):
    """Category output for aggregating sums"""
    id: _int


class CategoryScalarAggregateOutput(TypedDict, total=False):
    """Category output including scalar fields"""
    id: _int
    name: _str
    description: _str


CategoryMinAggregateOutput = CategoryScalarAggregateOutput
CategoryMaxAggregateOutput = CategoryScalarAggregateOutput


class CategoryMaxAggregateInput(TypedDict, total=False):
    """Category input for aggregating by max"""
    id: bool
    name: bool
    description: bool


class CategoryMinAggregateInput(TypedDict, total=False):
    """Category input for aggregating by min"""
    id: bool
    name: bool
    description: bool


class CategoryNumberAggregateInput(TypedDict, total=False):
    """Category input for aggregating numbers"""
    id: bool


CategoryAvgAggregateInput = CategoryNumberAggregateInput
CategorySumAggregateInput = CategoryNumberAggregateInput


CategoryCountAggregateInput = TypedDict(
    'CategoryCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        '_all': bool,
    },
    total=False,
)

CategoryCountAggregateOutput = TypedDict(
    'CategoryCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        '_all': int,
    },
    total=False,
)


CategoryKeys = Literal[
    'id',
    'name',
    'description',
    'products',
]
CategoryScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
]
CategoryScalarFieldKeysT = TypeVar('CategoryScalarFieldKeysT', bound=CategoryScalarFieldKeys)

CategoryRelationalFieldKeys = Literal[
        'products',
    ]

# Detalle types

class DetalleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Detalle create method"""
    id: _int
    product: 'ProductCreateNestedWithoutRelationsInput'
    product_id: _int


class DetalleCreateInput(DetalleOptionalCreateInput):
    """Required arguments to the Detalle create method"""
    cantidad: _int
    Subtotal: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DetalleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Detalle create method, without relations"""
    id: _int
    product_id: _int


class DetalleCreateWithoutRelationsInput(DetalleOptionalCreateWithoutRelationsInput):
    """Required arguments to the Detalle create method, without relations"""
    cantidad: _int
    Subtotal: _int


class DetalleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DetalleCreateWithoutRelationsInput'
    connect: 'DetalleWhereUniqueInput'


class DetalleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DetalleCreateWithoutRelationsInput', List['DetalleCreateWithoutRelationsInput']]
    connect: Union['DetalleWhereUniqueInput', List['DetalleWhereUniqueInput']]


_DetalleWhereUnique_id_Input = TypedDict(
    '_DetalleWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

DetalleWhereUniqueInput = _DetalleWhereUnique_id_Input


class DetalleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    cantidad: Union[AtomicIntInput, _int]
    Subtotal: Union[AtomicIntInput, _int]
    product: 'ProductUpdateOneWithoutRelationsInput'


class DetalleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    cantidad: Union[AtomicIntInput, _int]
    Subtotal: Union[AtomicIntInput, _int]


class DetalleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DetalleCreateWithoutRelationsInput']
    connect: List['DetalleWhereUniqueInput']
    set: List['DetalleWhereUniqueInput']
    disconnect: List['DetalleWhereUniqueInput']
    delete: List['DetalleWhereUniqueInput']

    # TODO
    # update: List['DetalleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DetalleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DetalleScalarWhereInput']
    # upsert: List['DetalleUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['DetalleCreateOrConnectWithoutRelationsInput']


class DetalleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DetalleCreateWithoutRelationsInput'
    connect: 'DetalleWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DetalleUpdateInput'
    # upsert: 'DetalleUpsertWithoutRelationsInput'
    # connectOrCreate: 'DetalleCreateOrConnectWithoutRelationsInput'


class DetalleUpsertInput(TypedDict):
    create: 'DetalleCreateInput'
    update: 'DetalleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Detalle_id_OrderByInput = TypedDict(
    '_Detalle_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Detalle_cantidad_OrderByInput = TypedDict(
    '_Detalle_cantidad_OrderByInput',
    {
        'cantidad': 'SortOrder',
    },
    total=True
)

_Detalle_Subtotal_OrderByInput = TypedDict(
    '_Detalle_Subtotal_OrderByInput',
    {
        'Subtotal': 'SortOrder',
    },
    total=True
)

_Detalle_product_id_OrderByInput = TypedDict(
    '_Detalle_product_id_OrderByInput',
    {
        'product_id': 'SortOrder',
    },
    total=True
)

DetalleOrderByInput = Union[
    '_Detalle_id_OrderByInput',
    '_Detalle_cantidad_OrderByInput',
    '_Detalle_Subtotal_OrderByInput',
    '_Detalle_product_id_OrderByInput',
]



# recursive Detalle types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

DetalleRelationFilter = TypedDict(
    'DetalleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class DetalleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class DetalleInclude(TypedDict, total=False):
    """Detalle relational arguments"""
    product: Union[bool, 'ProductArgsFromDetalle']


    

class UsersIncludeFromDetalle(TypedDict, total=False):
    """Relational arguments for Detalle"""


class UsersIncludeFromDetalleRecursive1(TypedDict, total=False):
    """Relational arguments for Detalle"""


class UsersIncludeFromDetalleRecursive2(TypedDict, total=False):
    """Relational arguments for Detalle"""


class UsersIncludeFromDetalleRecursive3(TypedDict, total=False):
    """Relational arguments for Detalle"""


class UsersIncludeFromDetalleRecursive4(TypedDict, total=False):
    """Relational arguments for Detalle"""

    

class UsersArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    
    

class FindManyUsersArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class ProductIncludeFromDetalle(TypedDict, total=False):
    """Relational arguments for Detalle"""
    category: Union[bool, 'CategoryArgsFromDetalleRecursive1']
    detalles: Union[bool, 'FindManyDetalleArgsFromDetalleRecursive1']


class ProductIncludeFromDetalleRecursive1(TypedDict, total=False):
    """Relational arguments for Detalle"""
    category: Union[bool, 'CategoryArgsFromDetalleRecursive2']
    detalles: Union[bool, 'FindManyDetalleArgsFromDetalleRecursive2']


class ProductIncludeFromDetalleRecursive2(TypedDict, total=False):
    """Relational arguments for Detalle"""
    category: Union[bool, 'CategoryArgsFromDetalleRecursive3']
    detalles: Union[bool, 'FindManyDetalleArgsFromDetalleRecursive3']


class ProductIncludeFromDetalleRecursive3(TypedDict, total=False):
    """Relational arguments for Detalle"""
    category: Union[bool, 'CategoryArgsFromDetalleRecursive4']
    detalles: Union[bool, 'FindManyDetalleArgsFromDetalleRecursive4']


class ProductIncludeFromDetalleRecursive4(TypedDict, total=False):
    """Relational arguments for Detalle"""

    

class ProductArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    
    

class FindManyProductArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class CategoryIncludeFromDetalle(TypedDict, total=False):
    """Relational arguments for Detalle"""
    products: Union[bool, 'FindManyProductArgsFromDetalleRecursive1']


class CategoryIncludeFromDetalleRecursive1(TypedDict, total=False):
    """Relational arguments for Detalle"""
    products: Union[bool, 'FindManyProductArgsFromDetalleRecursive2']


class CategoryIncludeFromDetalleRecursive2(TypedDict, total=False):
    """Relational arguments for Detalle"""
    products: Union[bool, 'FindManyProductArgsFromDetalleRecursive3']


class CategoryIncludeFromDetalleRecursive3(TypedDict, total=False):
    """Relational arguments for Detalle"""
    products: Union[bool, 'FindManyProductArgsFromDetalleRecursive4']


class CategoryIncludeFromDetalleRecursive4(TypedDict, total=False):
    """Relational arguments for Detalle"""

    

class CategoryArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    
    

class FindManyCategoryArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class DetalleIncludeFromDetalle(TypedDict, total=False):
    """Relational arguments for Detalle"""
    product: Union[bool, 'ProductArgsFromDetalleRecursive1']


class DetalleIncludeFromDetalleRecursive1(TypedDict, total=False):
    """Relational arguments for Detalle"""
    product: Union[bool, 'ProductArgsFromDetalleRecursive2']


class DetalleIncludeFromDetalleRecursive2(TypedDict, total=False):
    """Relational arguments for Detalle"""
    product: Union[bool, 'ProductArgsFromDetalleRecursive3']


class DetalleIncludeFromDetalleRecursive3(TypedDict, total=False):
    """Relational arguments for Detalle"""
    product: Union[bool, 'ProductArgsFromDetalleRecursive4']


class DetalleIncludeFromDetalleRecursive4(TypedDict, total=False):
    """Relational arguments for Detalle"""

    

class DetalleArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'DetalleIncludeFromDetalleRecursive1'


class DetalleArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'DetalleIncludeFromDetalleRecursive2'


class DetalleArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'DetalleIncludeFromDetalleRecursive3'


class DetalleArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'DetalleIncludeFromDetalleRecursive4'


class DetalleArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    
    

class FindManyDetalleArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive1'


class FindManyDetalleArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive2'


class FindManyDetalleArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive3'


class FindManyDetalleArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive4'


class FindManyDetalleArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    


FindManyDetalleArgs = FindManyDetalleArgsFromDetalle
FindFirstDetalleArgs = FindManyDetalleArgsFromDetalle


    

class DetalleWhereInput(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    cantidad: Union[_int, 'types.IntFilter']
    Subtotal: Union[_int, 'types.IntFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['DetalleWhereInputRecursive1', List['DetalleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['DetalleWhereInputRecursive1']
    OR: List['DetalleWhereInputRecursive1']
    NOT: List['DetalleWhereInputRecursive1']


class DetalleWhereInputRecursive1(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    cantidad: Union[_int, 'types.IntFilter']
    Subtotal: Union[_int, 'types.IntFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['DetalleWhereInputRecursive2', List['DetalleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['DetalleWhereInputRecursive2']
    OR: List['DetalleWhereInputRecursive2']
    NOT: List['DetalleWhereInputRecursive2']


class DetalleWhereInputRecursive2(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    cantidad: Union[_int, 'types.IntFilter']
    Subtotal: Union[_int, 'types.IntFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['DetalleWhereInputRecursive3', List['DetalleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['DetalleWhereInputRecursive3']
    OR: List['DetalleWhereInputRecursive3']
    NOT: List['DetalleWhereInputRecursive3']


class DetalleWhereInputRecursive3(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    cantidad: Union[_int, 'types.IntFilter']
    Subtotal: Union[_int, 'types.IntFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['DetalleWhereInputRecursive4', List['DetalleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['DetalleWhereInputRecursive4']
    OR: List['DetalleWhereInputRecursive4']
    NOT: List['DetalleWhereInputRecursive4']


class DetalleWhereInputRecursive4(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    cantidad: Union[_int, 'types.IntFilter']
    Subtotal: Union[_int, 'types.IntFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']



# aggregate Detalle types


    

class DetalleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_int, 'types.IntWithAggregatesFilter']
    Subtotal: Union[_int, 'types.IntWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['DetalleScalarWhereWithAggregatesInputRecursive1']
    OR: List['DetalleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['DetalleScalarWhereWithAggregatesInputRecursive1']


class DetalleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_int, 'types.IntWithAggregatesFilter']
    Subtotal: Union[_int, 'types.IntWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['DetalleScalarWhereWithAggregatesInputRecursive2']
    OR: List['DetalleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['DetalleScalarWhereWithAggregatesInputRecursive2']


class DetalleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_int, 'types.IntWithAggregatesFilter']
    Subtotal: Union[_int, 'types.IntWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['DetalleScalarWhereWithAggregatesInputRecursive3']
    OR: List['DetalleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['DetalleScalarWhereWithAggregatesInputRecursive3']


class DetalleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_int, 'types.IntWithAggregatesFilter']
    Subtotal: Union[_int, 'types.IntWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['DetalleScalarWhereWithAggregatesInputRecursive4']
    OR: List['DetalleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['DetalleScalarWhereWithAggregatesInputRecursive4']


class DetalleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_int, 'types.IntWithAggregatesFilter']
    Subtotal: Union[_int, 'types.IntWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']



class DetalleGroupByOutput(TypedDict, total=False):
    id: _int
    cantidad: _int
    Subtotal: _int
    product_id: _int
    _sum: 'DetalleSumAggregateOutput'
    _avg: 'DetalleAvgAggregateOutput'
    _min: 'DetalleMinAggregateOutput'
    _max: 'DetalleMaxAggregateOutput'
    _count: 'DetalleCountAggregateOutput'


class DetalleAvgAggregateOutput(TypedDict, total=False):
    """Detalle output for aggregating averages"""
    id: float
    cantidad: float
    Subtotal: float
    product_id: float


class DetalleSumAggregateOutput(TypedDict, total=False):
    """Detalle output for aggregating sums"""
    id: _int
    cantidad: _int
    Subtotal: _int
    product_id: _int


class DetalleScalarAggregateOutput(TypedDict, total=False):
    """Detalle output including scalar fields"""
    id: _int
    cantidad: _int
    Subtotal: _int
    product_id: _int


DetalleMinAggregateOutput = DetalleScalarAggregateOutput
DetalleMaxAggregateOutput = DetalleScalarAggregateOutput


class DetalleMaxAggregateInput(TypedDict, total=False):
    """Detalle input for aggregating by max"""
    id: bool
    cantidad: bool
    Subtotal: bool
    product_id: bool


class DetalleMinAggregateInput(TypedDict, total=False):
    """Detalle input for aggregating by min"""
    id: bool
    cantidad: bool
    Subtotal: bool
    product_id: bool


class DetalleNumberAggregateInput(TypedDict, total=False):
    """Detalle input for aggregating numbers"""
    id: bool
    cantidad: bool
    Subtotal: bool
    product_id: bool


DetalleAvgAggregateInput = DetalleNumberAggregateInput
DetalleSumAggregateInput = DetalleNumberAggregateInput


DetalleCountAggregateInput = TypedDict(
    'DetalleCountAggregateInput',
    {
        'id': bool,
        'cantidad': bool,
        'Subtotal': bool,
        'product_id': bool,
        '_all': bool,
    },
    total=False,
)

DetalleCountAggregateOutput = TypedDict(
    'DetalleCountAggregateOutput',
    {
        'id': int,
        'cantidad': int,
        'Subtotal': int,
        'product_id': int,
        '_all': int,
    },
    total=False,
)


DetalleKeys = Literal[
    'id',
    'cantidad',
    'Subtotal',
    'product',
    'product_id',
]
DetalleScalarFieldKeys = Literal[
    'id',
    'cantidad',
    'Subtotal',
    'product_id',
]
DetalleScalarFieldKeysT = TypeVar('DetalleScalarFieldKeysT', bound=DetalleScalarFieldKeys)

DetalleRelationalFieldKeys = Literal[
        'product',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields