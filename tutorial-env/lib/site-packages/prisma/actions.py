# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class UsersActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Users]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Users.prisma().query_raw(
            'SELECT * FROM Users WHERE id = ?',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Users
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Users.prisma().query_first(
            'SELECT * FROM Users WHERE name = ?',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UsersCreateInput,
        include: Optional[types.UsersInclude] = None
    ) -> _PrismaModelT:
        """Create a new Users record.

        Parameters
        ----------
        data
            Users record data
        include
            Specifies which relations should be loaded on the returned Users model

        Returns
        -------
        prisma.models.Users
            The created Users record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Users record from just the required fields
        users = await Users.prisma().create(
            data={
                # data to create a Users record
                'name': 'ggciceaie',
                'password': 'bbehjachib',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UsersCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Users records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Users record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Users.prisma().create_many(
            data=[
                {
                    # data to create a Users record
                    'name': 'cadfabfehe',
                    'password': 'dgiiaaijj',
                },
                {
                    # data to create a Users record
                    'name': 'bfaiacjjfc',
                    'password': 'eigcfgbif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UsersWhereUniqueInput,
        include: Optional[types.UsersInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Users record.

        Parameters
        ----------
        where
            Users filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Users model

        Returns
        -------
        prisma.models.Users
            The deleted Users record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        users = await Users.prisma().delete(
            where={
                'id': 1062517886,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UsersWhereUniqueInput,
        include: Optional[types.UsersInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Users record.

        Parameters
        ----------
        where
            Users filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Users model

        Returns
        -------
        prisma.models.Users
            The found Users record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        users = await Users.prisma().find_unique(
            where={
                'id': 267834847,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UsersWhereUniqueInput,
        include: Optional[types.UsersInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Users record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Users filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Users model

        Returns
        -------
        prisma.models.Users
            The found Users record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        users = await Users.prisma().find_unique_or_raise(
            where={
                'id': 180171308,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UsersWhereInput] = None,
        cursor: Optional[types.UsersWhereUniqueInput] = None,
        include: Optional[types.UsersInclude] = None,
        order: Optional[Union[types.UsersOrderByInput, List[types.UsersOrderByInput]]] = None,
        distinct: Optional[List[types.UsersScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Users records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Users records returned
        skip
            Ignore the first N results
        where
            Users filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Users model
        order
            Order the returned Users records by any field
        distinct
            Filter Users records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Users]
            The list of all Users records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Users records
        users = await Users.prisma().find_many(take=10)

        # find the first 5 Users records ordered by the password field
        users = await Users.prisma().find_many(
            take=5,
            order={
                'password': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UsersWhereInput] = None,
        cursor: Optional[types.UsersWhereUniqueInput] = None,
        include: Optional[types.UsersInclude] = None,
        order: Optional[Union[types.UsersOrderByInput, List[types.UsersOrderByInput]]] = None,
        distinct: Optional[List[types.UsersScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Users record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Users filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Users model
        order
            Order the returned Users records by any field
        distinct
            Filter Users records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Users
            The first Users record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Users record ordered by the role field
        users = await Users.prisma().find_first(
            skip=1,
            order={
                'role': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UsersWhereInput] = None,
        cursor: Optional[types.UsersWhereUniqueInput] = None,
        include: Optional[types.UsersInclude] = None,
        order: Optional[Union[types.UsersOrderByInput, List[types.UsersOrderByInput]]] = None,
        distinct: Optional[List[types.UsersScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Users record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Users filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Users model
        order
            Order the returned Users records by any field
        distinct
            Filter Users records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Users
            The first Users record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Users record ordered by the id field
        users = await Users.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UsersUpdateInput,
        where: types.UsersWhereUniqueInput,
        include: Optional[types.UsersInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Users record.

        Parameters
        ----------
        data
            Users record data specifying what to update
        where
            Users filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Users model

        Returns
        -------
        prisma.models.Users
            The updated Users record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Users.prisma().update(
            where={
                'id': 836760821,
            },
            data={
                # data to update the Users record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UsersWhereUniqueInput,
        data: types.UsersUpsertInput,
        include: Optional[types.UsersInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Users filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Users model

        Returns
        -------
        prisma.models.Users
            The created or updated Users record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        users = await Users.prisma().upsert(
            where={
                'id': 595337866,
            },
            data={
                'create': {
                    'id': 595337866,
                    'name': 'bfaiacjjfc',
                    'password': 'eigcfgbif',
                },
                'update': {
                    'name': 'bfaiacjjfc',
                    'password': 'eigcfgbif',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UsersUpdateManyMutationInput,
        where: types.UsersWhereInput,
    ) -> int:
        """Update multiple Users records

        Parameters
        ----------
        data
            Users data to update the selected Users records to
        where
            Filter to select the Users records to update

        Returns
        -------
        int
            The total number of Users records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Users records
        total = await Users.prisma().update_many(
            data={
                'name': 'hjaecfifb'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UsersWhereInput] = None,
        cursor: Optional[types.UsersWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Users records present in the database

        Parameters
        ----------
        select
            Select the Users fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Users filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UsersCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Users.prisma().count()

        # results: prisma.types.UsersCountAggregateOutput
        results = await Users.prisma().count(
            select={
                '_all': True,
                'password': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UsersCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UsersWhereInput] = None,
        cursor: Optional[types.UsersWhereUniqueInput] = None,
    ) -> types.UsersCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UsersCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UsersWhereInput] = None,
        cursor: Optional[types.UsersWhereUniqueInput] = None,
    ) -> Union[int, types.UsersCountAggregateOutput]:
        """Count the number of Users records present in the database

        Parameters
        ----------
        select
            Select the Users fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Users filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UsersCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Users.prisma().count()

        # results: prisma.types.UsersCountAggregateOutput
        results = await Users.prisma().count(
            select={
                '_all': True,
                'role': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UsersCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UsersWhereInput] = None
    ) -> int:
        """Delete multiple Users records.

        Parameters
        ----------
        where
            Optional Users filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Users records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Users records
        total = await Users.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UsersScalarFieldKeys'],
        *,
        where: Optional['types.UsersWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UsersAvgAggregateInput'] = None,
        sum: Optional['types.UsersSumAggregateInput'] = None,
        min: Optional['types.UsersMinAggregateInput'] = None,
        max: Optional['types.UsersMaxAggregateInput'] = None,
        having: Optional['types.UsersScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UsersCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UsersScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UsersScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UsersGroupByOutput']:
        """Group Users records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Users fields to group records by
        where
            Users filter to select records
        take
            Limit the maximum number of Users records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UsersGroupByOutput]
            A list of dictionaries representing the Users record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Users records by id values
        # and count how many records are in each group
        results = await Users.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ProductActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Product]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Product.prisma().query_raw(
            'SELECT * FROM Product WHERE id = ?',
            2111915288,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Product
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Product.prisma().query_first(
            'SELECT * FROM Product WHERE name = ?',
            'bbejhfidcb',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ProductCreateInput,
        include: Optional[types.ProductInclude] = None
    ) -> _PrismaModelT:
        """Create a new Product record.

        Parameters
        ----------
        data
            Product record data
        include
            Specifies which relations should be loaded on the returned Product model

        Returns
        -------
        prisma.models.Product
            The created Product record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Product record from just the required fields
        product = await Product.prisma().create(
            data={
                # data to create a Product record
                'name': 'bgeecijdgg',
                'description': 'bdiicjafbj',
                'price': 1647418052,
                'Stock': 1675546029,
                'category_id': 1767274722,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ProductCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Product records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Product record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Product.prisma().create_many(
            data=[
                {
                    # data to create a Product record
                    'name': 'dcgchcbbf',
                    'description': 'bdedcabahc',
                    'price': 675780521,
                    'Stock': 744964398,
                    'category_id': 1969681615,
                },
                {
                    # data to create a Product record
                    'name': 'bbbgbhfjge',
                    'description': 'igbehcbab',
                    'price': 1303003706,
                    'Stock': 1686638315,
                    'category_id': 2000430152,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ProductWhereUniqueInput,
        include: Optional[types.ProductInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Product record.

        Parameters
        ----------
        where
            Product filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Product model

        Returns
        -------
        prisma.models.Product
            The deleted Product record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        product = await Product.prisma().delete(
            where={
                'id': 1868141281,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ProductWhereUniqueInput,
        include: Optional[types.ProductInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Product record.

        Parameters
        ----------
        where
            Product filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Product model

        Returns
        -------
        prisma.models.Product
            The found Product record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        product = await Product.prisma().find_unique(
            where={
                'id': 1860847622,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ProductWhereUniqueInput,
        include: Optional[types.ProductInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Product record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Product filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Product model

        Returns
        -------
        prisma.models.Product
            The found Product record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        product = await Product.prisma().find_unique_or_raise(
            where={
                'id': 1448521415,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProductWhereInput] = None,
        cursor: Optional[types.ProductWhereUniqueInput] = None,
        include: Optional[types.ProductInclude] = None,
        order: Optional[Union[types.ProductOrderByInput, List[types.ProductOrderByInput]]] = None,
        distinct: Optional[List[types.ProductScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Product records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Product records returned
        skip
            Ignore the first N results
        where
            Product filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Product model
        order
            Order the returned Product records by any field
        distinct
            Filter Product records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Product]
            The list of all Product records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Product records
        products = await Product.prisma().find_many(take=10)

        # find the first 5 Product records ordered by the description field
        products = await Product.prisma().find_many(
            take=5,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProductWhereInput] = None,
        cursor: Optional[types.ProductWhereUniqueInput] = None,
        include: Optional[types.ProductInclude] = None,
        order: Optional[Union[types.ProductOrderByInput, List[types.ProductOrderByInput]]] = None,
        distinct: Optional[List[types.ProductScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Product record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Product filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Product model
        order
            Order the returned Product records by any field
        distinct
            Filter Product records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Product
            The first Product record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Product record ordered by the price field
        product = await Product.prisma().find_first(
            skip=1,
            order={
                'price': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProductWhereInput] = None,
        cursor: Optional[types.ProductWhereUniqueInput] = None,
        include: Optional[types.ProductInclude] = None,
        order: Optional[Union[types.ProductOrderByInput, List[types.ProductOrderByInput]]] = None,
        distinct: Optional[List[types.ProductScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Product record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Product filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Product model
        order
            Order the returned Product records by any field
        distinct
            Filter Product records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Product
            The first Product record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Product record ordered by the Stock field
        product = await Product.prisma().find_first_or_raise(
            skip=1,
            order={
                'Stock': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ProductUpdateInput,
        where: types.ProductWhereUniqueInput,
        include: Optional[types.ProductInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Product record.

        Parameters
        ----------
        data
            Product record data specifying what to update
        where
            Product filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Product model

        Returns
        -------
        prisma.models.Product
            The updated Product record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        product = await Product.prisma().update(
            where={
                'id': 1628650740,
            },
            data={
                # data to update the Product record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ProductWhereUniqueInput,
        data: types.ProductUpsertInput,
        include: Optional[types.ProductInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Product filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Product model

        Returns
        -------
        prisma.models.Product
            The created or updated Product record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        product = await Product.prisma().upsert(
            where={
                'id': 1249606685,
            },
            data={
                'create': {
                    'id': 1249606685,
                    'name': 'bbbgbhfjge',
                    'description': 'igbehcbab',
                    'price': 1303003706,
                    'Stock': 1686638315,
                    'category_id': 2000430152,
                },
                'update': {
                    'name': 'bbbgbhfjge',
                    'description': 'igbehcbab',
                    'price': 1303003706,
                    'Stock': 1686638315,
                    'category_id': 2000430152,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ProductUpdateManyMutationInput,
        where: types.ProductWhereInput,
    ) -> int:
        """Update multiple Product records

        Parameters
        ----------
        data
            Product data to update the selected Product records to
        where
            Filter to select the Product records to update

        Returns
        -------
        int
            The total number of Product records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Product records
        total = await Product.prisma().update_many(
            data={
                'category_id': 835903122
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProductWhereInput] = None,
        cursor: Optional[types.ProductWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Product records present in the database

        Parameters
        ----------
        select
            Select the Product fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Product filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProductCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Product.prisma().count()

        # results: prisma.types.ProductCountAggregateOutput
        results = await Product.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ProductCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProductWhereInput] = None,
        cursor: Optional[types.ProductWhereUniqueInput] = None,
    ) -> types.ProductCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ProductCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProductWhereInput] = None,
        cursor: Optional[types.ProductWhereUniqueInput] = None,
    ) -> Union[int, types.ProductCountAggregateOutput]:
        """Count the number of Product records present in the database

        Parameters
        ----------
        select
            Select the Product fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Product filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProductCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Product.prisma().count()

        # results: prisma.types.ProductCountAggregateOutput
        results = await Product.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ProductCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ProductWhereInput] = None
    ) -> int:
        """Delete multiple Product records.

        Parameters
        ----------
        where
            Optional Product filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Product records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Product records
        total = await Product.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ProductScalarFieldKeys'],
        *,
        where: Optional['types.ProductWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ProductAvgAggregateInput'] = None,
        sum: Optional['types.ProductSumAggregateInput'] = None,
        min: Optional['types.ProductMinAggregateInput'] = None,
        max: Optional['types.ProductMaxAggregateInput'] = None,
        having: Optional['types.ProductScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ProductCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ProductScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ProductScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ProductGroupByOutput']:
        """Group Product records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Product fields to group records by
        where
            Product filter to select records
        take
            Limit the maximum number of Product records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ProductGroupByOutput]
            A list of dictionaries representing the Product record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Product records by description values
        # and count how many records are in each group
        results = await Product.prisma().group_by(
            ['description'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class CategoryActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Category]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Category.prisma().query_raw(
            'SELECT * FROM Category WHERE id = ?',
            763719779,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Category
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Category.prisma().query_first(
            'SELECT * FROM Category WHERE name = ?',
            'ecjjjfbae',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.CategoryCreateInput,
        include: Optional[types.CategoryInclude] = None
    ) -> _PrismaModelT:
        """Create a new Category record.

        Parameters
        ----------
        data
            Category record data
        include
            Specifies which relations should be loaded on the returned Category model

        Returns
        -------
        prisma.models.Category
            The created Category record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Category record from just the required fields
        category = await Category.prisma().create(
            data={
                # data to create a Category record
                'name': 'bhhfibbigf',
                'description': 'ijdbeffgg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.CategoryCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Category records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Category record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Category.prisma().create_many(
            data=[
                {
                    # data to create a Category record
                    'name': 'jjfeafhfj',
                    'description': 'cbachdgfce',
                },
                {
                    # data to create a Category record
                    'name': 'chbfcacbd',
                    'description': 'efggddide',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.CategoryWhereUniqueInput,
        include: Optional[types.CategoryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Category record.

        Parameters
        ----------
        where
            Category filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Category model

        Returns
        -------
        prisma.models.Category
            The deleted Category record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        category = await Category.prisma().delete(
            where={
                'id': 2058258651,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.CategoryWhereUniqueInput,
        include: Optional[types.CategoryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Category record.

        Parameters
        ----------
        where
            Category filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Category model

        Returns
        -------
        prisma.models.Category
            The found Category record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        category = await Category.prisma().find_unique(
            where={
                'id': 1583689592,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.CategoryWhereUniqueInput,
        include: Optional[types.CategoryInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Category record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Category filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Category model

        Returns
        -------
        prisma.models.Category
            The found Category record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        category = await Category.prisma().find_unique_or_raise(
            where={
                'id': 878442065,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CategoryWhereInput] = None,
        cursor: Optional[types.CategoryWhereUniqueInput] = None,
        include: Optional[types.CategoryInclude] = None,
        order: Optional[Union[types.CategoryOrderByInput, List[types.CategoryOrderByInput]]] = None,
        distinct: Optional[List[types.CategoryScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Category records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Category records returned
        skip
            Ignore the first N results
        where
            Category filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Category model
        order
            Order the returned Category records by any field
        distinct
            Filter Category records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Category]
            The list of all Category records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Category records
        categorys = await Category.prisma().find_many(take=10)

        # find the first 5 Category records ordered by the description field
        categorys = await Category.prisma().find_many(
            take=5,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CategoryWhereInput] = None,
        cursor: Optional[types.CategoryWhereUniqueInput] = None,
        include: Optional[types.CategoryInclude] = None,
        order: Optional[Union[types.CategoryOrderByInput, List[types.CategoryOrderByInput]]] = None,
        distinct: Optional[List[types.CategoryScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Category record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Category filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Category model
        order
            Order the returned Category records by any field
        distinct
            Filter Category records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Category
            The first Category record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Category record ordered by the id field
        category = await Category.prisma().find_first(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CategoryWhereInput] = None,
        cursor: Optional[types.CategoryWhereUniqueInput] = None,
        include: Optional[types.CategoryInclude] = None,
        order: Optional[Union[types.CategoryOrderByInput, List[types.CategoryOrderByInput]]] = None,
        distinct: Optional[List[types.CategoryScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Category record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Category filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Category model
        order
            Order the returned Category records by any field
        distinct
            Filter Category records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Category
            The first Category record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Category record ordered by the name field
        category = await Category.prisma().find_first_or_raise(
            skip=1,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.CategoryUpdateInput,
        where: types.CategoryWhereUniqueInput,
        include: Optional[types.CategoryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Category record.

        Parameters
        ----------
        data
            Category record data specifying what to update
        where
            Category filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Category model

        Returns
        -------
        prisma.models.Category
            The updated Category record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        category = await Category.prisma().update(
            where={
                'id': 1675280054,
            },
            data={
                # data to update the Category record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.CategoryWhereUniqueInput,
        data: types.CategoryUpsertInput,
        include: Optional[types.CategoryInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Category filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Category model

        Returns
        -------
        prisma.models.Category
            The created or updated Category record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        category = await Category.prisma().upsert(
            where={
                'id': 1627576247,
            },
            data={
                'create': {
                    'id': 1627576247,
                    'name': 'chbfcacbd',
                    'description': 'efggddide',
                },
                'update': {
                    'name': 'chbfcacbd',
                    'description': 'efggddide',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.CategoryUpdateManyMutationInput,
        where: types.CategoryWhereInput,
    ) -> int:
        """Update multiple Category records

        Parameters
        ----------
        data
            Category data to update the selected Category records to
        where
            Filter to select the Category records to update

        Returns
        -------
        int
            The total number of Category records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Category records
        total = await Category.prisma().update_many(
            data={
                'description': 'cafeiaccbc'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CategoryWhereInput] = None,
        cursor: Optional[types.CategoryWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Category records present in the database

        Parameters
        ----------
        select
            Select the Category fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Category filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CategoryCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Category.prisma().count()

        # results: prisma.types.CategoryCountAggregateOutput
        results = await Category.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.CategoryCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CategoryWhereInput] = None,
        cursor: Optional[types.CategoryWhereUniqueInput] = None,
    ) -> types.CategoryCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.CategoryCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CategoryWhereInput] = None,
        cursor: Optional[types.CategoryWhereUniqueInput] = None,
    ) -> Union[int, types.CategoryCountAggregateOutput]:
        """Count the number of Category records present in the database

        Parameters
        ----------
        select
            Select the Category fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Category filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CategoryCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Category.prisma().count()

        # results: prisma.types.CategoryCountAggregateOutput
        results = await Category.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.CategoryCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.CategoryWhereInput] = None
    ) -> int:
        """Delete multiple Category records.

        Parameters
        ----------
        where
            Optional Category filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Category records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Category records
        total = await Category.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.CategoryScalarFieldKeys'],
        *,
        where: Optional['types.CategoryWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.CategoryAvgAggregateInput'] = None,
        sum: Optional['types.CategorySumAggregateInput'] = None,
        min: Optional['types.CategoryMinAggregateInput'] = None,
        max: Optional['types.CategoryMaxAggregateInput'] = None,
        having: Optional['types.CategoryScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.CategoryCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.CategoryScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.CategoryScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.CategoryGroupByOutput']:
        """Group Category records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Category fields to group records by
        where
            Category filter to select records
        take
            Limit the maximum number of Category records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.CategoryGroupByOutput]
            A list of dictionaries representing the Category record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Category records by description values
        # and count how many records are in each group
        results = await Category.prisma().group_by(
            ['description'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class VentaActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Venta]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Venta.prisma().query_raw(
            'SELECT * FROM Venta WHERE id = ?',
            60335757,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Venta
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Venta.prisma().query_first(
            'SELECT * FROM Venta WHERE total = ?',
            684462146.162550,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.VentaCreateInput,
        include: Optional[types.VentaInclude] = None
    ) -> _PrismaModelT:
        """Create a new Venta record.

        Parameters
        ----------
        data
            Venta record data
        include
            Specifies which relations should be loaded on the returned Venta model

        Returns
        -------
        prisma.models.Venta
            The created Venta record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Venta record from just the required fields
        venta = await Venta.prisma().create(
            data={
                # data to create a Venta record
                'total': 521827728.126603,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.VentaCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Venta records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Venta record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Venta.prisma().create_many(
            data=[
                {
                    # data to create a Venta record
                    'total': 93253262.205304,
                },
                {
                    # data to create a Venta record
                    'total': 685333180.12747,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.VentaWhereUniqueInput,
        include: Optional[types.VentaInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Venta record.

        Parameters
        ----------
        where
            Venta filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Venta model

        Returns
        -------
        prisma.models.Venta
            The deleted Venta record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        venta = await Venta.prisma().delete(
            where={
                'id': 948921754,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.VentaWhereUniqueInput,
        include: Optional[types.VentaInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Venta record.

        Parameters
        ----------
        where
            Venta filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Venta model

        Returns
        -------
        prisma.models.Venta
            The found Venta record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        venta = await Venta.prisma().find_unique(
            where={
                'id': 1964990155,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.VentaWhereUniqueInput,
        include: Optional[types.VentaInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Venta record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Venta filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Venta model

        Returns
        -------
        prisma.models.Venta
            The found Venta record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        venta = await Venta.prisma().find_unique_or_raise(
            where={
                'id': 1228891816,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.VentaWhereInput] = None,
        cursor: Optional[types.VentaWhereUniqueInput] = None,
        include: Optional[types.VentaInclude] = None,
        order: Optional[Union[types.VentaOrderByInput, List[types.VentaOrderByInput]]] = None,
        distinct: Optional[List[types.VentaScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Venta records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Venta records returned
        skip
            Ignore the first N results
        where
            Venta filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Venta model
        order
            Order the returned Venta records by any field
        distinct
            Filter Venta records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Venta]
            The list of all Venta records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Venta records
        ventas = await Venta.prisma().find_many(take=10)

        # find the first 5 Venta records ordered by the createdAt field
        ventas = await Venta.prisma().find_many(
            take=5,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.VentaWhereInput] = None,
        cursor: Optional[types.VentaWhereUniqueInput] = None,
        include: Optional[types.VentaInclude] = None,
        order: Optional[Union[types.VentaOrderByInput, List[types.VentaOrderByInput]]] = None,
        distinct: Optional[List[types.VentaScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Venta record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Venta filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Venta model
        order
            Order the returned Venta records by any field
        distinct
            Filter Venta records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Venta
            The first Venta record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Venta record ordered by the id field
        venta = await Venta.prisma().find_first(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.VentaWhereInput] = None,
        cursor: Optional[types.VentaWhereUniqueInput] = None,
        include: Optional[types.VentaInclude] = None,
        order: Optional[Union[types.VentaOrderByInput, List[types.VentaOrderByInput]]] = None,
        distinct: Optional[List[types.VentaScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Venta record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Venta filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Venta model
        order
            Order the returned Venta records by any field
        distinct
            Filter Venta records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Venta
            The first Venta record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Venta record ordered by the total field
        venta = await Venta.prisma().find_first_or_raise(
            skip=1,
            order={
                'total': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.VentaUpdateInput,
        where: types.VentaWhereUniqueInput,
        include: Optional[types.VentaInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Venta record.

        Parameters
        ----------
        data
            Venta record data specifying what to update
        where
            Venta filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Venta model

        Returns
        -------
        prisma.models.Venta
            The updated Venta record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        venta = await Venta.prisma().update(
            where={
                'id': 255202753,
            },
            data={
                # data to update the Venta record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.VentaWhereUniqueInput,
        data: types.VentaUpsertInput,
        include: Optional[types.VentaInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Venta filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Venta model

        Returns
        -------
        prisma.models.Venta
            The created or updated Venta record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        venta = await Venta.prisma().upsert(
            where={
                'id': 1223573862,
            },
            data={
                'create': {
                    'id': 1223573862,
                    'total': 685333180.12747,
                },
                'update': {
                    'total': 685333180.12747,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.VentaUpdateManyMutationInput,
        where: types.VentaWhereInput,
    ) -> int:
        """Update multiple Venta records

        Parameters
        ----------
        data
            Venta data to update the selected Venta records to
        where
            Filter to select the Venta records to update

        Returns
        -------
        int
            The total number of Venta records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Venta records
        total = await Venta.prisma().update_many(
            data={
                'createdAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.VentaWhereInput] = None,
        cursor: Optional[types.VentaWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Venta records present in the database

        Parameters
        ----------
        select
            Select the Venta fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Venta filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.VentaCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Venta.prisma().count()

        # results: prisma.types.VentaCountAggregateOutput
        results = await Venta.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.VentaCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.VentaWhereInput] = None,
        cursor: Optional[types.VentaWhereUniqueInput] = None,
    ) -> types.VentaCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.VentaCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.VentaWhereInput] = None,
        cursor: Optional[types.VentaWhereUniqueInput] = None,
    ) -> Union[int, types.VentaCountAggregateOutput]:
        """Count the number of Venta records present in the database

        Parameters
        ----------
        select
            Select the Venta fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Venta filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.VentaCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Venta.prisma().count()

        # results: prisma.types.VentaCountAggregateOutput
        results = await Venta.prisma().count(
            select={
                '_all': True,
                'total': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.VentaCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.VentaWhereInput] = None
    ) -> int:
        """Delete multiple Venta records.

        Parameters
        ----------
        where
            Optional Venta filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Venta records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Venta records
        total = await Venta.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.VentaScalarFieldKeys'],
        *,
        where: Optional['types.VentaWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.VentaAvgAggregateInput'] = None,
        sum: Optional['types.VentaSumAggregateInput'] = None,
        min: Optional['types.VentaMinAggregateInput'] = None,
        max: Optional['types.VentaMaxAggregateInput'] = None,
        having: Optional['types.VentaScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.VentaCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.VentaScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.VentaScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.VentaGroupByOutput']:
        """Group Venta records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Venta fields to group records by
        where
            Venta filter to select records
        take
            Limit the maximum number of Venta records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.VentaGroupByOutput]
            A list of dictionaries representing the Venta record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Venta records by createdAt values
        # and count how many records are in each group
        results = await Venta.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class DetalleActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Detalle]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Detalle.prisma().query_raw(
            'SELECT * FROM Detalle WHERE id = ?',
            541269159,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Detalle
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Detalle.prisma().query_first(
            'SELECT * FROM Detalle WHERE cantidad = ?',
            1064846676.50838,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.DetalleCreateInput,
        include: Optional[types.DetalleInclude] = None
    ) -> _PrismaModelT:
        """Create a new Detalle record.

        Parameters
        ----------
        data
            Detalle record data
        include
            Specifies which relations should be loaded on the returned Detalle model

        Returns
        -------
        prisma.models.Detalle
            The created Detalle record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Detalle record from just the required fields
        detalle = await Detalle.prisma().create(
            data={
                # data to create a Detalle record
                'cantidad': 1024265714.87207,
                'Subtotal': 1874748096.91689,
                'product_id': 769267518,
                'ventaId': 820312479,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.DetalleCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Detalle records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Detalle record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Detalle.prisma().create_many(
            data=[
                {
                    # data to create a Detalle record
                    'cantidad': 92728044.34485,
                    'Subtotal': 1121741130.149589,
                    'product_id': 208521688,
                    'ventaId': 860811569,
                },
                {
                    # data to create a Detalle record
                    'cantidad': 1660932118.52576,
                    'Subtotal': 736209796.49390,
                    'product_id': 639686562,
                    'ventaId': 654007347,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.DetalleWhereUniqueInput,
        include: Optional[types.DetalleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Detalle record.

        Parameters
        ----------
        where
            Detalle filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Detalle model

        Returns
        -------
        prisma.models.Detalle
            The deleted Detalle record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        detalle = await Detalle.prisma().delete(
            where={
                'id': 1905261552,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.DetalleWhereUniqueInput,
        include: Optional[types.DetalleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Detalle record.

        Parameters
        ----------
        where
            Detalle filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Detalle model

        Returns
        -------
        prisma.models.Detalle
            The found Detalle record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        detalle = await Detalle.prisma().find_unique(
            where={
                'id': 78746985,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.DetalleWhereUniqueInput,
        include: Optional[types.DetalleInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Detalle record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Detalle filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Detalle model

        Returns
        -------
        prisma.models.Detalle
            The found Detalle record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        detalle = await Detalle.prisma().find_unique_or_raise(
            where={
                'id': 1398328302,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DetalleWhereInput] = None,
        cursor: Optional[types.DetalleWhereUniqueInput] = None,
        include: Optional[types.DetalleInclude] = None,
        order: Optional[Union[types.DetalleOrderByInput, List[types.DetalleOrderByInput]]] = None,
        distinct: Optional[List[types.DetalleScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Detalle records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Detalle records returned
        skip
            Ignore the first N results
        where
            Detalle filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Detalle model
        order
            Order the returned Detalle records by any field
        distinct
            Filter Detalle records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Detalle]
            The list of all Detalle records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Detalle records
        detalles = await Detalle.prisma().find_many(take=10)

        # find the first 5 Detalle records ordered by the Subtotal field
        detalles = await Detalle.prisma().find_many(
            take=5,
            order={
                'Subtotal': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DetalleWhereInput] = None,
        cursor: Optional[types.DetalleWhereUniqueInput] = None,
        include: Optional[types.DetalleInclude] = None,
        order: Optional[Union[types.DetalleOrderByInput, List[types.DetalleOrderByInput]]] = None,
        distinct: Optional[List[types.DetalleScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Detalle record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Detalle filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Detalle model
        order
            Order the returned Detalle records by any field
        distinct
            Filter Detalle records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Detalle
            The first Detalle record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Detalle record ordered by the product_id field
        detalle = await Detalle.prisma().find_first(
            skip=1,
            order={
                'product_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DetalleWhereInput] = None,
        cursor: Optional[types.DetalleWhereUniqueInput] = None,
        include: Optional[types.DetalleInclude] = None,
        order: Optional[Union[types.DetalleOrderByInput, List[types.DetalleOrderByInput]]] = None,
        distinct: Optional[List[types.DetalleScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Detalle record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Detalle filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Detalle model
        order
            Order the returned Detalle records by any field
        distinct
            Filter Detalle records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Detalle
            The first Detalle record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Detalle record ordered by the ventaId field
        detalle = await Detalle.prisma().find_first_or_raise(
            skip=1,
            order={
                'ventaId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.DetalleUpdateInput,
        where: types.DetalleWhereUniqueInput,
        include: Optional[types.DetalleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Detalle record.

        Parameters
        ----------
        data
            Detalle record data specifying what to update
        where
            Detalle filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Detalle model

        Returns
        -------
        prisma.models.Detalle
            The updated Detalle record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        detalle = await Detalle.prisma().update(
            where={
                'id': 856000655,
            },
            data={
                # data to update the Detalle record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.DetalleWhereUniqueInput,
        data: types.DetalleUpsertInput,
        include: Optional[types.DetalleInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Detalle filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Detalle model

        Returns
        -------
        prisma.models.Detalle
            The created or updated Detalle record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        detalle = await Detalle.prisma().upsert(
            where={
                'id': 1452336924,
            },
            data={
                'create': {
                    'id': 1452336924,
                    'cantidad': 1660932118.52576,
                    'Subtotal': 736209796.49390,
                    'product_id': 639686562,
                    'ventaId': 654007347,
                },
                'update': {
                    'cantidad': 1660932118.52576,
                    'Subtotal': 736209796.49390,
                    'product_id': 639686562,
                    'ventaId': 654007347,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.DetalleUpdateManyMutationInput,
        where: types.DetalleWhereInput,
    ) -> int:
        """Update multiple Detalle records

        Parameters
        ----------
        data
            Detalle data to update the selected Detalle records to
        where
            Filter to select the Detalle records to update

        Returns
        -------
        int
            The total number of Detalle records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Detalle records
        total = await Detalle.prisma().update_many(
            data={
                'createdAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DetalleWhereInput] = None,
        cursor: Optional[types.DetalleWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Detalle records present in the database

        Parameters
        ----------
        select
            Select the Detalle fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Detalle filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DetalleCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Detalle.prisma().count()

        # results: prisma.types.DetalleCountAggregateOutput
        results = await Detalle.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.DetalleCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DetalleWhereInput] = None,
        cursor: Optional[types.DetalleWhereUniqueInput] = None,
    ) -> types.DetalleCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.DetalleCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DetalleWhereInput] = None,
        cursor: Optional[types.DetalleWhereUniqueInput] = None,
    ) -> Union[int, types.DetalleCountAggregateOutput]:
        """Count the number of Detalle records present in the database

        Parameters
        ----------
        select
            Select the Detalle fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Detalle filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DetalleCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Detalle.prisma().count()

        # results: prisma.types.DetalleCountAggregateOutput
        results = await Detalle.prisma().count(
            select={
                '_all': True,
                'cantidad': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.DetalleCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.DetalleWhereInput] = None
    ) -> int:
        """Delete multiple Detalle records.

        Parameters
        ----------
        where
            Optional Detalle filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Detalle records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Detalle records
        total = await Detalle.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.DetalleScalarFieldKeys'],
        *,
        where: Optional['types.DetalleWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.DetalleAvgAggregateInput'] = None,
        sum: Optional['types.DetalleSumAggregateInput'] = None,
        min: Optional['types.DetalleMinAggregateInput'] = None,
        max: Optional['types.DetalleMaxAggregateInput'] = None,
        having: Optional['types.DetalleScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.DetalleCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.DetalleScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.DetalleScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.DetalleGroupByOutput']:
        """Group Detalle records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Detalle fields to group records by
        where
            Detalle filter to select records
        take
            Limit the maximum number of Detalle records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.DetalleGroupByOutput]
            A list of dictionaries representing the Detalle record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Detalle records by Subtotal values
        # and count how many records are in each group
        results = await Detalle.prisma().group_by(
            ['Subtotal'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class envioActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.envio]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await envio.prisma().query_raw(
            'SELECT * FROM envio WHERE id = ?',
            1573199653,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.envio
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await envio.prisma().query_first(
            'SELECT * FROM envio WHERE alamacen_id = ?',
            2013903098,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.envioCreateInput,
        include: Optional[types.envioInclude] = None
    ) -> _PrismaModelT:
        """Create a new envio record.

        Parameters
        ----------
        data
            envio record data
        include
            Specifies which relations should be loaded on the returned envio model

        Returns
        -------
        prisma.models.envio
            The created envio record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a envio record from just the required fields
        envio = await envio.prisma().create(
            data={
                # data to create a envio record
                'alamacen_id': 500965035,
                'product_id': 1800624392,
                'cantidad': 'cahhaghecf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.envioCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple envio records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of envio record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await envio.prisma().create_many(
            data=[
                {
                    # data to create a envio record
                    'alamacen_id': 1672112838,
                    'product_id': 926677639,
                    'cantidad': 'beehgcebbg',
                },
                {
                    # data to create a envio record
                    'alamacen_id': 1738083805,
                    'product_id': 340946258,
                    'cantidad': 'gabahhhjf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.envioWhereUniqueInput,
        include: Optional[types.envioInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single envio record.

        Parameters
        ----------
        where
            envio filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned envio model

        Returns
        -------
        prisma.models.envio
            The deleted envio record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        envio = await envio.prisma().delete(
            where={
                'id': 290603296,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.envioWhereUniqueInput,
        include: Optional[types.envioInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique envio record.

        Parameters
        ----------
        where
            envio filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned envio model

        Returns
        -------
        prisma.models.envio
            The found envio record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        envio = await envio.prisma().find_unique(
            where={
                'id': 1855826649,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.envioWhereUniqueInput,
        include: Optional[types.envioInclude] = None
    ) -> _PrismaModelT:
        """Find a unique envio record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            envio filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned envio model

        Returns
        -------
        prisma.models.envio
            The found envio record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        envio = await envio.prisma().find_unique_or_raise(
            where={
                'id': 1611009182,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.envioWhereInput] = None,
        cursor: Optional[types.envioWhereUniqueInput] = None,
        include: Optional[types.envioInclude] = None,
        order: Optional[Union[types.envioOrderByInput, List[types.envioOrderByInput]]] = None,
        distinct: Optional[List[types.envioScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple envio records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of envio records returned
        skip
            Ignore the first N results
        where
            envio filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned envio model
        order
            Order the returned envio records by any field
        distinct
            Filter envio records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.envio]
            The list of all envio records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 envio records
        envios = await envio.prisma().find_many(take=10)

        # find the first 5 envio records ordered by the product_id field
        envios = await envio.prisma().find_many(
            take=5,
            order={
                'product_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.envioWhereInput] = None,
        cursor: Optional[types.envioWhereUniqueInput] = None,
        include: Optional[types.envioInclude] = None,
        order: Optional[Union[types.envioOrderByInput, List[types.envioOrderByInput]]] = None,
        distinct: Optional[List[types.envioScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single envio record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            envio filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned envio model
        order
            Order the returned envio records by any field
        distinct
            Filter envio records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.envio
            The first envio record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second envio record ordered by the cantidad field
        envio = await envio.prisma().find_first(
            skip=1,
            order={
                'cantidad': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.envioWhereInput] = None,
        cursor: Optional[types.envioWhereUniqueInput] = None,
        include: Optional[types.envioInclude] = None,
        order: Optional[Union[types.envioOrderByInput, List[types.envioOrderByInput]]] = None,
        distinct: Optional[List[types.envioScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single envio record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            envio filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned envio model
        order
            Order the returned envio records by any field
        distinct
            Filter envio records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.envio
            The first envio record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second envio record ordered by the createdAt field
        envio = await envio.prisma().find_first_or_raise(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.envioUpdateInput,
        where: types.envioWhereUniqueInput,
        include: Optional[types.envioInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single envio record.

        Parameters
        ----------
        data
            envio record data specifying what to update
        where
            envio filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned envio model

        Returns
        -------
        prisma.models.envio
            The updated envio record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        envio = await envio.prisma().update(
            where={
                'id': 446673791,
            },
            data={
                # data to update the envio record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.envioWhereUniqueInput,
        data: types.envioUpsertInput,
        include: Optional[types.envioInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            envio filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned envio model

        Returns
        -------
        prisma.models.envio
            The created or updated envio record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        envio = await envio.prisma().upsert(
            where={
                'id': 300568396,
            },
            data={
                'create': {
                    'id': 300568396,
                    'alamacen_id': 1738083805,
                    'product_id': 340946258,
                    'cantidad': 'gabahhhjf',
                },
                'update': {
                    'alamacen_id': 1738083805,
                    'product_id': 340946258,
                    'cantidad': 'gabahhhjf',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.envioUpdateManyMutationInput,
        where: types.envioWhereInput,
    ) -> int:
        """Update multiple envio records

        Parameters
        ----------
        data
            envio data to update the selected envio records to
        where
            Filter to select the envio records to update

        Returns
        -------
        int
            The total number of envio records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all envio records
        total = await envio.prisma().update_many(
            data={
                'id': 632626069
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.envioWhereInput] = None,
        cursor: Optional[types.envioWhereUniqueInput] = None,
    ) -> int:
        """Count the number of envio records present in the database

        Parameters
        ----------
        select
            Select the envio fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            envio filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.envioCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await envio.prisma().count()

        # results: prisma.types.envioCountAggregateOutput
        results = await envio.prisma().count(
            select={
                '_all': True,
                'alamacen_id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.envioCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.envioWhereInput] = None,
        cursor: Optional[types.envioWhereUniqueInput] = None,
    ) -> types.envioCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.envioCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.envioWhereInput] = None,
        cursor: Optional[types.envioWhereUniqueInput] = None,
    ) -> Union[int, types.envioCountAggregateOutput]:
        """Count the number of envio records present in the database

        Parameters
        ----------
        select
            Select the envio fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            envio filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.envioCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await envio.prisma().count()

        # results: prisma.types.envioCountAggregateOutput
        results = await envio.prisma().count(
            select={
                '_all': True,
                'product_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.envioCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.envioWhereInput] = None
    ) -> int:
        """Delete multiple envio records.

        Parameters
        ----------
        where
            Optional envio filter to find the records to be deleted

        Returns
        -------
        int
            The total number of envio records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all envio records
        total = await envio.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.envioScalarFieldKeys'],
        *,
        where: Optional['types.envioWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.envioAvgAggregateInput'] = None,
        sum: Optional['types.envioSumAggregateInput'] = None,
        min: Optional['types.envioMinAggregateInput'] = None,
        max: Optional['types.envioMaxAggregateInput'] = None,
        having: Optional['types.envioScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.envioCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.envioScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.envioScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.envioGroupByOutput']:
        """Group envio records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar envio fields to group records by
        where
            envio filter to select records
        take
            Limit the maximum number of envio records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.envioGroupByOutput]
            A list of dictionaries representing the envio record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group envio records by cantidad values
        # and count how many records are in each group
        results = await envio.prisma().group_by(
            ['cantidad'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class Pedidos_FabricanteActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Pedidos_Fabricante]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Pedidos_Fabricante.prisma().query_raw(
            'SELECT * FROM Pedidos_Fabricante WHERE id = ?',
            1724011690,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Pedidos_Fabricante
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Pedidos_Fabricante.prisma().query_first(
            'SELECT * FROM Pedidos_Fabricante WHERE nombre = ?',
            'ehabfhegh',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.Pedidos_FabricanteCreateInput,
        include: Optional[types.Pedidos_FabricanteInclude] = None
    ) -> _PrismaModelT:
        """Create a new Pedidos_Fabricante record.

        Parameters
        ----------
        data
            Pedidos_Fabricante record data
        include
            Specifies which relations should be loaded on the returned Pedidos_Fabricante model

        Returns
        -------
        prisma.models.Pedidos_Fabricante
            The created Pedidos_Fabricante record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Pedidos_Fabricante record from just the required fields
        pedidos_fabricante = await Pedidos_Fabricante.prisma().create(
            data={
                # data to create a Pedidos_Fabricante record
                'nombre': 'bcajcajjbc',
                'direccion': 'bfdgheeegf',
                'cantidad': 424218998.212563,
                'product_id': 536951780,
                'user_id': 924723277,
                'telefono': 'bgcbjdhjcc',
                'total': 1848832019.192152,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.Pedidos_FabricanteCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Pedidos_Fabricante records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Pedidos_Fabricante record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Pedidos_Fabricante.prisma().create_many(
            data=[
                {
                    # data to create a Pedidos_Fabricante record
                    'nombre': 'cbaaechiej',
                    'direccion': 'iejbeaaeg',
                    'cantidad': 928152175.27303,
                    'product_id': 982848517,
                    'user_id': 510737498,
                    'telefono': 'cbbheiicgh',
                    'total': 1401944936.129760,
                },
                {
                    # data to create a Pedidos_Fabricante record
                    'nombre': 'fbjeiiffa',
                    'direccion': 'jhgidcgbf',
                    'cantidad': 1696425492.16926,
                    'product_id': 1023081650,
                    'user_id': 327681027,
                    'telefono': 'fchheijjc',
                    'total': 2029357497.131859,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.Pedidos_FabricanteWhereUniqueInput,
        include: Optional[types.Pedidos_FabricanteInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Pedidos_Fabricante record.

        Parameters
        ----------
        where
            Pedidos_Fabricante filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Pedidos_Fabricante model

        Returns
        -------
        prisma.models.Pedidos_Fabricante
            The deleted Pedidos_Fabricante record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        pedidos_fabricante = await Pedidos_Fabricante.prisma().delete(
            where={
                'id': 2122112351,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.Pedidos_FabricanteWhereUniqueInput,
        include: Optional[types.Pedidos_FabricanteInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Pedidos_Fabricante record.

        Parameters
        ----------
        where
            Pedidos_Fabricante filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Pedidos_Fabricante model

        Returns
        -------
        prisma.models.Pedidos_Fabricante
            The found Pedidos_Fabricante record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        pedidos_fabricante = await Pedidos_Fabricante.prisma().find_unique(
            where={
                'id': 1024943020,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.Pedidos_FabricanteWhereUniqueInput,
        include: Optional[types.Pedidos_FabricanteInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Pedidos_Fabricante record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Pedidos_Fabricante filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Pedidos_Fabricante model

        Returns
        -------
        prisma.models.Pedidos_Fabricante
            The found Pedidos_Fabricante record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        pedidos_fabricante = await Pedidos_Fabricante.prisma().find_unique_or_raise(
            where={
                'id': 1717307509,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.Pedidos_FabricanteWhereInput] = None,
        cursor: Optional[types.Pedidos_FabricanteWhereUniqueInput] = None,
        include: Optional[types.Pedidos_FabricanteInclude] = None,
        order: Optional[Union[types.Pedidos_FabricanteOrderByInput, List[types.Pedidos_FabricanteOrderByInput]]] = None,
        distinct: Optional[List[types.Pedidos_FabricanteScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Pedidos_Fabricante records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Pedidos_Fabricante records returned
        skip
            Ignore the first N results
        where
            Pedidos_Fabricante filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Pedidos_Fabricante model
        order
            Order the returned Pedidos_Fabricante records by any field
        distinct
            Filter Pedidos_Fabricante records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Pedidos_Fabricante]
            The list of all Pedidos_Fabricante records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Pedidos_Fabricante records
        pedidos_fabricantes = await Pedidos_Fabricante.prisma().find_many(take=10)

        # find the first 5 Pedidos_Fabricante records ordered by the direccion field
        pedidos_fabricantes = await Pedidos_Fabricante.prisma().find_many(
            take=5,
            order={
                'direccion': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.Pedidos_FabricanteWhereInput] = None,
        cursor: Optional[types.Pedidos_FabricanteWhereUniqueInput] = None,
        include: Optional[types.Pedidos_FabricanteInclude] = None,
        order: Optional[Union[types.Pedidos_FabricanteOrderByInput, List[types.Pedidos_FabricanteOrderByInput]]] = None,
        distinct: Optional[List[types.Pedidos_FabricanteScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Pedidos_Fabricante record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Pedidos_Fabricante filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Pedidos_Fabricante model
        order
            Order the returned Pedidos_Fabricante records by any field
        distinct
            Filter Pedidos_Fabricante records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Pedidos_Fabricante
            The first Pedidos_Fabricante record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Pedidos_Fabricante record ordered by the cantidad field
        pedidos_fabricante = await Pedidos_Fabricante.prisma().find_first(
            skip=1,
            order={
                'cantidad': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.Pedidos_FabricanteWhereInput] = None,
        cursor: Optional[types.Pedidos_FabricanteWhereUniqueInput] = None,
        include: Optional[types.Pedidos_FabricanteInclude] = None,
        order: Optional[Union[types.Pedidos_FabricanteOrderByInput, List[types.Pedidos_FabricanteOrderByInput]]] = None,
        distinct: Optional[List[types.Pedidos_FabricanteScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Pedidos_Fabricante record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Pedidos_Fabricante filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Pedidos_Fabricante model
        order
            Order the returned Pedidos_Fabricante records by any field
        distinct
            Filter Pedidos_Fabricante records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Pedidos_Fabricante
            The first Pedidos_Fabricante record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Pedidos_Fabricante record ordered by the product_id field
        pedidos_fabricante = await Pedidos_Fabricante.prisma().find_first_or_raise(
            skip=1,
            order={
                'product_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.Pedidos_FabricanteUpdateInput,
        where: types.Pedidos_FabricanteWhereUniqueInput,
        include: Optional[types.Pedidos_FabricanteInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Pedidos_Fabricante record.

        Parameters
        ----------
        data
            Pedidos_Fabricante record data specifying what to update
        where
            Pedidos_Fabricante filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Pedidos_Fabricante model

        Returns
        -------
        prisma.models.Pedidos_Fabricante
            The updated Pedidos_Fabricante record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        pedidos_fabricante = await Pedidos_Fabricante.prisma().update(
            where={
                'id': 1598124042,
            },
            data={
                # data to update the Pedidos_Fabricante record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.Pedidos_FabricanteWhereUniqueInput,
        data: types.Pedidos_FabricanteUpsertInput,
        include: Optional[types.Pedidos_FabricanteInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Pedidos_Fabricante filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Pedidos_Fabricante model

        Returns
        -------
        prisma.models.Pedidos_Fabricante
            The created or updated Pedidos_Fabricante record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        pedidos_fabricante = await Pedidos_Fabricante.prisma().upsert(
            where={
                'id': 817623163,
            },
            data={
                'create': {
                    'id': 817623163,
                    'nombre': 'fbjeiiffa',
                    'direccion': 'jhgidcgbf',
                    'cantidad': 1696425492.16926,
                    'product_id': 1023081650,
                    'user_id': 327681027,
                    'telefono': 'fchheijjc',
                    'total': 2029357497.131859,
                },
                'update': {
                    'nombre': 'fbjeiiffa',
                    'direccion': 'jhgidcgbf',
                    'cantidad': 1696425492.16926,
                    'product_id': 1023081650,
                    'user_id': 327681027,
                    'telefono': 'fchheijjc',
                    'total': 2029357497.131859,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.Pedidos_FabricanteUpdateManyMutationInput,
        where: types.Pedidos_FabricanteWhereInput,
    ) -> int:
        """Update multiple Pedidos_Fabricante records

        Parameters
        ----------
        data
            Pedidos_Fabricante data to update the selected Pedidos_Fabricante records to
        where
            Filter to select the Pedidos_Fabricante records to update

        Returns
        -------
        int
            The total number of Pedidos_Fabricante records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Pedidos_Fabricante records
        total = await Pedidos_Fabricante.prisma().update_many(
            data={
                'user_id': 1030557336
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.Pedidos_FabricanteWhereInput] = None,
        cursor: Optional[types.Pedidos_FabricanteWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Pedidos_Fabricante records present in the database

        Parameters
        ----------
        select
            Select the Pedidos_Fabricante fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Pedidos_Fabricante filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.Pedidos_FabricanteCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Pedidos_Fabricante.prisma().count()

        # results: prisma.types.Pedidos_FabricanteCountAggregateOutput
        results = await Pedidos_Fabricante.prisma().count(
            select={
                '_all': True,
                'telefono': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.Pedidos_FabricanteCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.Pedidos_FabricanteWhereInput] = None,
        cursor: Optional[types.Pedidos_FabricanteWhereUniqueInput] = None,
    ) -> types.Pedidos_FabricanteCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.Pedidos_FabricanteCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.Pedidos_FabricanteWhereInput] = None,
        cursor: Optional[types.Pedidos_FabricanteWhereUniqueInput] = None,
    ) -> Union[int, types.Pedidos_FabricanteCountAggregateOutput]:
        """Count the number of Pedidos_Fabricante records present in the database

        Parameters
        ----------
        select
            Select the Pedidos_Fabricante fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Pedidos_Fabricante filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.Pedidos_FabricanteCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Pedidos_Fabricante.prisma().count()

        # results: prisma.types.Pedidos_FabricanteCountAggregateOutput
        results = await Pedidos_Fabricante.prisma().count(
            select={
                '_all': True,
                'fecha': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.Pedidos_FabricanteCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.Pedidos_FabricanteWhereInput] = None
    ) -> int:
        """Delete multiple Pedidos_Fabricante records.

        Parameters
        ----------
        where
            Optional Pedidos_Fabricante filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Pedidos_Fabricante records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Pedidos_Fabricante records
        total = await Pedidos_Fabricante.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.Pedidos_FabricanteScalarFieldKeys'],
        *,
        where: Optional['types.Pedidos_FabricanteWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.Pedidos_FabricanteAvgAggregateInput'] = None,
        sum: Optional['types.Pedidos_FabricanteSumAggregateInput'] = None,
        min: Optional['types.Pedidos_FabricanteMinAggregateInput'] = None,
        max: Optional['types.Pedidos_FabricanteMaxAggregateInput'] = None,
        having: Optional['types.Pedidos_FabricanteScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.Pedidos_FabricanteCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.Pedidos_FabricanteScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.Pedidos_FabricanteScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.Pedidos_FabricanteGroupByOutput']:
        """Group Pedidos_Fabricante records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Pedidos_Fabricante fields to group records by
        where
            Pedidos_Fabricante filter to select records
        take
            Limit the maximum number of Pedidos_Fabricante records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.Pedidos_FabricanteGroupByOutput]
            A list of dictionaries representing the Pedidos_Fabricante record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Pedidos_Fabricante records by total values
        # and count how many records are in each group
        results = await Pedidos_Fabricante.prisma().group_by(
            ['total'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class AlmacenActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Almacen]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Almacen.prisma().query_raw(
            'SELECT * FROM Almacen WHERE id = ?',
            1131525873,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Almacen
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Almacen.prisma().query_first(
            'SELECT * FROM Almacen WHERE nombre = ?',
            'cbagggbji',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.AlmacenCreateInput,
        include: Optional[types.AlmacenInclude] = None
    ) -> _PrismaModelT:
        """Create a new Almacen record.

        Parameters
        ----------
        data
            Almacen record data
        include
            Specifies which relations should be loaded on the returned Almacen model

        Returns
        -------
        prisma.models.Almacen
            The created Almacen record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Almacen record from just the required fields
        almacen = await Almacen.prisma().create(
            data={
                # data to create a Almacen record
                'nombre': 'bchgafhjed',
                'direccion': 'heffgjdei',
                'descripcion': 'dahihgbeb',
                'user_id': 1674049122,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.AlmacenCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Almacen records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Almacen record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Almacen.prisma().create_many(
            data=[
                {
                    # data to create a Almacen record
                    'nombre': 'bfcgifeged',
                    'direccion': 'jfiahhbae',
                    'descripcion': 'bfbdafajcb',
                    'user_id': 204674734,
                },
                {
                    # data to create a Almacen record
                    'nombre': 'caghgfbggd',
                    'direccion': 'bbidjbbjaa',
                    'descripcion': 'bfijhaejdd',
                    'user_id': 1243475898,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.AlmacenWhereUniqueInput,
        include: Optional[types.AlmacenInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Almacen record.

        Parameters
        ----------
        where
            Almacen filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Almacen model

        Returns
        -------
        prisma.models.Almacen
            The deleted Almacen record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        almacen = await Almacen.prisma().delete(
            where={
                'id': 1369828971,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.AlmacenWhereUniqueInput,
        include: Optional[types.AlmacenInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Almacen record.

        Parameters
        ----------
        where
            Almacen filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Almacen model

        Returns
        -------
        prisma.models.Almacen
            The found Almacen record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        almacen = await Almacen.prisma().find_unique(
            where={
                'id': 1678593480,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.AlmacenWhereUniqueInput,
        include: Optional[types.AlmacenInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Almacen record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Almacen filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Almacen model

        Returns
        -------
        prisma.models.Almacen
            The found Almacen record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        almacen = await Almacen.prisma().find_unique_or_raise(
            where={
                'id': 403521121,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AlmacenWhereInput] = None,
        cursor: Optional[types.AlmacenWhereUniqueInput] = None,
        include: Optional[types.AlmacenInclude] = None,
        order: Optional[Union[types.AlmacenOrderByInput, List[types.AlmacenOrderByInput]]] = None,
        distinct: Optional[List[types.AlmacenScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Almacen records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Almacen records returned
        skip
            Ignore the first N results
        where
            Almacen filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Almacen model
        order
            Order the returned Almacen records by any field
        distinct
            Filter Almacen records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Almacen]
            The list of all Almacen records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Almacen records
        almacens = await Almacen.prisma().find_many(take=10)

        # find the first 5 Almacen records ordered by the direccion field
        almacens = await Almacen.prisma().find_many(
            take=5,
            order={
                'direccion': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AlmacenWhereInput] = None,
        cursor: Optional[types.AlmacenWhereUniqueInput] = None,
        include: Optional[types.AlmacenInclude] = None,
        order: Optional[Union[types.AlmacenOrderByInput, List[types.AlmacenOrderByInput]]] = None,
        distinct: Optional[List[types.AlmacenScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Almacen record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Almacen filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Almacen model
        order
            Order the returned Almacen records by any field
        distinct
            Filter Almacen records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Almacen
            The first Almacen record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Almacen record ordered by the descripcion field
        almacen = await Almacen.prisma().find_first(
            skip=1,
            order={
                'descripcion': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AlmacenWhereInput] = None,
        cursor: Optional[types.AlmacenWhereUniqueInput] = None,
        include: Optional[types.AlmacenInclude] = None,
        order: Optional[Union[types.AlmacenOrderByInput, List[types.AlmacenOrderByInput]]] = None,
        distinct: Optional[List[types.AlmacenScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Almacen record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Almacen filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Almacen model
        order
            Order the returned Almacen records by any field
        distinct
            Filter Almacen records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Almacen
            The first Almacen record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Almacen record ordered by the user_id field
        almacen = await Almacen.prisma().find_first_or_raise(
            skip=1,
            order={
                'user_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.AlmacenUpdateInput,
        where: types.AlmacenWhereUniqueInput,
        include: Optional[types.AlmacenInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Almacen record.

        Parameters
        ----------
        data
            Almacen record data specifying what to update
        where
            Almacen filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Almacen model

        Returns
        -------
        prisma.models.Almacen
            The updated Almacen record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        almacen = await Almacen.prisma().update(
            where={
                'id': 648760710,
            },
            data={
                # data to update the Almacen record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.AlmacenWhereUniqueInput,
        data: types.AlmacenUpsertInput,
        include: Optional[types.AlmacenInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Almacen filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Almacen model

        Returns
        -------
        prisma.models.Almacen
            The created or updated Almacen record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        almacen = await Almacen.prisma().upsert(
            where={
                'id': 607323719,
            },
            data={
                'create': {
                    'id': 607323719,
                    'nombre': 'caghgfbggd',
                    'direccion': 'bbidjbbjaa',
                    'descripcion': 'bfijhaejdd',
                    'user_id': 1243475898,
                },
                'update': {
                    'nombre': 'caghgfbggd',
                    'direccion': 'bbidjbbjaa',
                    'descripcion': 'bfijhaejdd',
                    'user_id': 1243475898,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.AlmacenUpdateManyMutationInput,
        where: types.AlmacenWhereInput,
    ) -> int:
        """Update multiple Almacen records

        Parameters
        ----------
        data
            Almacen data to update the selected Almacen records to
        where
            Filter to select the Almacen records to update

        Returns
        -------
        int
            The total number of Almacen records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Almacen records
        total = await Almacen.prisma().update_many(
            data={
                'id': 1468890740
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AlmacenWhereInput] = None,
        cursor: Optional[types.AlmacenWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Almacen records present in the database

        Parameters
        ----------
        select
            Select the Almacen fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Almacen filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AlmacenCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Almacen.prisma().count()

        # results: prisma.types.AlmacenCountAggregateOutput
        results = await Almacen.prisma().count(
            select={
                '_all': True,
                'nombre': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.AlmacenCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AlmacenWhereInput] = None,
        cursor: Optional[types.AlmacenWhereUniqueInput] = None,
    ) -> types.AlmacenCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.AlmacenCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AlmacenWhereInput] = None,
        cursor: Optional[types.AlmacenWhereUniqueInput] = None,
    ) -> Union[int, types.AlmacenCountAggregateOutput]:
        """Count the number of Almacen records present in the database

        Parameters
        ----------
        select
            Select the Almacen fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Almacen filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AlmacenCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Almacen.prisma().count()

        # results: prisma.types.AlmacenCountAggregateOutput
        results = await Almacen.prisma().count(
            select={
                '_all': True,
                'direccion': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.AlmacenCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.AlmacenWhereInput] = None
    ) -> int:
        """Delete multiple Almacen records.

        Parameters
        ----------
        where
            Optional Almacen filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Almacen records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Almacen records
        total = await Almacen.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.AlmacenScalarFieldKeys'],
        *,
        where: Optional['types.AlmacenWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.AlmacenAvgAggregateInput'] = None,
        sum: Optional['types.AlmacenSumAggregateInput'] = None,
        min: Optional['types.AlmacenMinAggregateInput'] = None,
        max: Optional['types.AlmacenMaxAggregateInput'] = None,
        having: Optional['types.AlmacenScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.AlmacenCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.AlmacenScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.AlmacenScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.AlmacenGroupByOutput']:
        """Group Almacen records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Almacen fields to group records by
        where
            Almacen filter to select records
        take
            Limit the maximum number of Almacen records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.AlmacenGroupByOutput]
            A list of dictionaries representing the Almacen record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Almacen records by descripcion values
        # and count how many records are in each group
        results = await Almacen.prisma().group_by(
            ['descripcion'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models