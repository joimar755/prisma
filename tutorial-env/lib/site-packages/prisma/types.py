# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
                'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
                'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
                'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
                'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _RoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Role']]


class _RoleListFilterHasInput(TypedDict):
    has: 'enums.Role'


class _RoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Role']


class _RoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Role']


class _RoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


RoleListFilter = Union[
    _RoleListFilterHasInput,
    _RoleListFilterEqualsInput,
    _RoleListFilterHasSomeInput,
    _RoleListFilterIsEmptyInput,
    _RoleListFilterHasEveryInput,
]


class _RoleListUpdateSet(TypedDict):
    set: List['enums.Role']


class _RoleListUpdatePush(TypedDict):
    push: List['enums.Role']


RoleListUpdate = Union[
    List['enums.Role'],
    _RoleListUpdateSet,
    _RoleListUpdatePush,
]


# Users types

class UsersOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Users create method"""
    id: _int
    role: 'enums.Role'
    almacenes: 'AlmacenCreateManyNestedWithoutRelationsInput'
    Pedidos_Fabricante: 'Pedidos_FabricanteCreateManyNestedWithoutRelationsInput'


class UsersCreateInput(UsersOptionalCreateInput):
    """Required arguments to the Users create method"""
    name: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UsersOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Users create method, without relations"""
    id: _int
    role: 'enums.Role'


class UsersCreateWithoutRelationsInput(UsersOptionalCreateWithoutRelationsInput):
    """Required arguments to the Users create method, without relations"""
    name: _str
    password: _str

class UsersConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UsersCreateWithoutRelationsInput'
    where: 'UsersWhereUniqueInput'

class UsersCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UsersCreateWithoutRelationsInput'
    connect: 'UsersWhereUniqueInput'
    connect_or_create: 'UsersConnectOrCreateWithoutRelationsInput'


class UsersCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UsersCreateWithoutRelationsInput', List['UsersCreateWithoutRelationsInput']]
    connect: Union['UsersWhereUniqueInput', List['UsersWhereUniqueInput']]
    connect_or_create: Union['UsersConnectOrCreateWithoutRelationsInput', List['UsersConnectOrCreateWithoutRelationsInput']]

_UsersWhereUnique_id_Input = TypedDict(
    '_UsersWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UsersWhereUnique_name_Input = TypedDict(
    '_UsersWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

UsersWhereUniqueInput = Union[
    '_UsersWhereUnique_id_Input',
    '_UsersWhereUnique_name_Input',
]


class UsersUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    password: _str
    role: 'enums.Role'
    almacenes: 'AlmacenUpdateManyWithoutRelationsInput'
    Pedidos_Fabricante: 'Pedidos_FabricanteUpdateManyWithoutRelationsInput'


class UsersUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    password: _str
    role: 'enums.Role'


class UsersUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UsersCreateWithoutRelationsInput']
    connect: List['UsersWhereUniqueInput']
    connect_or_create: List['UsersConnectOrCreateWithoutRelationsInput']
    set: List['UsersWhereUniqueInput']
    disconnect: List['UsersWhereUniqueInput']
    delete: List['UsersWhereUniqueInput']

    # TODO
    # update: List['UsersUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UsersUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UsersScalarWhereInput']
    # upsert: List['UsersUpserteWithWhereUniqueWithoutRelationsInput']


class UsersUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UsersCreateWithoutRelationsInput'
    connect: 'UsersWhereUniqueInput'
    connect_or_create: 'UsersConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UsersUpdateInput'
    # upsert: 'UsersUpsertWithoutRelationsInput'


class UsersUpsertInput(TypedDict):
    create: 'UsersCreateInput'
    update: 'UsersUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Users_id_OrderByInput = TypedDict(
    '_Users_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Users_name_OrderByInput = TypedDict(
    '_Users_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Users_password_OrderByInput = TypedDict(
    '_Users_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_Users_role_OrderByInput = TypedDict(
    '_Users_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_Users_RelevanceInner = TypedDict(
    '_Users_RelevanceInner',
    {
        'fields': 'List[UsersScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Users_RelevanceOrderByInput = TypedDict(
    '_Users_RelevanceOrderByInput',
    {
        '_relevance': '_Users_RelevanceInner',
    },
    total=True
)

UsersOrderByInput = Union[
    '_Users_id_OrderByInput',
    '_Users_name_OrderByInput',
    '_Users_password_OrderByInput',
    '_Users_role_OrderByInput',
    '_Users_RelevanceOrderByInput',
]



# recursive Users types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UsersRelationFilter = TypedDict(
    'UsersRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UsersListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UsersInclude(TypedDict, total=False):
    """Users relational arguments"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromUsers']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromUsers']


    

class UsersIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromUsersRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromUsersRecursive1']


class UsersIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromUsersRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromUsersRecursive2']


class UsersIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromUsersRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromUsersRecursive3']


class UsersIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromUsersRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromUsersRecursive4']


class UsersIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class UsersArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyUsersArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class ProductIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    category: Union[bool, 'CategoryArgsFromUsersRecursive1']
    detalles: Union[bool, 'FindManyDetalleArgsFromUsersRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromUsersRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromUsersRecursive1']


class ProductIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    category: Union[bool, 'CategoryArgsFromUsersRecursive2']
    detalles: Union[bool, 'FindManyDetalleArgsFromUsersRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromUsersRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromUsersRecursive2']


class ProductIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    category: Union[bool, 'CategoryArgsFromUsersRecursive3']
    detalles: Union[bool, 'FindManyDetalleArgsFromUsersRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromUsersRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromUsersRecursive3']


class ProductIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    category: Union[bool, 'CategoryArgsFromUsersRecursive4']
    detalles: Union[bool, 'FindManyDetalleArgsFromUsersRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromUsersRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromUsersRecursive4']


class ProductIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class ProductArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyProductArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class CategoryIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    products: Union[bool, 'FindManyProductArgsFromUsersRecursive1']


class CategoryIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    products: Union[bool, 'FindManyProductArgsFromUsersRecursive2']


class CategoryIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    products: Union[bool, 'FindManyProductArgsFromUsersRecursive3']


class CategoryIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    products: Union[bool, 'FindManyProductArgsFromUsersRecursive4']


class CategoryIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class CategoryArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyCategoryArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class VentaIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    detalles: Union[bool, 'FindManyDetalleArgsFromUsersRecursive1']


class VentaIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    detalles: Union[bool, 'FindManyDetalleArgsFromUsersRecursive2']


class VentaIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    detalles: Union[bool, 'FindManyDetalleArgsFromUsersRecursive3']


class VentaIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    detalles: Union[bool, 'FindManyDetalleArgsFromUsersRecursive4']


class VentaIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class VentaArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'VentaIncludeFromVentaRecursive1'


class VentaArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'VentaIncludeFromVentaRecursive2'


class VentaArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'VentaIncludeFromVentaRecursive3'


class VentaArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'VentaIncludeFromVentaRecursive4'


class VentaArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyVentaArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive1'


class FindManyVentaArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive2'


class FindManyVentaArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive3'


class FindManyVentaArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive4'


class FindManyVentaArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    
    

class DetalleIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    product: Union[bool, 'ProductArgsFromUsersRecursive1']
    venta: Union[bool, 'VentaArgsFromUsersRecursive1']


class DetalleIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    product: Union[bool, 'ProductArgsFromUsersRecursive2']
    venta: Union[bool, 'VentaArgsFromUsersRecursive2']


class DetalleIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    product: Union[bool, 'ProductArgsFromUsersRecursive3']
    venta: Union[bool, 'VentaArgsFromUsersRecursive3']


class DetalleIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    product: Union[bool, 'ProductArgsFromUsersRecursive4']
    venta: Union[bool, 'VentaArgsFromUsersRecursive4']


class DetalleIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class DetalleArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'DetalleIncludeFromDetalleRecursive1'


class DetalleArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'DetalleIncludeFromDetalleRecursive2'


class DetalleArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'DetalleIncludeFromDetalleRecursive3'


class DetalleArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'DetalleIncludeFromDetalleRecursive4'


class DetalleArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyDetalleArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive1'


class FindManyDetalleArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive2'


class FindManyDetalleArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive3'


class FindManyDetalleArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive4'


class FindManyDetalleArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    
    

class envioIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    alamacen: Union[bool, 'AlmacenArgsFromUsersRecursive1']
    product: Union[bool, 'ProductArgsFromUsersRecursive1']


class envioIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    alamacen: Union[bool, 'AlmacenArgsFromUsersRecursive2']
    product: Union[bool, 'ProductArgsFromUsersRecursive2']


class envioIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    alamacen: Union[bool, 'AlmacenArgsFromUsersRecursive3']
    product: Union[bool, 'ProductArgsFromUsersRecursive3']


class envioIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    alamacen: Union[bool, 'AlmacenArgsFromUsersRecursive4']
    product: Union[bool, 'ProductArgsFromUsersRecursive4']


class envioIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class envioArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'envioIncludeFromenvioRecursive1'


class envioArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'envioIncludeFromenvioRecursive2'


class envioArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'envioIncludeFromenvioRecursive3'


class envioArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'envioIncludeFromenvioRecursive4'


class envioArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyenvioArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive1'


class FindManyenvioArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive2'


class FindManyenvioArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive3'


class FindManyenvioArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive4'


class FindManyenvioArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    
    

class Pedidos_FabricanteIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    product: Union[bool, 'ProductArgsFromUsersRecursive1']
    user: Union[bool, 'UsersArgsFromUsersRecursive1']


class Pedidos_FabricanteIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    product: Union[bool, 'ProductArgsFromUsersRecursive2']
    user: Union[bool, 'UsersArgsFromUsersRecursive2']


class Pedidos_FabricanteIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    product: Union[bool, 'ProductArgsFromUsersRecursive3']
    user: Union[bool, 'UsersArgsFromUsersRecursive3']


class Pedidos_FabricanteIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    product: Union[bool, 'ProductArgsFromUsersRecursive4']
    user: Union[bool, 'UsersArgsFromUsersRecursive4']


class Pedidos_FabricanteIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class Pedidos_FabricanteArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class Pedidos_FabricanteArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class Pedidos_FabricanteArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class Pedidos_FabricanteArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class Pedidos_FabricanteArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyPedidos_FabricanteArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class FindManyPedidos_FabricanteArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class FindManyPedidos_FabricanteArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class FindManyPedidos_FabricanteArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class FindManyPedidos_FabricanteArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    
    

class AlmacenIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    user: Union[bool, 'UsersArgsFromUsersRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromUsersRecursive1']


class AlmacenIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    user: Union[bool, 'UsersArgsFromUsersRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromUsersRecursive2']


class AlmacenIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    user: Union[bool, 'UsersArgsFromUsersRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromUsersRecursive3']


class AlmacenIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    user: Union[bool, 'UsersArgsFromUsersRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromUsersRecursive4']


class AlmacenIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class AlmacenArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class AlmacenArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class AlmacenArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class AlmacenArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class AlmacenArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyAlmacenArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class FindManyAlmacenArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class FindManyAlmacenArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class FindManyAlmacenArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class FindManyAlmacenArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    


FindManyUsersArgs = FindManyUsersArgsFromUsers
FindFirstUsersArgs = FindManyUsersArgsFromUsers


    

class UsersWhereInput(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    almacenes: 'AlmacenListRelationFilter'
    Pedidos_Fabricante: 'Pedidos_FabricanteListRelationFilter'

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive1', List['UsersWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive1']
    OR: List['UsersWhereInputRecursive1']
    NOT: List['UsersWhereInputRecursive1']


class UsersWhereInputRecursive1(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    almacenes: 'AlmacenListRelationFilter'
    Pedidos_Fabricante: 'Pedidos_FabricanteListRelationFilter'

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive2', List['UsersWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive2']
    OR: List['UsersWhereInputRecursive2']
    NOT: List['UsersWhereInputRecursive2']


class UsersWhereInputRecursive2(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    almacenes: 'AlmacenListRelationFilter'
    Pedidos_Fabricante: 'Pedidos_FabricanteListRelationFilter'

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive3', List['UsersWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive3']
    OR: List['UsersWhereInputRecursive3']
    NOT: List['UsersWhereInputRecursive3']


class UsersWhereInputRecursive3(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    almacenes: 'AlmacenListRelationFilter'
    Pedidos_Fabricante: 'Pedidos_FabricanteListRelationFilter'

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive4', List['UsersWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive4']
    OR: List['UsersWhereInputRecursive4']
    NOT: List['UsersWhereInputRecursive4']


class UsersWhereInputRecursive4(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    almacenes: 'AlmacenListRelationFilter'
    Pedidos_Fabricante: 'Pedidos_FabricanteListRelationFilter'



# aggregate Users types


    

class UsersScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'

    AND: List['UsersScalarWhereWithAggregatesInputRecursive1']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive1']


class UsersScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'

    AND: List['UsersScalarWhereWithAggregatesInputRecursive2']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive2']


class UsersScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'

    AND: List['UsersScalarWhereWithAggregatesInputRecursive3']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive3']


class UsersScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'

    AND: List['UsersScalarWhereWithAggregatesInputRecursive4']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive4']


class UsersScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'



class UsersGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    password: _str
    role: 'enums.Role'
    _sum: 'UsersSumAggregateOutput'
    _avg: 'UsersAvgAggregateOutput'
    _min: 'UsersMinAggregateOutput'
    _max: 'UsersMaxAggregateOutput'
    _count: 'UsersCountAggregateOutput'


class UsersAvgAggregateOutput(TypedDict, total=False):
    """Users output for aggregating averages"""
    id: float


class UsersSumAggregateOutput(TypedDict, total=False):
    """Users output for aggregating sums"""
    id: _int


class UsersScalarAggregateOutput(TypedDict, total=False):
    """Users output including scalar fields"""
    id: _int
    name: _str
    password: _str
    role: 'enums.Role'


UsersMinAggregateOutput = UsersScalarAggregateOutput
UsersMaxAggregateOutput = UsersScalarAggregateOutput


class UsersMaxAggregateInput(TypedDict, total=False):
    """Users input for aggregating by max"""
    id: bool
    name: bool
    password: bool
    role: bool


class UsersMinAggregateInput(TypedDict, total=False):
    """Users input for aggregating by min"""
    id: bool
    name: bool
    password: bool
    role: bool


class UsersNumberAggregateInput(TypedDict, total=False):
    """Users input for aggregating numbers"""
    id: bool


UsersAvgAggregateInput = UsersNumberAggregateInput
UsersSumAggregateInput = UsersNumberAggregateInput


UsersCountAggregateInput = TypedDict(
    'UsersCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'password': bool,
        'role': bool,
        '_all': bool,
    },
    total=False,
)

UsersCountAggregateOutput = TypedDict(
    'UsersCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'password': int,
        'role': int,
        '_all': int,
    },
    total=False,
)


UsersKeys = Literal[
    'id',
    'name',
    'password',
    'role',
    'almacenes',
    'Pedidos_Fabricante',
]
UsersScalarFieldKeys = Literal[
    'id',
    'name',
    'password',
    'role',
]
UsersScalarFieldKeysT = TypeVar('UsersScalarFieldKeysT', bound=UsersScalarFieldKeys)

UsersRelationalFieldKeys = Literal[
        'almacenes',
        'Pedidos_Fabricante',
    ]

# Product types

class ProductOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Product create method"""
    id: _int
    category: 'CategoryCreateNestedWithoutRelationsInput'
    category_id: _int
    detalles: 'DetalleCreateManyNestedWithoutRelationsInput'
    Pedidos_Fabricante: 'Pedidos_FabricanteCreateManyNestedWithoutRelationsInput'
    envio: 'envioCreateManyNestedWithoutRelationsInput'


class ProductCreateInput(ProductOptionalCreateInput):
    """Required arguments to the Product create method"""
    name: _str
    description: _str
    price: _int
    Stock: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProductOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Product create method, without relations"""
    id: _int
    category_id: _int


class ProductCreateWithoutRelationsInput(ProductOptionalCreateWithoutRelationsInput):
    """Required arguments to the Product create method, without relations"""
    name: _str
    description: _str
    price: _int
    Stock: _int

class ProductConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProductCreateWithoutRelationsInput'
    where: 'ProductWhereUniqueInput'

class ProductCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductCreateWithoutRelationsInput'
    connect: 'ProductWhereUniqueInput'
    connect_or_create: 'ProductConnectOrCreateWithoutRelationsInput'


class ProductCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProductCreateWithoutRelationsInput', List['ProductCreateWithoutRelationsInput']]
    connect: Union['ProductWhereUniqueInput', List['ProductWhereUniqueInput']]
    connect_or_create: Union['ProductConnectOrCreateWithoutRelationsInput', List['ProductConnectOrCreateWithoutRelationsInput']]

_ProductWhereUnique_id_Input = TypedDict(
    '_ProductWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_ProductWhereUnique_name_Input = TypedDict(
    '_ProductWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

_ProductWhereUnique_description_Input = TypedDict(
    '_ProductWhereUnique_description_Input',
    {
        'description': '_str',
    },
    total=True
)

ProductWhereUniqueInput = Union[
    '_ProductWhereUnique_id_Input',
    '_ProductWhereUnique_name_Input',
    '_ProductWhereUnique_description_Input',
]


class ProductUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: _str
    price: Union[AtomicIntInput, _int]
    Stock: Union[AtomicIntInput, _int]
    category: 'CategoryUpdateOneWithoutRelationsInput'
    detalles: 'DetalleUpdateManyWithoutRelationsInput'
    Pedidos_Fabricante: 'Pedidos_FabricanteUpdateManyWithoutRelationsInput'
    envio: 'envioUpdateManyWithoutRelationsInput'


class ProductUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: _str
    price: Union[AtomicIntInput, _int]
    Stock: Union[AtomicIntInput, _int]


class ProductUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProductCreateWithoutRelationsInput']
    connect: List['ProductWhereUniqueInput']
    connect_or_create: List['ProductConnectOrCreateWithoutRelationsInput']
    set: List['ProductWhereUniqueInput']
    disconnect: List['ProductWhereUniqueInput']
    delete: List['ProductWhereUniqueInput']

    # TODO
    # update: List['ProductUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProductUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProductScalarWhereInput']
    # upsert: List['ProductUpserteWithWhereUniqueWithoutRelationsInput']


class ProductUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductCreateWithoutRelationsInput'
    connect: 'ProductWhereUniqueInput'
    connect_or_create: 'ProductConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProductUpdateInput'
    # upsert: 'ProductUpsertWithoutRelationsInput'


class ProductUpsertInput(TypedDict):
    create: 'ProductCreateInput'
    update: 'ProductUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Product_id_OrderByInput = TypedDict(
    '_Product_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Product_name_OrderByInput = TypedDict(
    '_Product_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Product_description_OrderByInput = TypedDict(
    '_Product_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Product_price_OrderByInput = TypedDict(
    '_Product_price_OrderByInput',
    {
        'price': 'SortOrder',
    },
    total=True
)

_Product_Stock_OrderByInput = TypedDict(
    '_Product_Stock_OrderByInput',
    {
        'Stock': 'SortOrder',
    },
    total=True
)

_Product_category_id_OrderByInput = TypedDict(
    '_Product_category_id_OrderByInput',
    {
        'category_id': 'SortOrder',
    },
    total=True
)

_Product_RelevanceInner = TypedDict(
    '_Product_RelevanceInner',
    {
        'fields': 'List[ProductScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Product_RelevanceOrderByInput = TypedDict(
    '_Product_RelevanceOrderByInput',
    {
        '_relevance': '_Product_RelevanceInner',
    },
    total=True
)

ProductOrderByInput = Union[
    '_Product_id_OrderByInput',
    '_Product_name_OrderByInput',
    '_Product_description_OrderByInput',
    '_Product_price_OrderByInput',
    '_Product_Stock_OrderByInput',
    '_Product_category_id_OrderByInput',
    '_Product_RelevanceOrderByInput',
]



# recursive Product types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProductRelationFilter = TypedDict(
    'ProductRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProductListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProductInclude(TypedDict, total=False):
    """Product relational arguments"""
    category: Union[bool, 'CategoryArgsFromProduct']
    detalles: Union[bool, 'FindManyDetalleArgsFromProduct']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromProduct']
    envio: Union[bool, 'FindManyenvioArgsFromProduct']


    

class UsersIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromProductRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromProductRecursive1']


class UsersIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromProductRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromProductRecursive2']


class UsersIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromProductRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromProductRecursive3']


class UsersIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromProductRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromProductRecursive4']


class UsersIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class UsersArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyUsersArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class ProductIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    category: Union[bool, 'CategoryArgsFromProductRecursive1']
    detalles: Union[bool, 'FindManyDetalleArgsFromProductRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromProductRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromProductRecursive1']


class ProductIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    category: Union[bool, 'CategoryArgsFromProductRecursive2']
    detalles: Union[bool, 'FindManyDetalleArgsFromProductRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromProductRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromProductRecursive2']


class ProductIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    category: Union[bool, 'CategoryArgsFromProductRecursive3']
    detalles: Union[bool, 'FindManyDetalleArgsFromProductRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromProductRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromProductRecursive3']


class ProductIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    category: Union[bool, 'CategoryArgsFromProductRecursive4']
    detalles: Union[bool, 'FindManyDetalleArgsFromProductRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromProductRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromProductRecursive4']


class ProductIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class ProductArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyProductArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class CategoryIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive1']


class CategoryIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive2']


class CategoryIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive3']


class CategoryIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive4']


class CategoryIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class CategoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyCategoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class VentaIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    detalles: Union[bool, 'FindManyDetalleArgsFromProductRecursive1']


class VentaIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    detalles: Union[bool, 'FindManyDetalleArgsFromProductRecursive2']


class VentaIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    detalles: Union[bool, 'FindManyDetalleArgsFromProductRecursive3']


class VentaIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    detalles: Union[bool, 'FindManyDetalleArgsFromProductRecursive4']


class VentaIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class VentaArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'VentaIncludeFromVentaRecursive1'


class VentaArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'VentaIncludeFromVentaRecursive2'


class VentaArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'VentaIncludeFromVentaRecursive3'


class VentaArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'VentaIncludeFromVentaRecursive4'


class VentaArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyVentaArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive1'


class FindManyVentaArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive2'


class FindManyVentaArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive3'


class FindManyVentaArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive4'


class FindManyVentaArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    
    

class DetalleIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive1']
    venta: Union[bool, 'VentaArgsFromProductRecursive1']


class DetalleIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive2']
    venta: Union[bool, 'VentaArgsFromProductRecursive2']


class DetalleIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive3']
    venta: Union[bool, 'VentaArgsFromProductRecursive3']


class DetalleIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive4']
    venta: Union[bool, 'VentaArgsFromProductRecursive4']


class DetalleIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class DetalleArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DetalleIncludeFromDetalleRecursive1'


class DetalleArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DetalleIncludeFromDetalleRecursive2'


class DetalleArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DetalleIncludeFromDetalleRecursive3'


class DetalleArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DetalleIncludeFromDetalleRecursive4'


class DetalleArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyDetalleArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive1'


class FindManyDetalleArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive2'


class FindManyDetalleArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive3'


class FindManyDetalleArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive4'


class FindManyDetalleArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    
    

class envioIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    alamacen: Union[bool, 'AlmacenArgsFromProductRecursive1']
    product: Union[bool, 'ProductArgsFromProductRecursive1']


class envioIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    alamacen: Union[bool, 'AlmacenArgsFromProductRecursive2']
    product: Union[bool, 'ProductArgsFromProductRecursive2']


class envioIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    alamacen: Union[bool, 'AlmacenArgsFromProductRecursive3']
    product: Union[bool, 'ProductArgsFromProductRecursive3']


class envioIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    alamacen: Union[bool, 'AlmacenArgsFromProductRecursive4']
    product: Union[bool, 'ProductArgsFromProductRecursive4']


class envioIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class envioArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'envioIncludeFromenvioRecursive1'


class envioArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'envioIncludeFromenvioRecursive2'


class envioArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'envioIncludeFromenvioRecursive3'


class envioArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'envioIncludeFromenvioRecursive4'


class envioArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyenvioArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive1'


class FindManyenvioArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive2'


class FindManyenvioArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive3'


class FindManyenvioArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive4'


class FindManyenvioArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    
    

class Pedidos_FabricanteIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive1']
    user: Union[bool, 'UsersArgsFromProductRecursive1']


class Pedidos_FabricanteIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive2']
    user: Union[bool, 'UsersArgsFromProductRecursive2']


class Pedidos_FabricanteIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive3']
    user: Union[bool, 'UsersArgsFromProductRecursive3']


class Pedidos_FabricanteIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive4']
    user: Union[bool, 'UsersArgsFromProductRecursive4']


class Pedidos_FabricanteIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class Pedidos_FabricanteArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class Pedidos_FabricanteArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class Pedidos_FabricanteArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class Pedidos_FabricanteArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class Pedidos_FabricanteArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyPedidos_FabricanteArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class FindManyPedidos_FabricanteArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class FindManyPedidos_FabricanteArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class FindManyPedidos_FabricanteArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class FindManyPedidos_FabricanteArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    
    

class AlmacenIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    user: Union[bool, 'UsersArgsFromProductRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromProductRecursive1']


class AlmacenIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    user: Union[bool, 'UsersArgsFromProductRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromProductRecursive2']


class AlmacenIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    user: Union[bool, 'UsersArgsFromProductRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromProductRecursive3']


class AlmacenIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    user: Union[bool, 'UsersArgsFromProductRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromProductRecursive4']


class AlmacenIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class AlmacenArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class AlmacenArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class AlmacenArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class AlmacenArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class AlmacenArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyAlmacenArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class FindManyAlmacenArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class FindManyAlmacenArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class FindManyAlmacenArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class FindManyAlmacenArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    


FindManyProductArgs = FindManyProductArgsFromProduct
FindFirstProductArgs = FindManyProductArgsFromProduct


    

class ProductWhereInput(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    Stock: Union[_int, 'types.IntFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'
    Pedidos_Fabricante: 'Pedidos_FabricanteListRelationFilter'
    envio: 'envioListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive1', List['ProductWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive1']
    OR: List['ProductWhereInputRecursive1']
    NOT: List['ProductWhereInputRecursive1']


class ProductWhereInputRecursive1(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    Stock: Union[_int, 'types.IntFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'
    Pedidos_Fabricante: 'Pedidos_FabricanteListRelationFilter'
    envio: 'envioListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive2', List['ProductWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive2']
    OR: List['ProductWhereInputRecursive2']
    NOT: List['ProductWhereInputRecursive2']


class ProductWhereInputRecursive2(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    Stock: Union[_int, 'types.IntFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'
    Pedidos_Fabricante: 'Pedidos_FabricanteListRelationFilter'
    envio: 'envioListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive3', List['ProductWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive3']
    OR: List['ProductWhereInputRecursive3']
    NOT: List['ProductWhereInputRecursive3']


class ProductWhereInputRecursive3(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    Stock: Union[_int, 'types.IntFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'
    Pedidos_Fabricante: 'Pedidos_FabricanteListRelationFilter'
    envio: 'envioListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive4', List['ProductWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive4']
    OR: List['ProductWhereInputRecursive4']
    NOT: List['ProductWhereInputRecursive4']


class ProductWhereInputRecursive4(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    Stock: Union[_int, 'types.IntFilter']
    category: 'CategoryRelationFilter'
    category_id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'
    Pedidos_Fabricante: 'Pedidos_FabricanteListRelationFilter'
    envio: 'envioListRelationFilter'



# aggregate Product types


    

class ProductScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    Stock: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive1']


class ProductScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    Stock: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive2']


class ProductScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    Stock: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive3']


class ProductScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    Stock: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive4']


class ProductScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    Stock: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']



class ProductGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    description: _str
    price: _int
    Stock: _int
    category_id: _int
    _sum: 'ProductSumAggregateOutput'
    _avg: 'ProductAvgAggregateOutput'
    _min: 'ProductMinAggregateOutput'
    _max: 'ProductMaxAggregateOutput'
    _count: 'ProductCountAggregateOutput'


class ProductAvgAggregateOutput(TypedDict, total=False):
    """Product output for aggregating averages"""
    id: float
    price: float
    Stock: float
    category_id: float


class ProductSumAggregateOutput(TypedDict, total=False):
    """Product output for aggregating sums"""
    id: _int
    price: _int
    Stock: _int
    category_id: _int


class ProductScalarAggregateOutput(TypedDict, total=False):
    """Product output including scalar fields"""
    id: _int
    name: _str
    description: _str
    price: _int
    Stock: _int
    category_id: _int


ProductMinAggregateOutput = ProductScalarAggregateOutput
ProductMaxAggregateOutput = ProductScalarAggregateOutput


class ProductMaxAggregateInput(TypedDict, total=False):
    """Product input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    price: bool
    Stock: bool
    category_id: bool


class ProductMinAggregateInput(TypedDict, total=False):
    """Product input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    price: bool
    Stock: bool
    category_id: bool


class ProductNumberAggregateInput(TypedDict, total=False):
    """Product input for aggregating numbers"""
    id: bool
    price: bool
    Stock: bool
    category_id: bool


ProductAvgAggregateInput = ProductNumberAggregateInput
ProductSumAggregateInput = ProductNumberAggregateInput


ProductCountAggregateInput = TypedDict(
    'ProductCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'price': bool,
        'Stock': bool,
        'category_id': bool,
        '_all': bool,
    },
    total=False,
)

ProductCountAggregateOutput = TypedDict(
    'ProductCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'price': int,
        'Stock': int,
        'category_id': int,
        '_all': int,
    },
    total=False,
)


ProductKeys = Literal[
    'id',
    'name',
    'description',
    'price',
    'Stock',
    'category',
    'category_id',
    'detalles',
    'Pedidos_Fabricante',
    'envio',
]
ProductScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'price',
    'Stock',
    'category_id',
]
ProductScalarFieldKeysT = TypeVar('ProductScalarFieldKeysT', bound=ProductScalarFieldKeys)

ProductRelationalFieldKeys = Literal[
        'category',
        'detalles',
        'Pedidos_Fabricante',
        'envio',
    ]

# Category types

class CategoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Category create method"""
    id: _int
    products: 'ProductCreateManyNestedWithoutRelationsInput'


class CategoryCreateInput(CategoryOptionalCreateInput):
    """Required arguments to the Category create method"""
    name: _str
    description: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CategoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Category create method, without relations"""
    id: _int


class CategoryCreateWithoutRelationsInput(CategoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the Category create method, without relations"""
    name: _str
    description: _str

class CategoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CategoryCreateWithoutRelationsInput'
    where: 'CategoryWhereUniqueInput'

class CategoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'
    connect_or_create: 'CategoryConnectOrCreateWithoutRelationsInput'


class CategoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CategoryCreateWithoutRelationsInput', List['CategoryCreateWithoutRelationsInput']]
    connect: Union['CategoryWhereUniqueInput', List['CategoryWhereUniqueInput']]
    connect_or_create: Union['CategoryConnectOrCreateWithoutRelationsInput', List['CategoryConnectOrCreateWithoutRelationsInput']]

_CategoryWhereUnique_id_Input = TypedDict(
    '_CategoryWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

CategoryWhereUniqueInput = _CategoryWhereUnique_id_Input


class CategoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: _str
    products: 'ProductUpdateManyWithoutRelationsInput'


class CategoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: _str


class CategoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CategoryCreateWithoutRelationsInput']
    connect: List['CategoryWhereUniqueInput']
    connect_or_create: List['CategoryConnectOrCreateWithoutRelationsInput']
    set: List['CategoryWhereUniqueInput']
    disconnect: List['CategoryWhereUniqueInput']
    delete: List['CategoryWhereUniqueInput']

    # TODO
    # update: List['CategoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CategoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CategoryScalarWhereInput']
    # upsert: List['CategoryUpserteWithWhereUniqueWithoutRelationsInput']


class CategoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'
    connect_or_create: 'CategoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CategoryUpdateInput'
    # upsert: 'CategoryUpsertWithoutRelationsInput'


class CategoryUpsertInput(TypedDict):
    create: 'CategoryCreateInput'
    update: 'CategoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Category_id_OrderByInput = TypedDict(
    '_Category_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Category_name_OrderByInput = TypedDict(
    '_Category_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Category_description_OrderByInput = TypedDict(
    '_Category_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Category_RelevanceInner = TypedDict(
    '_Category_RelevanceInner',
    {
        'fields': 'List[CategoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Category_RelevanceOrderByInput = TypedDict(
    '_Category_RelevanceOrderByInput',
    {
        '_relevance': '_Category_RelevanceInner',
    },
    total=True
)

CategoryOrderByInput = Union[
    '_Category_id_OrderByInput',
    '_Category_name_OrderByInput',
    '_Category_description_OrderByInput',
    '_Category_RelevanceOrderByInput',
]



# recursive Category types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CategoryRelationFilter = TypedDict(
    'CategoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CategoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CategoryInclude(TypedDict, total=False):
    """Category relational arguments"""
    products: Union[bool, 'FindManyProductArgsFromCategory']


    

class UsersIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromCategoryRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromCategoryRecursive1']


class UsersIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromCategoryRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromCategoryRecursive2']


class UsersIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromCategoryRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromCategoryRecursive3']


class UsersIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromCategoryRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromCategoryRecursive4']


class UsersIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class UsersArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyUsersArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class ProductIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    category: Union[bool, 'CategoryArgsFromCategoryRecursive1']
    detalles: Union[bool, 'FindManyDetalleArgsFromCategoryRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromCategoryRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromCategoryRecursive1']


class ProductIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    category: Union[bool, 'CategoryArgsFromCategoryRecursive2']
    detalles: Union[bool, 'FindManyDetalleArgsFromCategoryRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromCategoryRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromCategoryRecursive2']


class ProductIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    category: Union[bool, 'CategoryArgsFromCategoryRecursive3']
    detalles: Union[bool, 'FindManyDetalleArgsFromCategoryRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromCategoryRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromCategoryRecursive3']


class ProductIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    category: Union[bool, 'CategoryArgsFromCategoryRecursive4']
    detalles: Union[bool, 'FindManyDetalleArgsFromCategoryRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromCategoryRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromCategoryRecursive4']


class ProductIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class ProductArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyProductArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class CategoryIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive1']


class CategoryIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive2']


class CategoryIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive3']


class CategoryIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive4']


class CategoryIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class CategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyCategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class VentaIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    detalles: Union[bool, 'FindManyDetalleArgsFromCategoryRecursive1']


class VentaIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    detalles: Union[bool, 'FindManyDetalleArgsFromCategoryRecursive2']


class VentaIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    detalles: Union[bool, 'FindManyDetalleArgsFromCategoryRecursive3']


class VentaIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    detalles: Union[bool, 'FindManyDetalleArgsFromCategoryRecursive4']


class VentaIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class VentaArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'VentaIncludeFromVentaRecursive1'


class VentaArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'VentaIncludeFromVentaRecursive2'


class VentaArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'VentaIncludeFromVentaRecursive3'


class VentaArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'VentaIncludeFromVentaRecursive4'


class VentaArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyVentaArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive1'


class FindManyVentaArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive2'


class FindManyVentaArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive3'


class FindManyVentaArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive4'


class FindManyVentaArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    
    

class DetalleIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    product: Union[bool, 'ProductArgsFromCategoryRecursive1']
    venta: Union[bool, 'VentaArgsFromCategoryRecursive1']


class DetalleIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    product: Union[bool, 'ProductArgsFromCategoryRecursive2']
    venta: Union[bool, 'VentaArgsFromCategoryRecursive2']


class DetalleIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    product: Union[bool, 'ProductArgsFromCategoryRecursive3']
    venta: Union[bool, 'VentaArgsFromCategoryRecursive3']


class DetalleIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    product: Union[bool, 'ProductArgsFromCategoryRecursive4']
    venta: Union[bool, 'VentaArgsFromCategoryRecursive4']


class DetalleIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class DetalleArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'DetalleIncludeFromDetalleRecursive1'


class DetalleArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'DetalleIncludeFromDetalleRecursive2'


class DetalleArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'DetalleIncludeFromDetalleRecursive3'


class DetalleArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'DetalleIncludeFromDetalleRecursive4'


class DetalleArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyDetalleArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive1'


class FindManyDetalleArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive2'


class FindManyDetalleArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive3'


class FindManyDetalleArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive4'


class FindManyDetalleArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    
    

class envioIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    alamacen: Union[bool, 'AlmacenArgsFromCategoryRecursive1']
    product: Union[bool, 'ProductArgsFromCategoryRecursive1']


class envioIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    alamacen: Union[bool, 'AlmacenArgsFromCategoryRecursive2']
    product: Union[bool, 'ProductArgsFromCategoryRecursive2']


class envioIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    alamacen: Union[bool, 'AlmacenArgsFromCategoryRecursive3']
    product: Union[bool, 'ProductArgsFromCategoryRecursive3']


class envioIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    alamacen: Union[bool, 'AlmacenArgsFromCategoryRecursive4']
    product: Union[bool, 'ProductArgsFromCategoryRecursive4']


class envioIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class envioArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'envioIncludeFromenvioRecursive1'


class envioArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'envioIncludeFromenvioRecursive2'


class envioArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'envioIncludeFromenvioRecursive3'


class envioArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'envioIncludeFromenvioRecursive4'


class envioArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyenvioArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive1'


class FindManyenvioArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive2'


class FindManyenvioArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive3'


class FindManyenvioArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive4'


class FindManyenvioArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    
    

class Pedidos_FabricanteIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    product: Union[bool, 'ProductArgsFromCategoryRecursive1']
    user: Union[bool, 'UsersArgsFromCategoryRecursive1']


class Pedidos_FabricanteIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    product: Union[bool, 'ProductArgsFromCategoryRecursive2']
    user: Union[bool, 'UsersArgsFromCategoryRecursive2']


class Pedidos_FabricanteIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    product: Union[bool, 'ProductArgsFromCategoryRecursive3']
    user: Union[bool, 'UsersArgsFromCategoryRecursive3']


class Pedidos_FabricanteIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    product: Union[bool, 'ProductArgsFromCategoryRecursive4']
    user: Union[bool, 'UsersArgsFromCategoryRecursive4']


class Pedidos_FabricanteIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class Pedidos_FabricanteArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class Pedidos_FabricanteArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class Pedidos_FabricanteArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class Pedidos_FabricanteArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class Pedidos_FabricanteArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyPedidos_FabricanteArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class FindManyPedidos_FabricanteArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class FindManyPedidos_FabricanteArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class FindManyPedidos_FabricanteArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class FindManyPedidos_FabricanteArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    
    

class AlmacenIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UsersArgsFromCategoryRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromCategoryRecursive1']


class AlmacenIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UsersArgsFromCategoryRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromCategoryRecursive2']


class AlmacenIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UsersArgsFromCategoryRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromCategoryRecursive3']


class AlmacenIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UsersArgsFromCategoryRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromCategoryRecursive4']


class AlmacenIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class AlmacenArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class AlmacenArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class AlmacenArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class AlmacenArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class AlmacenArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyAlmacenArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class FindManyAlmacenArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class FindManyAlmacenArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class FindManyAlmacenArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class FindManyAlmacenArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    


FindManyCategoryArgs = FindManyCategoryArgsFromCategory
FindFirstCategoryArgs = FindManyCategoryArgsFromCategory


    

class CategoryWhereInput(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive1', List['CategoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive1']
    OR: List['CategoryWhereInputRecursive1']
    NOT: List['CategoryWhereInputRecursive1']


class CategoryWhereInputRecursive1(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive2', List['CategoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive2']
    OR: List['CategoryWhereInputRecursive2']
    NOT: List['CategoryWhereInputRecursive2']


class CategoryWhereInputRecursive2(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive3', List['CategoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive3']
    OR: List['CategoryWhereInputRecursive3']
    NOT: List['CategoryWhereInputRecursive3']


class CategoryWhereInputRecursive3(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive4', List['CategoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive4']
    OR: List['CategoryWhereInputRecursive4']
    NOT: List['CategoryWhereInputRecursive4']


class CategoryWhereInputRecursive4(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'



# aggregate Category types


    

class CategoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive1']


class CategoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive2']


class CategoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive3']


class CategoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive4']


class CategoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']



class CategoryGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    description: _str
    _sum: 'CategorySumAggregateOutput'
    _avg: 'CategoryAvgAggregateOutput'
    _min: 'CategoryMinAggregateOutput'
    _max: 'CategoryMaxAggregateOutput'
    _count: 'CategoryCountAggregateOutput'


class CategoryAvgAggregateOutput(TypedDict, total=False):
    """Category output for aggregating averages"""
    id: float


class CategorySumAggregateOutput(TypedDict, total=False):
    """Category output for aggregating sums"""
    id: _int


class CategoryScalarAggregateOutput(TypedDict, total=False):
    """Category output including scalar fields"""
    id: _int
    name: _str
    description: _str


CategoryMinAggregateOutput = CategoryScalarAggregateOutput
CategoryMaxAggregateOutput = CategoryScalarAggregateOutput


class CategoryMaxAggregateInput(TypedDict, total=False):
    """Category input for aggregating by max"""
    id: bool
    name: bool
    description: bool


class CategoryMinAggregateInput(TypedDict, total=False):
    """Category input for aggregating by min"""
    id: bool
    name: bool
    description: bool


class CategoryNumberAggregateInput(TypedDict, total=False):
    """Category input for aggregating numbers"""
    id: bool


CategoryAvgAggregateInput = CategoryNumberAggregateInput
CategorySumAggregateInput = CategoryNumberAggregateInput


CategoryCountAggregateInput = TypedDict(
    'CategoryCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        '_all': bool,
    },
    total=False,
)

CategoryCountAggregateOutput = TypedDict(
    'CategoryCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        '_all': int,
    },
    total=False,
)


CategoryKeys = Literal[
    'id',
    'name',
    'description',
    'products',
]
CategoryScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
]
CategoryScalarFieldKeysT = TypeVar('CategoryScalarFieldKeysT', bound=CategoryScalarFieldKeys)

CategoryRelationalFieldKeys = Literal[
        'products',
    ]

# Venta types

class VentaOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Venta create method"""
    id: _int
    detalles: 'DetalleCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime


class VentaCreateInput(VentaOptionalCreateInput):
    """Required arguments to the Venta create method"""
    total: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class VentaOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Venta create method, without relations"""
    id: _int
    createdAt: datetime.datetime


class VentaCreateWithoutRelationsInput(VentaOptionalCreateWithoutRelationsInput):
    """Required arguments to the Venta create method, without relations"""
    total: _float

class VentaConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'VentaCreateWithoutRelationsInput'
    where: 'VentaWhereUniqueInput'

class VentaCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'VentaCreateWithoutRelationsInput'
    connect: 'VentaWhereUniqueInput'
    connect_or_create: 'VentaConnectOrCreateWithoutRelationsInput'


class VentaCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['VentaCreateWithoutRelationsInput', List['VentaCreateWithoutRelationsInput']]
    connect: Union['VentaWhereUniqueInput', List['VentaWhereUniqueInput']]
    connect_or_create: Union['VentaConnectOrCreateWithoutRelationsInput', List['VentaConnectOrCreateWithoutRelationsInput']]

_VentaWhereUnique_id_Input = TypedDict(
    '_VentaWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

VentaWhereUniqueInput = _VentaWhereUnique_id_Input


class VentaUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    detalles: 'DetalleUpdateManyWithoutRelationsInput'
    total: Union[AtomicFloatInput, _float]
    createdAt: datetime.datetime


class VentaUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    total: Union[AtomicFloatInput, _float]
    createdAt: datetime.datetime


class VentaUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['VentaCreateWithoutRelationsInput']
    connect: List['VentaWhereUniqueInput']
    connect_or_create: List['VentaConnectOrCreateWithoutRelationsInput']
    set: List['VentaWhereUniqueInput']
    disconnect: List['VentaWhereUniqueInput']
    delete: List['VentaWhereUniqueInput']

    # TODO
    # update: List['VentaUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['VentaUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['VentaScalarWhereInput']
    # upsert: List['VentaUpserteWithWhereUniqueWithoutRelationsInput']


class VentaUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'VentaCreateWithoutRelationsInput'
    connect: 'VentaWhereUniqueInput'
    connect_or_create: 'VentaConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'VentaUpdateInput'
    # upsert: 'VentaUpsertWithoutRelationsInput'


class VentaUpsertInput(TypedDict):
    create: 'VentaCreateInput'
    update: 'VentaUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Venta_id_OrderByInput = TypedDict(
    '_Venta_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Venta_total_OrderByInput = TypedDict(
    '_Venta_total_OrderByInput',
    {
        'total': 'SortOrder',
    },
    total=True
)

_Venta_createdAt_OrderByInput = TypedDict(
    '_Venta_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Venta_RelevanceInner = TypedDict(
    '_Venta_RelevanceInner',
    {
        'fields': 'List[VentaScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Venta_RelevanceOrderByInput = TypedDict(
    '_Venta_RelevanceOrderByInput',
    {
        '_relevance': '_Venta_RelevanceInner',
    },
    total=True
)

VentaOrderByInput = Union[
    '_Venta_id_OrderByInput',
    '_Venta_total_OrderByInput',
    '_Venta_createdAt_OrderByInput',
    '_Venta_RelevanceOrderByInput',
]



# recursive Venta types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

VentaRelationFilter = TypedDict(
    'VentaRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class VentaListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class VentaInclude(TypedDict, total=False):
    """Venta relational arguments"""
    detalles: Union[bool, 'FindManyDetalleArgsFromVenta']


    

class UsersIncludeFromVenta(TypedDict, total=False):
    """Relational arguments for Venta"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromVentaRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromVentaRecursive1']


class UsersIncludeFromVentaRecursive1(TypedDict, total=False):
    """Relational arguments for Venta"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromVentaRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromVentaRecursive2']


class UsersIncludeFromVentaRecursive2(TypedDict, total=False):
    """Relational arguments for Venta"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromVentaRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromVentaRecursive3']


class UsersIncludeFromVentaRecursive3(TypedDict, total=False):
    """Relational arguments for Venta"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromVentaRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromVentaRecursive4']


class UsersIncludeFromVentaRecursive4(TypedDict, total=False):
    """Relational arguments for Venta"""

    

class UsersArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    
    

class FindManyUsersArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class ProductIncludeFromVenta(TypedDict, total=False):
    """Relational arguments for Venta"""
    category: Union[bool, 'CategoryArgsFromVentaRecursive1']
    detalles: Union[bool, 'FindManyDetalleArgsFromVentaRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromVentaRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromVentaRecursive1']


class ProductIncludeFromVentaRecursive1(TypedDict, total=False):
    """Relational arguments for Venta"""
    category: Union[bool, 'CategoryArgsFromVentaRecursive2']
    detalles: Union[bool, 'FindManyDetalleArgsFromVentaRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromVentaRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromVentaRecursive2']


class ProductIncludeFromVentaRecursive2(TypedDict, total=False):
    """Relational arguments for Venta"""
    category: Union[bool, 'CategoryArgsFromVentaRecursive3']
    detalles: Union[bool, 'FindManyDetalleArgsFromVentaRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromVentaRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromVentaRecursive3']


class ProductIncludeFromVentaRecursive3(TypedDict, total=False):
    """Relational arguments for Venta"""
    category: Union[bool, 'CategoryArgsFromVentaRecursive4']
    detalles: Union[bool, 'FindManyDetalleArgsFromVentaRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromVentaRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromVentaRecursive4']


class ProductIncludeFromVentaRecursive4(TypedDict, total=False):
    """Relational arguments for Venta"""

    

class ProductArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    
    

class FindManyProductArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class CategoryIncludeFromVenta(TypedDict, total=False):
    """Relational arguments for Venta"""
    products: Union[bool, 'FindManyProductArgsFromVentaRecursive1']


class CategoryIncludeFromVentaRecursive1(TypedDict, total=False):
    """Relational arguments for Venta"""
    products: Union[bool, 'FindManyProductArgsFromVentaRecursive2']


class CategoryIncludeFromVentaRecursive2(TypedDict, total=False):
    """Relational arguments for Venta"""
    products: Union[bool, 'FindManyProductArgsFromVentaRecursive3']


class CategoryIncludeFromVentaRecursive3(TypedDict, total=False):
    """Relational arguments for Venta"""
    products: Union[bool, 'FindManyProductArgsFromVentaRecursive4']


class CategoryIncludeFromVentaRecursive4(TypedDict, total=False):
    """Relational arguments for Venta"""

    

class CategoryArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    
    

class FindManyCategoryArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class VentaIncludeFromVenta(TypedDict, total=False):
    """Relational arguments for Venta"""
    detalles: Union[bool, 'FindManyDetalleArgsFromVentaRecursive1']


class VentaIncludeFromVentaRecursive1(TypedDict, total=False):
    """Relational arguments for Venta"""
    detalles: Union[bool, 'FindManyDetalleArgsFromVentaRecursive2']


class VentaIncludeFromVentaRecursive2(TypedDict, total=False):
    """Relational arguments for Venta"""
    detalles: Union[bool, 'FindManyDetalleArgsFromVentaRecursive3']


class VentaIncludeFromVentaRecursive3(TypedDict, total=False):
    """Relational arguments for Venta"""
    detalles: Union[bool, 'FindManyDetalleArgsFromVentaRecursive4']


class VentaIncludeFromVentaRecursive4(TypedDict, total=False):
    """Relational arguments for Venta"""

    

class VentaArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'VentaIncludeFromVentaRecursive1'


class VentaArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'VentaIncludeFromVentaRecursive2'


class VentaArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'VentaIncludeFromVentaRecursive3'


class VentaArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'VentaIncludeFromVentaRecursive4'


class VentaArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    
    

class FindManyVentaArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive1'


class FindManyVentaArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive2'


class FindManyVentaArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive3'


class FindManyVentaArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive4'


class FindManyVentaArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    
    

class DetalleIncludeFromVenta(TypedDict, total=False):
    """Relational arguments for Venta"""
    product: Union[bool, 'ProductArgsFromVentaRecursive1']
    venta: Union[bool, 'VentaArgsFromVentaRecursive1']


class DetalleIncludeFromVentaRecursive1(TypedDict, total=False):
    """Relational arguments for Venta"""
    product: Union[bool, 'ProductArgsFromVentaRecursive2']
    venta: Union[bool, 'VentaArgsFromVentaRecursive2']


class DetalleIncludeFromVentaRecursive2(TypedDict, total=False):
    """Relational arguments for Venta"""
    product: Union[bool, 'ProductArgsFromVentaRecursive3']
    venta: Union[bool, 'VentaArgsFromVentaRecursive3']


class DetalleIncludeFromVentaRecursive3(TypedDict, total=False):
    """Relational arguments for Venta"""
    product: Union[bool, 'ProductArgsFromVentaRecursive4']
    venta: Union[bool, 'VentaArgsFromVentaRecursive4']


class DetalleIncludeFromVentaRecursive4(TypedDict, total=False):
    """Relational arguments for Venta"""

    

class DetalleArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'DetalleIncludeFromDetalleRecursive1'


class DetalleArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'DetalleIncludeFromDetalleRecursive2'


class DetalleArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'DetalleIncludeFromDetalleRecursive3'


class DetalleArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'DetalleIncludeFromDetalleRecursive4'


class DetalleArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    
    

class FindManyDetalleArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive1'


class FindManyDetalleArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive2'


class FindManyDetalleArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive3'


class FindManyDetalleArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive4'


class FindManyDetalleArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    
    

class envioIncludeFromVenta(TypedDict, total=False):
    """Relational arguments for Venta"""
    alamacen: Union[bool, 'AlmacenArgsFromVentaRecursive1']
    product: Union[bool, 'ProductArgsFromVentaRecursive1']


class envioIncludeFromVentaRecursive1(TypedDict, total=False):
    """Relational arguments for Venta"""
    alamacen: Union[bool, 'AlmacenArgsFromVentaRecursive2']
    product: Union[bool, 'ProductArgsFromVentaRecursive2']


class envioIncludeFromVentaRecursive2(TypedDict, total=False):
    """Relational arguments for Venta"""
    alamacen: Union[bool, 'AlmacenArgsFromVentaRecursive3']
    product: Union[bool, 'ProductArgsFromVentaRecursive3']


class envioIncludeFromVentaRecursive3(TypedDict, total=False):
    """Relational arguments for Venta"""
    alamacen: Union[bool, 'AlmacenArgsFromVentaRecursive4']
    product: Union[bool, 'ProductArgsFromVentaRecursive4']


class envioIncludeFromVentaRecursive4(TypedDict, total=False):
    """Relational arguments for Venta"""

    

class envioArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'envioIncludeFromenvioRecursive1'


class envioArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'envioIncludeFromenvioRecursive2'


class envioArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'envioIncludeFromenvioRecursive3'


class envioArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'envioIncludeFromenvioRecursive4'


class envioArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    
    

class FindManyenvioArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive1'


class FindManyenvioArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive2'


class FindManyenvioArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive3'


class FindManyenvioArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive4'


class FindManyenvioArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    
    

class Pedidos_FabricanteIncludeFromVenta(TypedDict, total=False):
    """Relational arguments for Venta"""
    product: Union[bool, 'ProductArgsFromVentaRecursive1']
    user: Union[bool, 'UsersArgsFromVentaRecursive1']


class Pedidos_FabricanteIncludeFromVentaRecursive1(TypedDict, total=False):
    """Relational arguments for Venta"""
    product: Union[bool, 'ProductArgsFromVentaRecursive2']
    user: Union[bool, 'UsersArgsFromVentaRecursive2']


class Pedidos_FabricanteIncludeFromVentaRecursive2(TypedDict, total=False):
    """Relational arguments for Venta"""
    product: Union[bool, 'ProductArgsFromVentaRecursive3']
    user: Union[bool, 'UsersArgsFromVentaRecursive3']


class Pedidos_FabricanteIncludeFromVentaRecursive3(TypedDict, total=False):
    """Relational arguments for Venta"""
    product: Union[bool, 'ProductArgsFromVentaRecursive4']
    user: Union[bool, 'UsersArgsFromVentaRecursive4']


class Pedidos_FabricanteIncludeFromVentaRecursive4(TypedDict, total=False):
    """Relational arguments for Venta"""

    

class Pedidos_FabricanteArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class Pedidos_FabricanteArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class Pedidos_FabricanteArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class Pedidos_FabricanteArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class Pedidos_FabricanteArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    
    

class FindManyPedidos_FabricanteArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class FindManyPedidos_FabricanteArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class FindManyPedidos_FabricanteArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class FindManyPedidos_FabricanteArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class FindManyPedidos_FabricanteArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    
    

class AlmacenIncludeFromVenta(TypedDict, total=False):
    """Relational arguments for Venta"""
    user: Union[bool, 'UsersArgsFromVentaRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromVentaRecursive1']


class AlmacenIncludeFromVentaRecursive1(TypedDict, total=False):
    """Relational arguments for Venta"""
    user: Union[bool, 'UsersArgsFromVentaRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromVentaRecursive2']


class AlmacenIncludeFromVentaRecursive2(TypedDict, total=False):
    """Relational arguments for Venta"""
    user: Union[bool, 'UsersArgsFromVentaRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromVentaRecursive3']


class AlmacenIncludeFromVentaRecursive3(TypedDict, total=False):
    """Relational arguments for Venta"""
    user: Union[bool, 'UsersArgsFromVentaRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromVentaRecursive4']


class AlmacenIncludeFromVentaRecursive4(TypedDict, total=False):
    """Relational arguments for Venta"""

    

class AlmacenArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class AlmacenArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class AlmacenArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class AlmacenArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class AlmacenArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    
    

class FindManyAlmacenArgsFromVenta(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class FindManyAlmacenArgsFromVentaRecursive1(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class FindManyAlmacenArgsFromVentaRecursive2(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class FindManyAlmacenArgsFromVentaRecursive3(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class FindManyAlmacenArgsFromVentaRecursive4(TypedDict, total=False):
    """Arguments for Venta"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    


FindManyVentaArgs = FindManyVentaArgsFromVenta
FindFirstVentaArgs = FindManyVentaArgsFromVenta


    

class VentaWhereInput(TypedDict, total=False):
    """Venta arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'
    total: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VentaWhereInputRecursive1', List['VentaWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['VentaWhereInputRecursive1']
    OR: List['VentaWhereInputRecursive1']
    NOT: List['VentaWhereInputRecursive1']


class VentaWhereInputRecursive1(TypedDict, total=False):
    """Venta arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'
    total: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VentaWhereInputRecursive2', List['VentaWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['VentaWhereInputRecursive2']
    OR: List['VentaWhereInputRecursive2']
    NOT: List['VentaWhereInputRecursive2']


class VentaWhereInputRecursive2(TypedDict, total=False):
    """Venta arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'
    total: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VentaWhereInputRecursive3', List['VentaWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['VentaWhereInputRecursive3']
    OR: List['VentaWhereInputRecursive3']
    NOT: List['VentaWhereInputRecursive3']


class VentaWhereInputRecursive3(TypedDict, total=False):
    """Venta arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'
    total: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VentaWhereInputRecursive4', List['VentaWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['VentaWhereInputRecursive4']
    OR: List['VentaWhereInputRecursive4']
    NOT: List['VentaWhereInputRecursive4']


class VentaWhereInputRecursive4(TypedDict, total=False):
    """Venta arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    detalles: 'DetalleListRelationFilter'
    total: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Venta types


    

class VentaScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Venta arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VentaScalarWhereWithAggregatesInputRecursive1']
    OR: List['VentaScalarWhereWithAggregatesInputRecursive1']
    NOT: List['VentaScalarWhereWithAggregatesInputRecursive1']


class VentaScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Venta arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VentaScalarWhereWithAggregatesInputRecursive2']
    OR: List['VentaScalarWhereWithAggregatesInputRecursive2']
    NOT: List['VentaScalarWhereWithAggregatesInputRecursive2']


class VentaScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Venta arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VentaScalarWhereWithAggregatesInputRecursive3']
    OR: List['VentaScalarWhereWithAggregatesInputRecursive3']
    NOT: List['VentaScalarWhereWithAggregatesInputRecursive3']


class VentaScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Venta arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VentaScalarWhereWithAggregatesInputRecursive4']
    OR: List['VentaScalarWhereWithAggregatesInputRecursive4']
    NOT: List['VentaScalarWhereWithAggregatesInputRecursive4']


class VentaScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Venta arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class VentaGroupByOutput(TypedDict, total=False):
    id: _int
    total: _float
    createdAt: datetime.datetime
    _sum: 'VentaSumAggregateOutput'
    _avg: 'VentaAvgAggregateOutput'
    _min: 'VentaMinAggregateOutput'
    _max: 'VentaMaxAggregateOutput'
    _count: 'VentaCountAggregateOutput'


class VentaAvgAggregateOutput(TypedDict, total=False):
    """Venta output for aggregating averages"""
    id: float
    total: float


class VentaSumAggregateOutput(TypedDict, total=False):
    """Venta output for aggregating sums"""
    id: _int
    total: _float


class VentaScalarAggregateOutput(TypedDict, total=False):
    """Venta output including scalar fields"""
    id: _int
    total: _float
    createdAt: datetime.datetime


VentaMinAggregateOutput = VentaScalarAggregateOutput
VentaMaxAggregateOutput = VentaScalarAggregateOutput


class VentaMaxAggregateInput(TypedDict, total=False):
    """Venta input for aggregating by max"""
    id: bool
    total: bool
    createdAt: bool


class VentaMinAggregateInput(TypedDict, total=False):
    """Venta input for aggregating by min"""
    id: bool
    total: bool
    createdAt: bool


class VentaNumberAggregateInput(TypedDict, total=False):
    """Venta input for aggregating numbers"""
    id: bool
    total: bool


VentaAvgAggregateInput = VentaNumberAggregateInput
VentaSumAggregateInput = VentaNumberAggregateInput


VentaCountAggregateInput = TypedDict(
    'VentaCountAggregateInput',
    {
        'id': bool,
        'total': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

VentaCountAggregateOutput = TypedDict(
    'VentaCountAggregateOutput',
    {
        'id': int,
        'total': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


VentaKeys = Literal[
    'id',
    'detalles',
    'total',
    'createdAt',
]
VentaScalarFieldKeys = Literal[
    'id',
    'total',
    'createdAt',
]
VentaScalarFieldKeysT = TypeVar('VentaScalarFieldKeysT', bound=VentaScalarFieldKeys)

VentaRelationalFieldKeys = Literal[
        'detalles',
    ]

# Detalle types

class DetalleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Detalle create method"""
    id: _int
    product: 'ProductCreateNestedWithoutRelationsInput'
    product_id: _int
    ventaId: _int
    venta: 'VentaCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime


class DetalleCreateInput(DetalleOptionalCreateInput):
    """Required arguments to the Detalle create method"""
    cantidad: _float
    Subtotal: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DetalleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Detalle create method, without relations"""
    id: _int
    product_id: _int
    ventaId: _int
    createdAt: datetime.datetime


class DetalleCreateWithoutRelationsInput(DetalleOptionalCreateWithoutRelationsInput):
    """Required arguments to the Detalle create method, without relations"""
    cantidad: _float
    Subtotal: _float

class DetalleConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'DetalleCreateWithoutRelationsInput'
    where: 'DetalleWhereUniqueInput'

class DetalleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DetalleCreateWithoutRelationsInput'
    connect: 'DetalleWhereUniqueInput'
    connect_or_create: 'DetalleConnectOrCreateWithoutRelationsInput'


class DetalleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DetalleCreateWithoutRelationsInput', List['DetalleCreateWithoutRelationsInput']]
    connect: Union['DetalleWhereUniqueInput', List['DetalleWhereUniqueInput']]
    connect_or_create: Union['DetalleConnectOrCreateWithoutRelationsInput', List['DetalleConnectOrCreateWithoutRelationsInput']]

_DetalleWhereUnique_id_Input = TypedDict(
    '_DetalleWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

DetalleWhereUniqueInput = _DetalleWhereUnique_id_Input


class DetalleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    cantidad: Union[AtomicFloatInput, _float]
    Subtotal: Union[AtomicFloatInput, _float]
    product: 'ProductUpdateOneWithoutRelationsInput'
    venta: 'VentaUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime


class DetalleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    cantidad: Union[AtomicFloatInput, _float]
    Subtotal: Union[AtomicFloatInput, _float]
    createdAt: datetime.datetime


class DetalleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DetalleCreateWithoutRelationsInput']
    connect: List['DetalleWhereUniqueInput']
    connect_or_create: List['DetalleConnectOrCreateWithoutRelationsInput']
    set: List['DetalleWhereUniqueInput']
    disconnect: List['DetalleWhereUniqueInput']
    delete: List['DetalleWhereUniqueInput']

    # TODO
    # update: List['DetalleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DetalleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DetalleScalarWhereInput']
    # upsert: List['DetalleUpserteWithWhereUniqueWithoutRelationsInput']


class DetalleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DetalleCreateWithoutRelationsInput'
    connect: 'DetalleWhereUniqueInput'
    connect_or_create: 'DetalleConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DetalleUpdateInput'
    # upsert: 'DetalleUpsertWithoutRelationsInput'


class DetalleUpsertInput(TypedDict):
    create: 'DetalleCreateInput'
    update: 'DetalleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Detalle_id_OrderByInput = TypedDict(
    '_Detalle_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Detalle_cantidad_OrderByInput = TypedDict(
    '_Detalle_cantidad_OrderByInput',
    {
        'cantidad': 'SortOrder',
    },
    total=True
)

_Detalle_Subtotal_OrderByInput = TypedDict(
    '_Detalle_Subtotal_OrderByInput',
    {
        'Subtotal': 'SortOrder',
    },
    total=True
)

_Detalle_product_id_OrderByInput = TypedDict(
    '_Detalle_product_id_OrderByInput',
    {
        'product_id': 'SortOrder',
    },
    total=True
)

_Detalle_ventaId_OrderByInput = TypedDict(
    '_Detalle_ventaId_OrderByInput',
    {
        'ventaId': 'SortOrder',
    },
    total=True
)

_Detalle_createdAt_OrderByInput = TypedDict(
    '_Detalle_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Detalle_RelevanceInner = TypedDict(
    '_Detalle_RelevanceInner',
    {
        'fields': 'List[DetalleScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Detalle_RelevanceOrderByInput = TypedDict(
    '_Detalle_RelevanceOrderByInput',
    {
        '_relevance': '_Detalle_RelevanceInner',
    },
    total=True
)

DetalleOrderByInput = Union[
    '_Detalle_id_OrderByInput',
    '_Detalle_cantidad_OrderByInput',
    '_Detalle_Subtotal_OrderByInput',
    '_Detalle_product_id_OrderByInput',
    '_Detalle_ventaId_OrderByInput',
    '_Detalle_createdAt_OrderByInput',
    '_Detalle_RelevanceOrderByInput',
]



# recursive Detalle types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

DetalleRelationFilter = TypedDict(
    'DetalleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class DetalleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class DetalleInclude(TypedDict, total=False):
    """Detalle relational arguments"""
    product: Union[bool, 'ProductArgsFromDetalle']
    venta: Union[bool, 'VentaArgsFromDetalle']


    

class UsersIncludeFromDetalle(TypedDict, total=False):
    """Relational arguments for Detalle"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromDetalleRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromDetalleRecursive1']


class UsersIncludeFromDetalleRecursive1(TypedDict, total=False):
    """Relational arguments for Detalle"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromDetalleRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromDetalleRecursive2']


class UsersIncludeFromDetalleRecursive2(TypedDict, total=False):
    """Relational arguments for Detalle"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromDetalleRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromDetalleRecursive3']


class UsersIncludeFromDetalleRecursive3(TypedDict, total=False):
    """Relational arguments for Detalle"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromDetalleRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromDetalleRecursive4']


class UsersIncludeFromDetalleRecursive4(TypedDict, total=False):
    """Relational arguments for Detalle"""

    

class UsersArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    
    

class FindManyUsersArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class ProductIncludeFromDetalle(TypedDict, total=False):
    """Relational arguments for Detalle"""
    category: Union[bool, 'CategoryArgsFromDetalleRecursive1']
    detalles: Union[bool, 'FindManyDetalleArgsFromDetalleRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromDetalleRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromDetalleRecursive1']


class ProductIncludeFromDetalleRecursive1(TypedDict, total=False):
    """Relational arguments for Detalle"""
    category: Union[bool, 'CategoryArgsFromDetalleRecursive2']
    detalles: Union[bool, 'FindManyDetalleArgsFromDetalleRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromDetalleRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromDetalleRecursive2']


class ProductIncludeFromDetalleRecursive2(TypedDict, total=False):
    """Relational arguments for Detalle"""
    category: Union[bool, 'CategoryArgsFromDetalleRecursive3']
    detalles: Union[bool, 'FindManyDetalleArgsFromDetalleRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromDetalleRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromDetalleRecursive3']


class ProductIncludeFromDetalleRecursive3(TypedDict, total=False):
    """Relational arguments for Detalle"""
    category: Union[bool, 'CategoryArgsFromDetalleRecursive4']
    detalles: Union[bool, 'FindManyDetalleArgsFromDetalleRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromDetalleRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromDetalleRecursive4']


class ProductIncludeFromDetalleRecursive4(TypedDict, total=False):
    """Relational arguments for Detalle"""

    

class ProductArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    
    

class FindManyProductArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class CategoryIncludeFromDetalle(TypedDict, total=False):
    """Relational arguments for Detalle"""
    products: Union[bool, 'FindManyProductArgsFromDetalleRecursive1']


class CategoryIncludeFromDetalleRecursive1(TypedDict, total=False):
    """Relational arguments for Detalle"""
    products: Union[bool, 'FindManyProductArgsFromDetalleRecursive2']


class CategoryIncludeFromDetalleRecursive2(TypedDict, total=False):
    """Relational arguments for Detalle"""
    products: Union[bool, 'FindManyProductArgsFromDetalleRecursive3']


class CategoryIncludeFromDetalleRecursive3(TypedDict, total=False):
    """Relational arguments for Detalle"""
    products: Union[bool, 'FindManyProductArgsFromDetalleRecursive4']


class CategoryIncludeFromDetalleRecursive4(TypedDict, total=False):
    """Relational arguments for Detalle"""

    

class CategoryArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    
    

class FindManyCategoryArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class VentaIncludeFromDetalle(TypedDict, total=False):
    """Relational arguments for Detalle"""
    detalles: Union[bool, 'FindManyDetalleArgsFromDetalleRecursive1']


class VentaIncludeFromDetalleRecursive1(TypedDict, total=False):
    """Relational arguments for Detalle"""
    detalles: Union[bool, 'FindManyDetalleArgsFromDetalleRecursive2']


class VentaIncludeFromDetalleRecursive2(TypedDict, total=False):
    """Relational arguments for Detalle"""
    detalles: Union[bool, 'FindManyDetalleArgsFromDetalleRecursive3']


class VentaIncludeFromDetalleRecursive3(TypedDict, total=False):
    """Relational arguments for Detalle"""
    detalles: Union[bool, 'FindManyDetalleArgsFromDetalleRecursive4']


class VentaIncludeFromDetalleRecursive4(TypedDict, total=False):
    """Relational arguments for Detalle"""

    

class VentaArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'VentaIncludeFromVentaRecursive1'


class VentaArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'VentaIncludeFromVentaRecursive2'


class VentaArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'VentaIncludeFromVentaRecursive3'


class VentaArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'VentaIncludeFromVentaRecursive4'


class VentaArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    
    

class FindManyVentaArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive1'


class FindManyVentaArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive2'


class FindManyVentaArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive3'


class FindManyVentaArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive4'


class FindManyVentaArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    
    

class DetalleIncludeFromDetalle(TypedDict, total=False):
    """Relational arguments for Detalle"""
    product: Union[bool, 'ProductArgsFromDetalleRecursive1']
    venta: Union[bool, 'VentaArgsFromDetalleRecursive1']


class DetalleIncludeFromDetalleRecursive1(TypedDict, total=False):
    """Relational arguments for Detalle"""
    product: Union[bool, 'ProductArgsFromDetalleRecursive2']
    venta: Union[bool, 'VentaArgsFromDetalleRecursive2']


class DetalleIncludeFromDetalleRecursive2(TypedDict, total=False):
    """Relational arguments for Detalle"""
    product: Union[bool, 'ProductArgsFromDetalleRecursive3']
    venta: Union[bool, 'VentaArgsFromDetalleRecursive3']


class DetalleIncludeFromDetalleRecursive3(TypedDict, total=False):
    """Relational arguments for Detalle"""
    product: Union[bool, 'ProductArgsFromDetalleRecursive4']
    venta: Union[bool, 'VentaArgsFromDetalleRecursive4']


class DetalleIncludeFromDetalleRecursive4(TypedDict, total=False):
    """Relational arguments for Detalle"""

    

class DetalleArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'DetalleIncludeFromDetalleRecursive1'


class DetalleArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'DetalleIncludeFromDetalleRecursive2'


class DetalleArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'DetalleIncludeFromDetalleRecursive3'


class DetalleArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'DetalleIncludeFromDetalleRecursive4'


class DetalleArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    
    

class FindManyDetalleArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive1'


class FindManyDetalleArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive2'


class FindManyDetalleArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive3'


class FindManyDetalleArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive4'


class FindManyDetalleArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    
    

class envioIncludeFromDetalle(TypedDict, total=False):
    """Relational arguments for Detalle"""
    alamacen: Union[bool, 'AlmacenArgsFromDetalleRecursive1']
    product: Union[bool, 'ProductArgsFromDetalleRecursive1']


class envioIncludeFromDetalleRecursive1(TypedDict, total=False):
    """Relational arguments for Detalle"""
    alamacen: Union[bool, 'AlmacenArgsFromDetalleRecursive2']
    product: Union[bool, 'ProductArgsFromDetalleRecursive2']


class envioIncludeFromDetalleRecursive2(TypedDict, total=False):
    """Relational arguments for Detalle"""
    alamacen: Union[bool, 'AlmacenArgsFromDetalleRecursive3']
    product: Union[bool, 'ProductArgsFromDetalleRecursive3']


class envioIncludeFromDetalleRecursive3(TypedDict, total=False):
    """Relational arguments for Detalle"""
    alamacen: Union[bool, 'AlmacenArgsFromDetalleRecursive4']
    product: Union[bool, 'ProductArgsFromDetalleRecursive4']


class envioIncludeFromDetalleRecursive4(TypedDict, total=False):
    """Relational arguments for Detalle"""

    

class envioArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'envioIncludeFromenvioRecursive1'


class envioArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'envioIncludeFromenvioRecursive2'


class envioArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'envioIncludeFromenvioRecursive3'


class envioArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'envioIncludeFromenvioRecursive4'


class envioArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    
    

class FindManyenvioArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive1'


class FindManyenvioArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive2'


class FindManyenvioArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive3'


class FindManyenvioArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive4'


class FindManyenvioArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    
    

class Pedidos_FabricanteIncludeFromDetalle(TypedDict, total=False):
    """Relational arguments for Detalle"""
    product: Union[bool, 'ProductArgsFromDetalleRecursive1']
    user: Union[bool, 'UsersArgsFromDetalleRecursive1']


class Pedidos_FabricanteIncludeFromDetalleRecursive1(TypedDict, total=False):
    """Relational arguments for Detalle"""
    product: Union[bool, 'ProductArgsFromDetalleRecursive2']
    user: Union[bool, 'UsersArgsFromDetalleRecursive2']


class Pedidos_FabricanteIncludeFromDetalleRecursive2(TypedDict, total=False):
    """Relational arguments for Detalle"""
    product: Union[bool, 'ProductArgsFromDetalleRecursive3']
    user: Union[bool, 'UsersArgsFromDetalleRecursive3']


class Pedidos_FabricanteIncludeFromDetalleRecursive3(TypedDict, total=False):
    """Relational arguments for Detalle"""
    product: Union[bool, 'ProductArgsFromDetalleRecursive4']
    user: Union[bool, 'UsersArgsFromDetalleRecursive4']


class Pedidos_FabricanteIncludeFromDetalleRecursive4(TypedDict, total=False):
    """Relational arguments for Detalle"""

    

class Pedidos_FabricanteArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class Pedidos_FabricanteArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class Pedidos_FabricanteArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class Pedidos_FabricanteArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class Pedidos_FabricanteArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    
    

class FindManyPedidos_FabricanteArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class FindManyPedidos_FabricanteArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class FindManyPedidos_FabricanteArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class FindManyPedidos_FabricanteArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class FindManyPedidos_FabricanteArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    
    

class AlmacenIncludeFromDetalle(TypedDict, total=False):
    """Relational arguments for Detalle"""
    user: Union[bool, 'UsersArgsFromDetalleRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromDetalleRecursive1']


class AlmacenIncludeFromDetalleRecursive1(TypedDict, total=False):
    """Relational arguments for Detalle"""
    user: Union[bool, 'UsersArgsFromDetalleRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromDetalleRecursive2']


class AlmacenIncludeFromDetalleRecursive2(TypedDict, total=False):
    """Relational arguments for Detalle"""
    user: Union[bool, 'UsersArgsFromDetalleRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromDetalleRecursive3']


class AlmacenIncludeFromDetalleRecursive3(TypedDict, total=False):
    """Relational arguments for Detalle"""
    user: Union[bool, 'UsersArgsFromDetalleRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromDetalleRecursive4']


class AlmacenIncludeFromDetalleRecursive4(TypedDict, total=False):
    """Relational arguments for Detalle"""

    

class AlmacenArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class AlmacenArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class AlmacenArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class AlmacenArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class AlmacenArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    
    

class FindManyAlmacenArgsFromDetalle(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class FindManyAlmacenArgsFromDetalleRecursive1(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class FindManyAlmacenArgsFromDetalleRecursive2(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class FindManyAlmacenArgsFromDetalleRecursive3(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class FindManyAlmacenArgsFromDetalleRecursive4(TypedDict, total=False):
    """Arguments for Detalle"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    


FindManyDetalleArgs = FindManyDetalleArgsFromDetalle
FindFirstDetalleArgs = FindManyDetalleArgsFromDetalle


    

class DetalleWhereInput(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    cantidad: Union[_float, 'types.FloatFilter']
    Subtotal: Union[_float, 'types.FloatFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    ventaId: Union[_int, 'types.IntFilter']
    venta: 'VentaRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['DetalleWhereInputRecursive1', List['DetalleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['DetalleWhereInputRecursive1']
    OR: List['DetalleWhereInputRecursive1']
    NOT: List['DetalleWhereInputRecursive1']


class DetalleWhereInputRecursive1(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    cantidad: Union[_float, 'types.FloatFilter']
    Subtotal: Union[_float, 'types.FloatFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    ventaId: Union[_int, 'types.IntFilter']
    venta: 'VentaRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['DetalleWhereInputRecursive2', List['DetalleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['DetalleWhereInputRecursive2']
    OR: List['DetalleWhereInputRecursive2']
    NOT: List['DetalleWhereInputRecursive2']


class DetalleWhereInputRecursive2(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    cantidad: Union[_float, 'types.FloatFilter']
    Subtotal: Union[_float, 'types.FloatFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    ventaId: Union[_int, 'types.IntFilter']
    venta: 'VentaRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['DetalleWhereInputRecursive3', List['DetalleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['DetalleWhereInputRecursive3']
    OR: List['DetalleWhereInputRecursive3']
    NOT: List['DetalleWhereInputRecursive3']


class DetalleWhereInputRecursive3(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    cantidad: Union[_float, 'types.FloatFilter']
    Subtotal: Union[_float, 'types.FloatFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    ventaId: Union[_int, 'types.IntFilter']
    venta: 'VentaRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['DetalleWhereInputRecursive4', List['DetalleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['DetalleWhereInputRecursive4']
    OR: List['DetalleWhereInputRecursive4']
    NOT: List['DetalleWhereInputRecursive4']


class DetalleWhereInputRecursive4(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    cantidad: Union[_float, 'types.FloatFilter']
    Subtotal: Union[_float, 'types.FloatFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    ventaId: Union[_int, 'types.IntFilter']
    venta: 'VentaRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Detalle types


    

class DetalleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_float, 'types.FloatWithAggregatesFilter']
    Subtotal: Union[_float, 'types.FloatWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    ventaId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DetalleScalarWhereWithAggregatesInputRecursive1']
    OR: List['DetalleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['DetalleScalarWhereWithAggregatesInputRecursive1']


class DetalleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_float, 'types.FloatWithAggregatesFilter']
    Subtotal: Union[_float, 'types.FloatWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    ventaId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DetalleScalarWhereWithAggregatesInputRecursive2']
    OR: List['DetalleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['DetalleScalarWhereWithAggregatesInputRecursive2']


class DetalleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_float, 'types.FloatWithAggregatesFilter']
    Subtotal: Union[_float, 'types.FloatWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    ventaId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DetalleScalarWhereWithAggregatesInputRecursive3']
    OR: List['DetalleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['DetalleScalarWhereWithAggregatesInputRecursive3']


class DetalleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_float, 'types.FloatWithAggregatesFilter']
    Subtotal: Union[_float, 'types.FloatWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    ventaId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DetalleScalarWhereWithAggregatesInputRecursive4']
    OR: List['DetalleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['DetalleScalarWhereWithAggregatesInputRecursive4']


class DetalleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Detalle arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_float, 'types.FloatWithAggregatesFilter']
    Subtotal: Union[_float, 'types.FloatWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    ventaId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class DetalleGroupByOutput(TypedDict, total=False):
    id: _int
    cantidad: _float
    Subtotal: _float
    product_id: _int
    ventaId: _int
    createdAt: datetime.datetime
    _sum: 'DetalleSumAggregateOutput'
    _avg: 'DetalleAvgAggregateOutput'
    _min: 'DetalleMinAggregateOutput'
    _max: 'DetalleMaxAggregateOutput'
    _count: 'DetalleCountAggregateOutput'


class DetalleAvgAggregateOutput(TypedDict, total=False):
    """Detalle output for aggregating averages"""
    id: float
    cantidad: float
    Subtotal: float
    product_id: float
    ventaId: float


class DetalleSumAggregateOutput(TypedDict, total=False):
    """Detalle output for aggregating sums"""
    id: _int
    cantidad: _float
    Subtotal: _float
    product_id: _int
    ventaId: _int


class DetalleScalarAggregateOutput(TypedDict, total=False):
    """Detalle output including scalar fields"""
    id: _int
    cantidad: _float
    Subtotal: _float
    product_id: _int
    ventaId: _int
    createdAt: datetime.datetime


DetalleMinAggregateOutput = DetalleScalarAggregateOutput
DetalleMaxAggregateOutput = DetalleScalarAggregateOutput


class DetalleMaxAggregateInput(TypedDict, total=False):
    """Detalle input for aggregating by max"""
    id: bool
    cantidad: bool
    Subtotal: bool
    product_id: bool
    ventaId: bool
    createdAt: bool


class DetalleMinAggregateInput(TypedDict, total=False):
    """Detalle input for aggregating by min"""
    id: bool
    cantidad: bool
    Subtotal: bool
    product_id: bool
    ventaId: bool
    createdAt: bool


class DetalleNumberAggregateInput(TypedDict, total=False):
    """Detalle input for aggregating numbers"""
    id: bool
    cantidad: bool
    Subtotal: bool
    product_id: bool
    ventaId: bool


DetalleAvgAggregateInput = DetalleNumberAggregateInput
DetalleSumAggregateInput = DetalleNumberAggregateInput


DetalleCountAggregateInput = TypedDict(
    'DetalleCountAggregateInput',
    {
        'id': bool,
        'cantidad': bool,
        'Subtotal': bool,
        'product_id': bool,
        'ventaId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

DetalleCountAggregateOutput = TypedDict(
    'DetalleCountAggregateOutput',
    {
        'id': int,
        'cantidad': int,
        'Subtotal': int,
        'product_id': int,
        'ventaId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


DetalleKeys = Literal[
    'id',
    'cantidad',
    'Subtotal',
    'product',
    'product_id',
    'ventaId',
    'venta',
    'createdAt',
]
DetalleScalarFieldKeys = Literal[
    'id',
    'cantidad',
    'Subtotal',
    'product_id',
    'ventaId',
    'createdAt',
]
DetalleScalarFieldKeysT = TypeVar('DetalleScalarFieldKeysT', bound=DetalleScalarFieldKeys)

DetalleRelationalFieldKeys = Literal[
        'product',
        'venta',
    ]

# envio types

class envioOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the envio create method"""
    id: _int
    alamacen_id: _int
    alamacen: 'AlmacenCreateNestedWithoutRelationsInput'
    product: 'ProductCreateNestedWithoutRelationsInput'
    product_id: _int
    createdAt: datetime.datetime


class envioCreateInput(envioOptionalCreateInput):
    """Required arguments to the envio create method"""
    cantidad: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class envioOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the envio create method, without relations"""
    id: _int
    alamacen_id: _int
    product_id: _int
    createdAt: datetime.datetime


class envioCreateWithoutRelationsInput(envioOptionalCreateWithoutRelationsInput):
    """Required arguments to the envio create method, without relations"""
    cantidad: _str

class envioConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'envioCreateWithoutRelationsInput'
    where: 'envioWhereUniqueInput'

class envioCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'envioCreateWithoutRelationsInput'
    connect: 'envioWhereUniqueInput'
    connect_or_create: 'envioConnectOrCreateWithoutRelationsInput'


class envioCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['envioCreateWithoutRelationsInput', List['envioCreateWithoutRelationsInput']]
    connect: Union['envioWhereUniqueInput', List['envioWhereUniqueInput']]
    connect_or_create: Union['envioConnectOrCreateWithoutRelationsInput', List['envioConnectOrCreateWithoutRelationsInput']]

_envioWhereUnique_id_Input = TypedDict(
    '_envioWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

envioWhereUniqueInput = _envioWhereUnique_id_Input


class envioUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    alamacen: 'AlmacenUpdateOneWithoutRelationsInput'
    product: 'ProductUpdateOneWithoutRelationsInput'
    cantidad: _str
    createdAt: datetime.datetime


class envioUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    cantidad: _str
    createdAt: datetime.datetime


class envioUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['envioCreateWithoutRelationsInput']
    connect: List['envioWhereUniqueInput']
    connect_or_create: List['envioConnectOrCreateWithoutRelationsInput']
    set: List['envioWhereUniqueInput']
    disconnect: List['envioWhereUniqueInput']
    delete: List['envioWhereUniqueInput']

    # TODO
    # update: List['envioUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['envioUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['envioScalarWhereInput']
    # upsert: List['envioUpserteWithWhereUniqueWithoutRelationsInput']


class envioUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'envioCreateWithoutRelationsInput'
    connect: 'envioWhereUniqueInput'
    connect_or_create: 'envioConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'envioUpdateInput'
    # upsert: 'envioUpsertWithoutRelationsInput'


class envioUpsertInput(TypedDict):
    create: 'envioCreateInput'
    update: 'envioUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_envio_id_OrderByInput = TypedDict(
    '_envio_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_envio_alamacen_id_OrderByInput = TypedDict(
    '_envio_alamacen_id_OrderByInput',
    {
        'alamacen_id': 'SortOrder',
    },
    total=True
)

_envio_product_id_OrderByInput = TypedDict(
    '_envio_product_id_OrderByInput',
    {
        'product_id': 'SortOrder',
    },
    total=True
)

_envio_cantidad_OrderByInput = TypedDict(
    '_envio_cantidad_OrderByInput',
    {
        'cantidad': 'SortOrder',
    },
    total=True
)

_envio_createdAt_OrderByInput = TypedDict(
    '_envio_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_envio_RelevanceInner = TypedDict(
    '_envio_RelevanceInner',
    {
        'fields': 'List[envioScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_envio_RelevanceOrderByInput = TypedDict(
    '_envio_RelevanceOrderByInput',
    {
        '_relevance': '_envio_RelevanceInner',
    },
    total=True
)

envioOrderByInput = Union[
    '_envio_id_OrderByInput',
    '_envio_alamacen_id_OrderByInput',
    '_envio_product_id_OrderByInput',
    '_envio_cantidad_OrderByInput',
    '_envio_createdAt_OrderByInput',
    '_envio_RelevanceOrderByInput',
]



# recursive envio types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

envioRelationFilter = TypedDict(
    'envioRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class envioListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class envioInclude(TypedDict, total=False):
    """envio relational arguments"""
    alamacen: Union[bool, 'AlmacenArgsFromenvio']
    product: Union[bool, 'ProductArgsFromenvio']


    

class UsersIncludeFromenvio(TypedDict, total=False):
    """Relational arguments for envio"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromenvioRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromenvioRecursive1']


class UsersIncludeFromenvioRecursive1(TypedDict, total=False):
    """Relational arguments for envio"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromenvioRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromenvioRecursive2']


class UsersIncludeFromenvioRecursive2(TypedDict, total=False):
    """Relational arguments for envio"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromenvioRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromenvioRecursive3']


class UsersIncludeFromenvioRecursive3(TypedDict, total=False):
    """Relational arguments for envio"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromenvioRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromenvioRecursive4']


class UsersIncludeFromenvioRecursive4(TypedDict, total=False):
    """Relational arguments for envio"""

    

class UsersArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    
    

class FindManyUsersArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class ProductIncludeFromenvio(TypedDict, total=False):
    """Relational arguments for envio"""
    category: Union[bool, 'CategoryArgsFromenvioRecursive1']
    detalles: Union[bool, 'FindManyDetalleArgsFromenvioRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromenvioRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromenvioRecursive1']


class ProductIncludeFromenvioRecursive1(TypedDict, total=False):
    """Relational arguments for envio"""
    category: Union[bool, 'CategoryArgsFromenvioRecursive2']
    detalles: Union[bool, 'FindManyDetalleArgsFromenvioRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromenvioRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromenvioRecursive2']


class ProductIncludeFromenvioRecursive2(TypedDict, total=False):
    """Relational arguments for envio"""
    category: Union[bool, 'CategoryArgsFromenvioRecursive3']
    detalles: Union[bool, 'FindManyDetalleArgsFromenvioRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromenvioRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromenvioRecursive3']


class ProductIncludeFromenvioRecursive3(TypedDict, total=False):
    """Relational arguments for envio"""
    category: Union[bool, 'CategoryArgsFromenvioRecursive4']
    detalles: Union[bool, 'FindManyDetalleArgsFromenvioRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromenvioRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromenvioRecursive4']


class ProductIncludeFromenvioRecursive4(TypedDict, total=False):
    """Relational arguments for envio"""

    

class ProductArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    
    

class FindManyProductArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class CategoryIncludeFromenvio(TypedDict, total=False):
    """Relational arguments for envio"""
    products: Union[bool, 'FindManyProductArgsFromenvioRecursive1']


class CategoryIncludeFromenvioRecursive1(TypedDict, total=False):
    """Relational arguments for envio"""
    products: Union[bool, 'FindManyProductArgsFromenvioRecursive2']


class CategoryIncludeFromenvioRecursive2(TypedDict, total=False):
    """Relational arguments for envio"""
    products: Union[bool, 'FindManyProductArgsFromenvioRecursive3']


class CategoryIncludeFromenvioRecursive3(TypedDict, total=False):
    """Relational arguments for envio"""
    products: Union[bool, 'FindManyProductArgsFromenvioRecursive4']


class CategoryIncludeFromenvioRecursive4(TypedDict, total=False):
    """Relational arguments for envio"""

    

class CategoryArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    
    

class FindManyCategoryArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class VentaIncludeFromenvio(TypedDict, total=False):
    """Relational arguments for envio"""
    detalles: Union[bool, 'FindManyDetalleArgsFromenvioRecursive1']


class VentaIncludeFromenvioRecursive1(TypedDict, total=False):
    """Relational arguments for envio"""
    detalles: Union[bool, 'FindManyDetalleArgsFromenvioRecursive2']


class VentaIncludeFromenvioRecursive2(TypedDict, total=False):
    """Relational arguments for envio"""
    detalles: Union[bool, 'FindManyDetalleArgsFromenvioRecursive3']


class VentaIncludeFromenvioRecursive3(TypedDict, total=False):
    """Relational arguments for envio"""
    detalles: Union[bool, 'FindManyDetalleArgsFromenvioRecursive4']


class VentaIncludeFromenvioRecursive4(TypedDict, total=False):
    """Relational arguments for envio"""

    

class VentaArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    include: 'VentaIncludeFromVentaRecursive1'


class VentaArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    include: 'VentaIncludeFromVentaRecursive2'


class VentaArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    include: 'VentaIncludeFromVentaRecursive3'


class VentaArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    include: 'VentaIncludeFromVentaRecursive4'


class VentaArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    
    

class FindManyVentaArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive1'


class FindManyVentaArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive2'


class FindManyVentaArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive3'


class FindManyVentaArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive4'


class FindManyVentaArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    
    

class DetalleIncludeFromenvio(TypedDict, total=False):
    """Relational arguments for envio"""
    product: Union[bool, 'ProductArgsFromenvioRecursive1']
    venta: Union[bool, 'VentaArgsFromenvioRecursive1']


class DetalleIncludeFromenvioRecursive1(TypedDict, total=False):
    """Relational arguments for envio"""
    product: Union[bool, 'ProductArgsFromenvioRecursive2']
    venta: Union[bool, 'VentaArgsFromenvioRecursive2']


class DetalleIncludeFromenvioRecursive2(TypedDict, total=False):
    """Relational arguments for envio"""
    product: Union[bool, 'ProductArgsFromenvioRecursive3']
    venta: Union[bool, 'VentaArgsFromenvioRecursive3']


class DetalleIncludeFromenvioRecursive3(TypedDict, total=False):
    """Relational arguments for envio"""
    product: Union[bool, 'ProductArgsFromenvioRecursive4']
    venta: Union[bool, 'VentaArgsFromenvioRecursive4']


class DetalleIncludeFromenvioRecursive4(TypedDict, total=False):
    """Relational arguments for envio"""

    

class DetalleArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    include: 'DetalleIncludeFromDetalleRecursive1'


class DetalleArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    include: 'DetalleIncludeFromDetalleRecursive2'


class DetalleArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    include: 'DetalleIncludeFromDetalleRecursive3'


class DetalleArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    include: 'DetalleIncludeFromDetalleRecursive4'


class DetalleArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    
    

class FindManyDetalleArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive1'


class FindManyDetalleArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive2'


class FindManyDetalleArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive3'


class FindManyDetalleArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive4'


class FindManyDetalleArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    
    

class envioIncludeFromenvio(TypedDict, total=False):
    """Relational arguments for envio"""
    alamacen: Union[bool, 'AlmacenArgsFromenvioRecursive1']
    product: Union[bool, 'ProductArgsFromenvioRecursive1']


class envioIncludeFromenvioRecursive1(TypedDict, total=False):
    """Relational arguments for envio"""
    alamacen: Union[bool, 'AlmacenArgsFromenvioRecursive2']
    product: Union[bool, 'ProductArgsFromenvioRecursive2']


class envioIncludeFromenvioRecursive2(TypedDict, total=False):
    """Relational arguments for envio"""
    alamacen: Union[bool, 'AlmacenArgsFromenvioRecursive3']
    product: Union[bool, 'ProductArgsFromenvioRecursive3']


class envioIncludeFromenvioRecursive3(TypedDict, total=False):
    """Relational arguments for envio"""
    alamacen: Union[bool, 'AlmacenArgsFromenvioRecursive4']
    product: Union[bool, 'ProductArgsFromenvioRecursive4']


class envioIncludeFromenvioRecursive4(TypedDict, total=False):
    """Relational arguments for envio"""

    

class envioArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    include: 'envioIncludeFromenvioRecursive1'


class envioArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    include: 'envioIncludeFromenvioRecursive2'


class envioArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    include: 'envioIncludeFromenvioRecursive3'


class envioArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    include: 'envioIncludeFromenvioRecursive4'


class envioArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    
    

class FindManyenvioArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive1'


class FindManyenvioArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive2'


class FindManyenvioArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive3'


class FindManyenvioArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive4'


class FindManyenvioArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    
    

class Pedidos_FabricanteIncludeFromenvio(TypedDict, total=False):
    """Relational arguments for envio"""
    product: Union[bool, 'ProductArgsFromenvioRecursive1']
    user: Union[bool, 'UsersArgsFromenvioRecursive1']


class Pedidos_FabricanteIncludeFromenvioRecursive1(TypedDict, total=False):
    """Relational arguments for envio"""
    product: Union[bool, 'ProductArgsFromenvioRecursive2']
    user: Union[bool, 'UsersArgsFromenvioRecursive2']


class Pedidos_FabricanteIncludeFromenvioRecursive2(TypedDict, total=False):
    """Relational arguments for envio"""
    product: Union[bool, 'ProductArgsFromenvioRecursive3']
    user: Union[bool, 'UsersArgsFromenvioRecursive3']


class Pedidos_FabricanteIncludeFromenvioRecursive3(TypedDict, total=False):
    """Relational arguments for envio"""
    product: Union[bool, 'ProductArgsFromenvioRecursive4']
    user: Union[bool, 'UsersArgsFromenvioRecursive4']


class Pedidos_FabricanteIncludeFromenvioRecursive4(TypedDict, total=False):
    """Relational arguments for envio"""

    

class Pedidos_FabricanteArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class Pedidos_FabricanteArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class Pedidos_FabricanteArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class Pedidos_FabricanteArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class Pedidos_FabricanteArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    
    

class FindManyPedidos_FabricanteArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class FindManyPedidos_FabricanteArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class FindManyPedidos_FabricanteArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class FindManyPedidos_FabricanteArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class FindManyPedidos_FabricanteArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    
    

class AlmacenIncludeFromenvio(TypedDict, total=False):
    """Relational arguments for envio"""
    user: Union[bool, 'UsersArgsFromenvioRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromenvioRecursive1']


class AlmacenIncludeFromenvioRecursive1(TypedDict, total=False):
    """Relational arguments for envio"""
    user: Union[bool, 'UsersArgsFromenvioRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromenvioRecursive2']


class AlmacenIncludeFromenvioRecursive2(TypedDict, total=False):
    """Relational arguments for envio"""
    user: Union[bool, 'UsersArgsFromenvioRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromenvioRecursive3']


class AlmacenIncludeFromenvioRecursive3(TypedDict, total=False):
    """Relational arguments for envio"""
    user: Union[bool, 'UsersArgsFromenvioRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromenvioRecursive4']


class AlmacenIncludeFromenvioRecursive4(TypedDict, total=False):
    """Relational arguments for envio"""

    

class AlmacenArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class AlmacenArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class AlmacenArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class AlmacenArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class AlmacenArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    
    

class FindManyAlmacenArgsFromenvio(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class FindManyAlmacenArgsFromenvioRecursive1(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class FindManyAlmacenArgsFromenvioRecursive2(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class FindManyAlmacenArgsFromenvioRecursive3(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class FindManyAlmacenArgsFromenvioRecursive4(TypedDict, total=False):
    """Arguments for envio"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    


FindManyenvioArgs = FindManyenvioArgsFromenvio
FindFirstenvioArgs = FindManyenvioArgsFromenvio


    

class envioWhereInput(TypedDict, total=False):
    """envio arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alamacen_id: Union[_int, 'types.IntFilter']
    alamacen: 'AlmacenRelationFilter'
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    cantidad: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['envioWhereInputRecursive1', List['envioWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['envioWhereInputRecursive1']
    OR: List['envioWhereInputRecursive1']
    NOT: List['envioWhereInputRecursive1']


class envioWhereInputRecursive1(TypedDict, total=False):
    """envio arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alamacen_id: Union[_int, 'types.IntFilter']
    alamacen: 'AlmacenRelationFilter'
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    cantidad: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['envioWhereInputRecursive2', List['envioWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['envioWhereInputRecursive2']
    OR: List['envioWhereInputRecursive2']
    NOT: List['envioWhereInputRecursive2']


class envioWhereInputRecursive2(TypedDict, total=False):
    """envio arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alamacen_id: Union[_int, 'types.IntFilter']
    alamacen: 'AlmacenRelationFilter'
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    cantidad: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['envioWhereInputRecursive3', List['envioWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['envioWhereInputRecursive3']
    OR: List['envioWhereInputRecursive3']
    NOT: List['envioWhereInputRecursive3']


class envioWhereInputRecursive3(TypedDict, total=False):
    """envio arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alamacen_id: Union[_int, 'types.IntFilter']
    alamacen: 'AlmacenRelationFilter'
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    cantidad: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['envioWhereInputRecursive4', List['envioWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['envioWhereInputRecursive4']
    OR: List['envioWhereInputRecursive4']
    NOT: List['envioWhereInputRecursive4']


class envioWhereInputRecursive4(TypedDict, total=False):
    """envio arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alamacen_id: Union[_int, 'types.IntFilter']
    alamacen: 'AlmacenRelationFilter'
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    cantidad: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate envio types


    

class envioScalarWhereWithAggregatesInput(TypedDict, total=False):
    """envio arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alamacen_id: Union[_int, 'types.IntWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['envioScalarWhereWithAggregatesInputRecursive1']
    OR: List['envioScalarWhereWithAggregatesInputRecursive1']
    NOT: List['envioScalarWhereWithAggregatesInputRecursive1']


class envioScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """envio arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alamacen_id: Union[_int, 'types.IntWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['envioScalarWhereWithAggregatesInputRecursive2']
    OR: List['envioScalarWhereWithAggregatesInputRecursive2']
    NOT: List['envioScalarWhereWithAggregatesInputRecursive2']


class envioScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """envio arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alamacen_id: Union[_int, 'types.IntWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['envioScalarWhereWithAggregatesInputRecursive3']
    OR: List['envioScalarWhereWithAggregatesInputRecursive3']
    NOT: List['envioScalarWhereWithAggregatesInputRecursive3']


class envioScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """envio arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alamacen_id: Union[_int, 'types.IntWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['envioScalarWhereWithAggregatesInputRecursive4']
    OR: List['envioScalarWhereWithAggregatesInputRecursive4']
    NOT: List['envioScalarWhereWithAggregatesInputRecursive4']


class envioScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """envio arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alamacen_id: Union[_int, 'types.IntWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    cantidad: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class envioGroupByOutput(TypedDict, total=False):
    id: _int
    alamacen_id: _int
    product_id: _int
    cantidad: _str
    createdAt: datetime.datetime
    _sum: 'envioSumAggregateOutput'
    _avg: 'envioAvgAggregateOutput'
    _min: 'envioMinAggregateOutput'
    _max: 'envioMaxAggregateOutput'
    _count: 'envioCountAggregateOutput'


class envioAvgAggregateOutput(TypedDict, total=False):
    """envio output for aggregating averages"""
    id: float
    alamacen_id: float
    product_id: float


class envioSumAggregateOutput(TypedDict, total=False):
    """envio output for aggregating sums"""
    id: _int
    alamacen_id: _int
    product_id: _int


class envioScalarAggregateOutput(TypedDict, total=False):
    """envio output including scalar fields"""
    id: _int
    alamacen_id: _int
    product_id: _int
    cantidad: _str
    createdAt: datetime.datetime


envioMinAggregateOutput = envioScalarAggregateOutput
envioMaxAggregateOutput = envioScalarAggregateOutput


class envioMaxAggregateInput(TypedDict, total=False):
    """envio input for aggregating by max"""
    id: bool
    alamacen_id: bool
    product_id: bool
    cantidad: bool
    createdAt: bool


class envioMinAggregateInput(TypedDict, total=False):
    """envio input for aggregating by min"""
    id: bool
    alamacen_id: bool
    product_id: bool
    cantidad: bool
    createdAt: bool


class envioNumberAggregateInput(TypedDict, total=False):
    """envio input for aggregating numbers"""
    id: bool
    alamacen_id: bool
    product_id: bool


envioAvgAggregateInput = envioNumberAggregateInput
envioSumAggregateInput = envioNumberAggregateInput


envioCountAggregateInput = TypedDict(
    'envioCountAggregateInput',
    {
        'id': bool,
        'alamacen_id': bool,
        'product_id': bool,
        'cantidad': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

envioCountAggregateOutput = TypedDict(
    'envioCountAggregateOutput',
    {
        'id': int,
        'alamacen_id': int,
        'product_id': int,
        'cantidad': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


envioKeys = Literal[
    'id',
    'alamacen_id',
    'alamacen',
    'product',
    'product_id',
    'cantidad',
    'createdAt',
]
envioScalarFieldKeys = Literal[
    'id',
    'alamacen_id',
    'product_id',
    'cantidad',
    'createdAt',
]
envioScalarFieldKeysT = TypeVar('envioScalarFieldKeysT', bound=envioScalarFieldKeys)

envioRelationalFieldKeys = Literal[
        'alamacen',
        'product',
    ]

# Pedidos_Fabricante types

class Pedidos_FabricanteOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Pedidos_Fabricante create method"""
    id: _int
    product: 'ProductCreateNestedWithoutRelationsInput'
    product_id: _int
    user: 'UsersCreateNestedWithoutRelationsInput'
    user_id: _int
    fecha: datetime.datetime


class Pedidos_FabricanteCreateInput(Pedidos_FabricanteOptionalCreateInput):
    """Required arguments to the Pedidos_Fabricante create method"""
    nombre: _str
    direccion: _str
    cantidad: _float
    telefono: _str
    total: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class Pedidos_FabricanteOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Pedidos_Fabricante create method, without relations"""
    id: _int
    product_id: _int
    user_id: _int
    fecha: datetime.datetime


class Pedidos_FabricanteCreateWithoutRelationsInput(Pedidos_FabricanteOptionalCreateWithoutRelationsInput):
    """Required arguments to the Pedidos_Fabricante create method, without relations"""
    nombre: _str
    direccion: _str
    cantidad: _float
    telefono: _str
    total: _float

class Pedidos_FabricanteConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'Pedidos_FabricanteCreateWithoutRelationsInput'
    where: 'Pedidos_FabricanteWhereUniqueInput'

class Pedidos_FabricanteCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'Pedidos_FabricanteCreateWithoutRelationsInput'
    connect: 'Pedidos_FabricanteWhereUniqueInput'
    connect_or_create: 'Pedidos_FabricanteConnectOrCreateWithoutRelationsInput'


class Pedidos_FabricanteCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['Pedidos_FabricanteCreateWithoutRelationsInput', List['Pedidos_FabricanteCreateWithoutRelationsInput']]
    connect: Union['Pedidos_FabricanteWhereUniqueInput', List['Pedidos_FabricanteWhereUniqueInput']]
    connect_or_create: Union['Pedidos_FabricanteConnectOrCreateWithoutRelationsInput', List['Pedidos_FabricanteConnectOrCreateWithoutRelationsInput']]

_Pedidos_FabricanteWhereUnique_id_Input = TypedDict(
    '_Pedidos_FabricanteWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

Pedidos_FabricanteWhereUniqueInput = _Pedidos_FabricanteWhereUnique_id_Input


class Pedidos_FabricanteUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    nombre: _str
    direccion: _str
    cantidad: Union[AtomicFloatInput, _float]
    product: 'ProductUpdateOneWithoutRelationsInput'
    user: 'UsersUpdateOneWithoutRelationsInput'
    telefono: _str
    fecha: datetime.datetime
    total: Union[AtomicFloatInput, _float]


class Pedidos_FabricanteUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    nombre: _str
    direccion: _str
    cantidad: Union[AtomicFloatInput, _float]
    telefono: _str
    fecha: datetime.datetime
    total: Union[AtomicFloatInput, _float]


class Pedidos_FabricanteUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['Pedidos_FabricanteCreateWithoutRelationsInput']
    connect: List['Pedidos_FabricanteWhereUniqueInput']
    connect_or_create: List['Pedidos_FabricanteConnectOrCreateWithoutRelationsInput']
    set: List['Pedidos_FabricanteWhereUniqueInput']
    disconnect: List['Pedidos_FabricanteWhereUniqueInput']
    delete: List['Pedidos_FabricanteWhereUniqueInput']

    # TODO
    # update: List['Pedidos_FabricanteUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['Pedidos_FabricanteUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['Pedidos_FabricanteScalarWhereInput']
    # upsert: List['Pedidos_FabricanteUpserteWithWhereUniqueWithoutRelationsInput']


class Pedidos_FabricanteUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'Pedidos_FabricanteCreateWithoutRelationsInput'
    connect: 'Pedidos_FabricanteWhereUniqueInput'
    connect_or_create: 'Pedidos_FabricanteConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'Pedidos_FabricanteUpdateInput'
    # upsert: 'Pedidos_FabricanteUpsertWithoutRelationsInput'


class Pedidos_FabricanteUpsertInput(TypedDict):
    create: 'Pedidos_FabricanteCreateInput'
    update: 'Pedidos_FabricanteUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Pedidos_Fabricante_id_OrderByInput = TypedDict(
    '_Pedidos_Fabricante_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Pedidos_Fabricante_nombre_OrderByInput = TypedDict(
    '_Pedidos_Fabricante_nombre_OrderByInput',
    {
        'nombre': 'SortOrder',
    },
    total=True
)

_Pedidos_Fabricante_direccion_OrderByInput = TypedDict(
    '_Pedidos_Fabricante_direccion_OrderByInput',
    {
        'direccion': 'SortOrder',
    },
    total=True
)

_Pedidos_Fabricante_cantidad_OrderByInput = TypedDict(
    '_Pedidos_Fabricante_cantidad_OrderByInput',
    {
        'cantidad': 'SortOrder',
    },
    total=True
)

_Pedidos_Fabricante_product_id_OrderByInput = TypedDict(
    '_Pedidos_Fabricante_product_id_OrderByInput',
    {
        'product_id': 'SortOrder',
    },
    total=True
)

_Pedidos_Fabricante_user_id_OrderByInput = TypedDict(
    '_Pedidos_Fabricante_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_Pedidos_Fabricante_telefono_OrderByInput = TypedDict(
    '_Pedidos_Fabricante_telefono_OrderByInput',
    {
        'telefono': 'SortOrder',
    },
    total=True
)

_Pedidos_Fabricante_fecha_OrderByInput = TypedDict(
    '_Pedidos_Fabricante_fecha_OrderByInput',
    {
        'fecha': 'SortOrder',
    },
    total=True
)

_Pedidos_Fabricante_total_OrderByInput = TypedDict(
    '_Pedidos_Fabricante_total_OrderByInput',
    {
        'total': 'SortOrder',
    },
    total=True
)

_Pedidos_Fabricante_RelevanceInner = TypedDict(
    '_Pedidos_Fabricante_RelevanceInner',
    {
        'fields': 'List[Pedidos_FabricanteScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Pedidos_Fabricante_RelevanceOrderByInput = TypedDict(
    '_Pedidos_Fabricante_RelevanceOrderByInput',
    {
        '_relevance': '_Pedidos_Fabricante_RelevanceInner',
    },
    total=True
)

Pedidos_FabricanteOrderByInput = Union[
    '_Pedidos_Fabricante_id_OrderByInput',
    '_Pedidos_Fabricante_nombre_OrderByInput',
    '_Pedidos_Fabricante_direccion_OrderByInput',
    '_Pedidos_Fabricante_cantidad_OrderByInput',
    '_Pedidos_Fabricante_product_id_OrderByInput',
    '_Pedidos_Fabricante_user_id_OrderByInput',
    '_Pedidos_Fabricante_telefono_OrderByInput',
    '_Pedidos_Fabricante_fecha_OrderByInput',
    '_Pedidos_Fabricante_total_OrderByInput',
    '_Pedidos_Fabricante_RelevanceOrderByInput',
]



# recursive Pedidos_Fabricante types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

Pedidos_FabricanteRelationFilter = TypedDict(
    'Pedidos_FabricanteRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class Pedidos_FabricanteListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class Pedidos_FabricanteInclude(TypedDict, total=False):
    """Pedidos_Fabricante relational arguments"""
    product: Union[bool, 'ProductArgsFromPedidos_Fabricante']
    user: Union[bool, 'UsersArgsFromPedidos_Fabricante']


    

class UsersIncludeFromPedidos_Fabricante(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromPedidos_FabricanteRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromPedidos_FabricanteRecursive1']


class UsersIncludeFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromPedidos_FabricanteRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromPedidos_FabricanteRecursive2']


class UsersIncludeFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromPedidos_FabricanteRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromPedidos_FabricanteRecursive3']


class UsersIncludeFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromPedidos_FabricanteRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromPedidos_FabricanteRecursive4']


class UsersIncludeFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""

    

class UsersArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    
    

class FindManyUsersArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class ProductIncludeFromPedidos_Fabricante(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    category: Union[bool, 'CategoryArgsFromPedidos_FabricanteRecursive1']
    detalles: Union[bool, 'FindManyDetalleArgsFromPedidos_FabricanteRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromPedidos_FabricanteRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromPedidos_FabricanteRecursive1']


class ProductIncludeFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    category: Union[bool, 'CategoryArgsFromPedidos_FabricanteRecursive2']
    detalles: Union[bool, 'FindManyDetalleArgsFromPedidos_FabricanteRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromPedidos_FabricanteRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromPedidos_FabricanteRecursive2']


class ProductIncludeFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    category: Union[bool, 'CategoryArgsFromPedidos_FabricanteRecursive3']
    detalles: Union[bool, 'FindManyDetalleArgsFromPedidos_FabricanteRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromPedidos_FabricanteRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromPedidos_FabricanteRecursive3']


class ProductIncludeFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    category: Union[bool, 'CategoryArgsFromPedidos_FabricanteRecursive4']
    detalles: Union[bool, 'FindManyDetalleArgsFromPedidos_FabricanteRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromPedidos_FabricanteRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromPedidos_FabricanteRecursive4']


class ProductIncludeFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""

    

class ProductArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    
    

class FindManyProductArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class CategoryIncludeFromPedidos_Fabricante(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    products: Union[bool, 'FindManyProductArgsFromPedidos_FabricanteRecursive1']


class CategoryIncludeFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    products: Union[bool, 'FindManyProductArgsFromPedidos_FabricanteRecursive2']


class CategoryIncludeFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    products: Union[bool, 'FindManyProductArgsFromPedidos_FabricanteRecursive3']


class CategoryIncludeFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    products: Union[bool, 'FindManyProductArgsFromPedidos_FabricanteRecursive4']


class CategoryIncludeFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""

    

class CategoryArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    
    

class FindManyCategoryArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class VentaIncludeFromPedidos_Fabricante(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    detalles: Union[bool, 'FindManyDetalleArgsFromPedidos_FabricanteRecursive1']


class VentaIncludeFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    detalles: Union[bool, 'FindManyDetalleArgsFromPedidos_FabricanteRecursive2']


class VentaIncludeFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    detalles: Union[bool, 'FindManyDetalleArgsFromPedidos_FabricanteRecursive3']


class VentaIncludeFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    detalles: Union[bool, 'FindManyDetalleArgsFromPedidos_FabricanteRecursive4']


class VentaIncludeFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""

    

class VentaArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'VentaIncludeFromVentaRecursive1'


class VentaArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'VentaIncludeFromVentaRecursive2'


class VentaArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'VentaIncludeFromVentaRecursive3'


class VentaArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'VentaIncludeFromVentaRecursive4'


class VentaArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    
    

class FindManyVentaArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive1'


class FindManyVentaArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive2'


class FindManyVentaArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive3'


class FindManyVentaArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive4'


class FindManyVentaArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    
    

class DetalleIncludeFromPedidos_Fabricante(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    product: Union[bool, 'ProductArgsFromPedidos_FabricanteRecursive1']
    venta: Union[bool, 'VentaArgsFromPedidos_FabricanteRecursive1']


class DetalleIncludeFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    product: Union[bool, 'ProductArgsFromPedidos_FabricanteRecursive2']
    venta: Union[bool, 'VentaArgsFromPedidos_FabricanteRecursive2']


class DetalleIncludeFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    product: Union[bool, 'ProductArgsFromPedidos_FabricanteRecursive3']
    venta: Union[bool, 'VentaArgsFromPedidos_FabricanteRecursive3']


class DetalleIncludeFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    product: Union[bool, 'ProductArgsFromPedidos_FabricanteRecursive4']
    venta: Union[bool, 'VentaArgsFromPedidos_FabricanteRecursive4']


class DetalleIncludeFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""

    

class DetalleArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'DetalleIncludeFromDetalleRecursive1'


class DetalleArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'DetalleIncludeFromDetalleRecursive2'


class DetalleArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'DetalleIncludeFromDetalleRecursive3'


class DetalleArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'DetalleIncludeFromDetalleRecursive4'


class DetalleArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    
    

class FindManyDetalleArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive1'


class FindManyDetalleArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive2'


class FindManyDetalleArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive3'


class FindManyDetalleArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive4'


class FindManyDetalleArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    
    

class envioIncludeFromPedidos_Fabricante(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    alamacen: Union[bool, 'AlmacenArgsFromPedidos_FabricanteRecursive1']
    product: Union[bool, 'ProductArgsFromPedidos_FabricanteRecursive1']


class envioIncludeFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    alamacen: Union[bool, 'AlmacenArgsFromPedidos_FabricanteRecursive2']
    product: Union[bool, 'ProductArgsFromPedidos_FabricanteRecursive2']


class envioIncludeFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    alamacen: Union[bool, 'AlmacenArgsFromPedidos_FabricanteRecursive3']
    product: Union[bool, 'ProductArgsFromPedidos_FabricanteRecursive3']


class envioIncludeFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    alamacen: Union[bool, 'AlmacenArgsFromPedidos_FabricanteRecursive4']
    product: Union[bool, 'ProductArgsFromPedidos_FabricanteRecursive4']


class envioIncludeFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""

    

class envioArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'envioIncludeFromenvioRecursive1'


class envioArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'envioIncludeFromenvioRecursive2'


class envioArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'envioIncludeFromenvioRecursive3'


class envioArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'envioIncludeFromenvioRecursive4'


class envioArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    
    

class FindManyenvioArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive1'


class FindManyenvioArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive2'


class FindManyenvioArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive3'


class FindManyenvioArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive4'


class FindManyenvioArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    
    

class Pedidos_FabricanteIncludeFromPedidos_Fabricante(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    product: Union[bool, 'ProductArgsFromPedidos_FabricanteRecursive1']
    user: Union[bool, 'UsersArgsFromPedidos_FabricanteRecursive1']


class Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    product: Union[bool, 'ProductArgsFromPedidos_FabricanteRecursive2']
    user: Union[bool, 'UsersArgsFromPedidos_FabricanteRecursive2']


class Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    product: Union[bool, 'ProductArgsFromPedidos_FabricanteRecursive3']
    user: Union[bool, 'UsersArgsFromPedidos_FabricanteRecursive3']


class Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    product: Union[bool, 'ProductArgsFromPedidos_FabricanteRecursive4']
    user: Union[bool, 'UsersArgsFromPedidos_FabricanteRecursive4']


class Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""

    

class Pedidos_FabricanteArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class Pedidos_FabricanteArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class Pedidos_FabricanteArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class Pedidos_FabricanteArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class Pedidos_FabricanteArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    
    

class FindManyPedidos_FabricanteArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class FindManyPedidos_FabricanteArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class FindManyPedidos_FabricanteArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class FindManyPedidos_FabricanteArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class FindManyPedidos_FabricanteArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    
    

class AlmacenIncludeFromPedidos_Fabricante(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    user: Union[bool, 'UsersArgsFromPedidos_FabricanteRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromPedidos_FabricanteRecursive1']


class AlmacenIncludeFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    user: Union[bool, 'UsersArgsFromPedidos_FabricanteRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromPedidos_FabricanteRecursive2']


class AlmacenIncludeFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    user: Union[bool, 'UsersArgsFromPedidos_FabricanteRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromPedidos_FabricanteRecursive3']


class AlmacenIncludeFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""
    user: Union[bool, 'UsersArgsFromPedidos_FabricanteRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromPedidos_FabricanteRecursive4']


class AlmacenIncludeFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Relational arguments for Pedidos_Fabricante"""

    

class AlmacenArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class AlmacenArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class AlmacenArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class AlmacenArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class AlmacenArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    
    

class FindManyAlmacenArgsFromPedidos_Fabricante(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class FindManyAlmacenArgsFromPedidos_FabricanteRecursive1(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class FindManyAlmacenArgsFromPedidos_FabricanteRecursive2(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class FindManyAlmacenArgsFromPedidos_FabricanteRecursive3(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class FindManyAlmacenArgsFromPedidos_FabricanteRecursive4(TypedDict, total=False):
    """Arguments for Pedidos_Fabricante"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    


FindManyPedidos_FabricanteArgs = FindManyPedidos_FabricanteArgsFromPedidos_Fabricante
FindFirstPedidos_FabricanteArgs = FindManyPedidos_FabricanteArgsFromPedidos_Fabricante


    

class Pedidos_FabricanteWhereInput(TypedDict, total=False):
    """Pedidos_Fabricante arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nombre: Union[_str, 'types.StringFilter']
    direccion: Union[_str, 'types.StringFilter']
    cantidad: Union[_float, 'types.FloatFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    user: 'UsersRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    telefono: Union[_str, 'types.StringFilter']
    fecha: Union[datetime.datetime, 'types.DateTimeFilter']
    total: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['Pedidos_FabricanteWhereInputRecursive1', List['Pedidos_FabricanteWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['Pedidos_FabricanteWhereInputRecursive1']
    OR: List['Pedidos_FabricanteWhereInputRecursive1']
    NOT: List['Pedidos_FabricanteWhereInputRecursive1']


class Pedidos_FabricanteWhereInputRecursive1(TypedDict, total=False):
    """Pedidos_Fabricante arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nombre: Union[_str, 'types.StringFilter']
    direccion: Union[_str, 'types.StringFilter']
    cantidad: Union[_float, 'types.FloatFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    user: 'UsersRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    telefono: Union[_str, 'types.StringFilter']
    fecha: Union[datetime.datetime, 'types.DateTimeFilter']
    total: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['Pedidos_FabricanteWhereInputRecursive2', List['Pedidos_FabricanteWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['Pedidos_FabricanteWhereInputRecursive2']
    OR: List['Pedidos_FabricanteWhereInputRecursive2']
    NOT: List['Pedidos_FabricanteWhereInputRecursive2']


class Pedidos_FabricanteWhereInputRecursive2(TypedDict, total=False):
    """Pedidos_Fabricante arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nombre: Union[_str, 'types.StringFilter']
    direccion: Union[_str, 'types.StringFilter']
    cantidad: Union[_float, 'types.FloatFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    user: 'UsersRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    telefono: Union[_str, 'types.StringFilter']
    fecha: Union[datetime.datetime, 'types.DateTimeFilter']
    total: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['Pedidos_FabricanteWhereInputRecursive3', List['Pedidos_FabricanteWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['Pedidos_FabricanteWhereInputRecursive3']
    OR: List['Pedidos_FabricanteWhereInputRecursive3']
    NOT: List['Pedidos_FabricanteWhereInputRecursive3']


class Pedidos_FabricanteWhereInputRecursive3(TypedDict, total=False):
    """Pedidos_Fabricante arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nombre: Union[_str, 'types.StringFilter']
    direccion: Union[_str, 'types.StringFilter']
    cantidad: Union[_float, 'types.FloatFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    user: 'UsersRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    telefono: Union[_str, 'types.StringFilter']
    fecha: Union[datetime.datetime, 'types.DateTimeFilter']
    total: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['Pedidos_FabricanteWhereInputRecursive4', List['Pedidos_FabricanteWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['Pedidos_FabricanteWhereInputRecursive4']
    OR: List['Pedidos_FabricanteWhereInputRecursive4']
    NOT: List['Pedidos_FabricanteWhereInputRecursive4']


class Pedidos_FabricanteWhereInputRecursive4(TypedDict, total=False):
    """Pedidos_Fabricante arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nombre: Union[_str, 'types.StringFilter']
    direccion: Union[_str, 'types.StringFilter']
    cantidad: Union[_float, 'types.FloatFilter']
    product: 'ProductRelationFilter'
    product_id: Union[_int, 'types.IntFilter']
    user: 'UsersRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    telefono: Union[_str, 'types.StringFilter']
    fecha: Union[datetime.datetime, 'types.DateTimeFilter']
    total: Union[_float, 'types.FloatFilter']



# aggregate Pedidos_Fabricante types


    

class Pedidos_FabricanteScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Pedidos_Fabricante arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nombre: Union[_str, 'types.StringWithAggregatesFilter']
    direccion: Union[_str, 'types.StringWithAggregatesFilter']
    cantidad: Union[_float, 'types.FloatWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    telefono: Union[_str, 'types.StringWithAggregatesFilter']
    fecha: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive1']
    OR: List['Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive1']
    NOT: List['Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive1']


class Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Pedidos_Fabricante arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nombre: Union[_str, 'types.StringWithAggregatesFilter']
    direccion: Union[_str, 'types.StringWithAggregatesFilter']
    cantidad: Union[_float, 'types.FloatWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    telefono: Union[_str, 'types.StringWithAggregatesFilter']
    fecha: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive2']
    OR: List['Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive2']
    NOT: List['Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive2']


class Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Pedidos_Fabricante arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nombre: Union[_str, 'types.StringWithAggregatesFilter']
    direccion: Union[_str, 'types.StringWithAggregatesFilter']
    cantidad: Union[_float, 'types.FloatWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    telefono: Union[_str, 'types.StringWithAggregatesFilter']
    fecha: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive3']
    OR: List['Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive3']
    NOT: List['Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive3']


class Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Pedidos_Fabricante arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nombre: Union[_str, 'types.StringWithAggregatesFilter']
    direccion: Union[_str, 'types.StringWithAggregatesFilter']
    cantidad: Union[_float, 'types.FloatWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    telefono: Union[_str, 'types.StringWithAggregatesFilter']
    fecha: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive4']
    OR: List['Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive4']
    NOT: List['Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive4']


class Pedidos_FabricanteScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Pedidos_Fabricante arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nombre: Union[_str, 'types.StringWithAggregatesFilter']
    direccion: Union[_str, 'types.StringWithAggregatesFilter']
    cantidad: Union[_float, 'types.FloatWithAggregatesFilter']
    product_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    telefono: Union[_str, 'types.StringWithAggregatesFilter']
    fecha: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']



class Pedidos_FabricanteGroupByOutput(TypedDict, total=False):
    id: _int
    nombre: _str
    direccion: _str
    cantidad: _float
    product_id: _int
    user_id: _int
    telefono: _str
    fecha: datetime.datetime
    total: _float
    _sum: 'Pedidos_FabricanteSumAggregateOutput'
    _avg: 'Pedidos_FabricanteAvgAggregateOutput'
    _min: 'Pedidos_FabricanteMinAggregateOutput'
    _max: 'Pedidos_FabricanteMaxAggregateOutput'
    _count: 'Pedidos_FabricanteCountAggregateOutput'


class Pedidos_FabricanteAvgAggregateOutput(TypedDict, total=False):
    """Pedidos_Fabricante output for aggregating averages"""
    id: float
    cantidad: float
    product_id: float
    user_id: float
    total: float


class Pedidos_FabricanteSumAggregateOutput(TypedDict, total=False):
    """Pedidos_Fabricante output for aggregating sums"""
    id: _int
    cantidad: _float
    product_id: _int
    user_id: _int
    total: _float


class Pedidos_FabricanteScalarAggregateOutput(TypedDict, total=False):
    """Pedidos_Fabricante output including scalar fields"""
    id: _int
    nombre: _str
    direccion: _str
    cantidad: _float
    product_id: _int
    user_id: _int
    telefono: _str
    fecha: datetime.datetime
    total: _float


Pedidos_FabricanteMinAggregateOutput = Pedidos_FabricanteScalarAggregateOutput
Pedidos_FabricanteMaxAggregateOutput = Pedidos_FabricanteScalarAggregateOutput


class Pedidos_FabricanteMaxAggregateInput(TypedDict, total=False):
    """Pedidos_Fabricante input for aggregating by max"""
    id: bool
    nombre: bool
    direccion: bool
    cantidad: bool
    product_id: bool
    user_id: bool
    telefono: bool
    fecha: bool
    total: bool


class Pedidos_FabricanteMinAggregateInput(TypedDict, total=False):
    """Pedidos_Fabricante input for aggregating by min"""
    id: bool
    nombre: bool
    direccion: bool
    cantidad: bool
    product_id: bool
    user_id: bool
    telefono: bool
    fecha: bool
    total: bool


class Pedidos_FabricanteNumberAggregateInput(TypedDict, total=False):
    """Pedidos_Fabricante input for aggregating numbers"""
    id: bool
    cantidad: bool
    product_id: bool
    user_id: bool
    total: bool


Pedidos_FabricanteAvgAggregateInput = Pedidos_FabricanteNumberAggregateInput
Pedidos_FabricanteSumAggregateInput = Pedidos_FabricanteNumberAggregateInput


Pedidos_FabricanteCountAggregateInput = TypedDict(
    'Pedidos_FabricanteCountAggregateInput',
    {
        'id': bool,
        'nombre': bool,
        'direccion': bool,
        'cantidad': bool,
        'product_id': bool,
        'user_id': bool,
        'telefono': bool,
        'fecha': bool,
        'total': bool,
        '_all': bool,
    },
    total=False,
)

Pedidos_FabricanteCountAggregateOutput = TypedDict(
    'Pedidos_FabricanteCountAggregateOutput',
    {
        'id': int,
        'nombre': int,
        'direccion': int,
        'cantidad': int,
        'product_id': int,
        'user_id': int,
        'telefono': int,
        'fecha': int,
        'total': int,
        '_all': int,
    },
    total=False,
)


Pedidos_FabricanteKeys = Literal[
    'id',
    'nombre',
    'direccion',
    'cantidad',
    'product',
    'product_id',
    'user',
    'user_id',
    'telefono',
    'fecha',
    'total',
]
Pedidos_FabricanteScalarFieldKeys = Literal[
    'id',
    'nombre',
    'direccion',
    'cantidad',
    'product_id',
    'user_id',
    'telefono',
    'fecha',
    'total',
]
Pedidos_FabricanteScalarFieldKeysT = TypeVar('Pedidos_FabricanteScalarFieldKeysT', bound=Pedidos_FabricanteScalarFieldKeys)

Pedidos_FabricanteRelationalFieldKeys = Literal[
        'product',
        'user',
    ]

# Almacen types

class AlmacenOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Almacen create method"""
    id: _int
    user: 'UsersCreateNestedWithoutRelationsInput'
    user_id: _int
    envio: 'envioCreateManyNestedWithoutRelationsInput'


class AlmacenCreateInput(AlmacenOptionalCreateInput):
    """Required arguments to the Almacen create method"""
    nombre: _str
    direccion: _str
    descripcion: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AlmacenOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Almacen create method, without relations"""
    id: _int
    user_id: _int


class AlmacenCreateWithoutRelationsInput(AlmacenOptionalCreateWithoutRelationsInput):
    """Required arguments to the Almacen create method, without relations"""
    nombre: _str
    direccion: _str
    descripcion: _str

class AlmacenConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AlmacenCreateWithoutRelationsInput'
    where: 'AlmacenWhereUniqueInput'

class AlmacenCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AlmacenCreateWithoutRelationsInput'
    connect: 'AlmacenWhereUniqueInput'
    connect_or_create: 'AlmacenConnectOrCreateWithoutRelationsInput'


class AlmacenCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AlmacenCreateWithoutRelationsInput', List['AlmacenCreateWithoutRelationsInput']]
    connect: Union['AlmacenWhereUniqueInput', List['AlmacenWhereUniqueInput']]
    connect_or_create: Union['AlmacenConnectOrCreateWithoutRelationsInput', List['AlmacenConnectOrCreateWithoutRelationsInput']]

_AlmacenWhereUnique_id_Input = TypedDict(
    '_AlmacenWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

AlmacenWhereUniqueInput = _AlmacenWhereUnique_id_Input


class AlmacenUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    nombre: _str
    direccion: _str
    descripcion: _str
    user: 'UsersUpdateOneWithoutRelationsInput'
    envio: 'envioUpdateManyWithoutRelationsInput'


class AlmacenUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    nombre: _str
    direccion: _str
    descripcion: _str


class AlmacenUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AlmacenCreateWithoutRelationsInput']
    connect: List['AlmacenWhereUniqueInput']
    connect_or_create: List['AlmacenConnectOrCreateWithoutRelationsInput']
    set: List['AlmacenWhereUniqueInput']
    disconnect: List['AlmacenWhereUniqueInput']
    delete: List['AlmacenWhereUniqueInput']

    # TODO
    # update: List['AlmacenUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AlmacenUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AlmacenScalarWhereInput']
    # upsert: List['AlmacenUpserteWithWhereUniqueWithoutRelationsInput']


class AlmacenUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AlmacenCreateWithoutRelationsInput'
    connect: 'AlmacenWhereUniqueInput'
    connect_or_create: 'AlmacenConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AlmacenUpdateInput'
    # upsert: 'AlmacenUpsertWithoutRelationsInput'


class AlmacenUpsertInput(TypedDict):
    create: 'AlmacenCreateInput'
    update: 'AlmacenUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Almacen_id_OrderByInput = TypedDict(
    '_Almacen_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Almacen_nombre_OrderByInput = TypedDict(
    '_Almacen_nombre_OrderByInput',
    {
        'nombre': 'SortOrder',
    },
    total=True
)

_Almacen_direccion_OrderByInput = TypedDict(
    '_Almacen_direccion_OrderByInput',
    {
        'direccion': 'SortOrder',
    },
    total=True
)

_Almacen_descripcion_OrderByInput = TypedDict(
    '_Almacen_descripcion_OrderByInput',
    {
        'descripcion': 'SortOrder',
    },
    total=True
)

_Almacen_user_id_OrderByInput = TypedDict(
    '_Almacen_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_Almacen_RelevanceInner = TypedDict(
    '_Almacen_RelevanceInner',
    {
        'fields': 'List[AlmacenScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Almacen_RelevanceOrderByInput = TypedDict(
    '_Almacen_RelevanceOrderByInput',
    {
        '_relevance': '_Almacen_RelevanceInner',
    },
    total=True
)

AlmacenOrderByInput = Union[
    '_Almacen_id_OrderByInput',
    '_Almacen_nombre_OrderByInput',
    '_Almacen_direccion_OrderByInput',
    '_Almacen_descripcion_OrderByInput',
    '_Almacen_user_id_OrderByInput',
    '_Almacen_RelevanceOrderByInput',
]



# recursive Almacen types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AlmacenRelationFilter = TypedDict(
    'AlmacenRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AlmacenListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AlmacenInclude(TypedDict, total=False):
    """Almacen relational arguments"""
    user: Union[bool, 'UsersArgsFromAlmacen']
    envio: Union[bool, 'FindManyenvioArgsFromAlmacen']


    

class UsersIncludeFromAlmacen(TypedDict, total=False):
    """Relational arguments for Almacen"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromAlmacenRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromAlmacenRecursive1']


class UsersIncludeFromAlmacenRecursive1(TypedDict, total=False):
    """Relational arguments for Almacen"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromAlmacenRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromAlmacenRecursive2']


class UsersIncludeFromAlmacenRecursive2(TypedDict, total=False):
    """Relational arguments for Almacen"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromAlmacenRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromAlmacenRecursive3']


class UsersIncludeFromAlmacenRecursive3(TypedDict, total=False):
    """Relational arguments for Almacen"""
    almacenes: Union[bool, 'FindManyAlmacenArgsFromAlmacenRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromAlmacenRecursive4']


class UsersIncludeFromAlmacenRecursive4(TypedDict, total=False):
    """Relational arguments for Almacen"""

    

class UsersArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    
    

class FindManyUsersArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class ProductIncludeFromAlmacen(TypedDict, total=False):
    """Relational arguments for Almacen"""
    category: Union[bool, 'CategoryArgsFromAlmacenRecursive1']
    detalles: Union[bool, 'FindManyDetalleArgsFromAlmacenRecursive1']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromAlmacenRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromAlmacenRecursive1']


class ProductIncludeFromAlmacenRecursive1(TypedDict, total=False):
    """Relational arguments for Almacen"""
    category: Union[bool, 'CategoryArgsFromAlmacenRecursive2']
    detalles: Union[bool, 'FindManyDetalleArgsFromAlmacenRecursive2']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromAlmacenRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromAlmacenRecursive2']


class ProductIncludeFromAlmacenRecursive2(TypedDict, total=False):
    """Relational arguments for Almacen"""
    category: Union[bool, 'CategoryArgsFromAlmacenRecursive3']
    detalles: Union[bool, 'FindManyDetalleArgsFromAlmacenRecursive3']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromAlmacenRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromAlmacenRecursive3']


class ProductIncludeFromAlmacenRecursive3(TypedDict, total=False):
    """Relational arguments for Almacen"""
    category: Union[bool, 'CategoryArgsFromAlmacenRecursive4']
    detalles: Union[bool, 'FindManyDetalleArgsFromAlmacenRecursive4']
    Pedidos_Fabricante: Union[bool, 'FindManyPedidos_FabricanteArgsFromAlmacenRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromAlmacenRecursive4']


class ProductIncludeFromAlmacenRecursive4(TypedDict, total=False):
    """Relational arguments for Almacen"""

    

class ProductArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    
    

class FindManyProductArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class CategoryIncludeFromAlmacen(TypedDict, total=False):
    """Relational arguments for Almacen"""
    products: Union[bool, 'FindManyProductArgsFromAlmacenRecursive1']


class CategoryIncludeFromAlmacenRecursive1(TypedDict, total=False):
    """Relational arguments for Almacen"""
    products: Union[bool, 'FindManyProductArgsFromAlmacenRecursive2']


class CategoryIncludeFromAlmacenRecursive2(TypedDict, total=False):
    """Relational arguments for Almacen"""
    products: Union[bool, 'FindManyProductArgsFromAlmacenRecursive3']


class CategoryIncludeFromAlmacenRecursive3(TypedDict, total=False):
    """Relational arguments for Almacen"""
    products: Union[bool, 'FindManyProductArgsFromAlmacenRecursive4']


class CategoryIncludeFromAlmacenRecursive4(TypedDict, total=False):
    """Relational arguments for Almacen"""

    

class CategoryArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    
    

class FindManyCategoryArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class VentaIncludeFromAlmacen(TypedDict, total=False):
    """Relational arguments for Almacen"""
    detalles: Union[bool, 'FindManyDetalleArgsFromAlmacenRecursive1']


class VentaIncludeFromAlmacenRecursive1(TypedDict, total=False):
    """Relational arguments for Almacen"""
    detalles: Union[bool, 'FindManyDetalleArgsFromAlmacenRecursive2']


class VentaIncludeFromAlmacenRecursive2(TypedDict, total=False):
    """Relational arguments for Almacen"""
    detalles: Union[bool, 'FindManyDetalleArgsFromAlmacenRecursive3']


class VentaIncludeFromAlmacenRecursive3(TypedDict, total=False):
    """Relational arguments for Almacen"""
    detalles: Union[bool, 'FindManyDetalleArgsFromAlmacenRecursive4']


class VentaIncludeFromAlmacenRecursive4(TypedDict, total=False):
    """Relational arguments for Almacen"""

    

class VentaArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'VentaIncludeFromVentaRecursive1'


class VentaArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'VentaIncludeFromVentaRecursive2'


class VentaArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'VentaIncludeFromVentaRecursive3'


class VentaArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'VentaIncludeFromVentaRecursive4'


class VentaArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    
    

class FindManyVentaArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive1'


class FindManyVentaArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive2'


class FindManyVentaArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive3'


class FindManyVentaArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    include: 'VentaIncludeFromVentaRecursive4'


class FindManyVentaArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['VentaOrderByInput', List['VentaOrderByInput']]
    where: 'VentaWhereInput'
    cursor: 'VentaWhereUniqueInput'
    distinct: List['VentaScalarFieldKeys']
    
    

class DetalleIncludeFromAlmacen(TypedDict, total=False):
    """Relational arguments for Almacen"""
    product: Union[bool, 'ProductArgsFromAlmacenRecursive1']
    venta: Union[bool, 'VentaArgsFromAlmacenRecursive1']


class DetalleIncludeFromAlmacenRecursive1(TypedDict, total=False):
    """Relational arguments for Almacen"""
    product: Union[bool, 'ProductArgsFromAlmacenRecursive2']
    venta: Union[bool, 'VentaArgsFromAlmacenRecursive2']


class DetalleIncludeFromAlmacenRecursive2(TypedDict, total=False):
    """Relational arguments for Almacen"""
    product: Union[bool, 'ProductArgsFromAlmacenRecursive3']
    venta: Union[bool, 'VentaArgsFromAlmacenRecursive3']


class DetalleIncludeFromAlmacenRecursive3(TypedDict, total=False):
    """Relational arguments for Almacen"""
    product: Union[bool, 'ProductArgsFromAlmacenRecursive4']
    venta: Union[bool, 'VentaArgsFromAlmacenRecursive4']


class DetalleIncludeFromAlmacenRecursive4(TypedDict, total=False):
    """Relational arguments for Almacen"""

    

class DetalleArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'DetalleIncludeFromDetalleRecursive1'


class DetalleArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'DetalleIncludeFromDetalleRecursive2'


class DetalleArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'DetalleIncludeFromDetalleRecursive3'


class DetalleArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'DetalleIncludeFromDetalleRecursive4'


class DetalleArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    
    

class FindManyDetalleArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive1'


class FindManyDetalleArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive2'


class FindManyDetalleArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive3'


class FindManyDetalleArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    include: 'DetalleIncludeFromDetalleRecursive4'


class FindManyDetalleArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['DetalleOrderByInput', List['DetalleOrderByInput']]
    where: 'DetalleWhereInput'
    cursor: 'DetalleWhereUniqueInput'
    distinct: List['DetalleScalarFieldKeys']
    
    

class envioIncludeFromAlmacen(TypedDict, total=False):
    """Relational arguments for Almacen"""
    alamacen: Union[bool, 'AlmacenArgsFromAlmacenRecursive1']
    product: Union[bool, 'ProductArgsFromAlmacenRecursive1']


class envioIncludeFromAlmacenRecursive1(TypedDict, total=False):
    """Relational arguments for Almacen"""
    alamacen: Union[bool, 'AlmacenArgsFromAlmacenRecursive2']
    product: Union[bool, 'ProductArgsFromAlmacenRecursive2']


class envioIncludeFromAlmacenRecursive2(TypedDict, total=False):
    """Relational arguments for Almacen"""
    alamacen: Union[bool, 'AlmacenArgsFromAlmacenRecursive3']
    product: Union[bool, 'ProductArgsFromAlmacenRecursive3']


class envioIncludeFromAlmacenRecursive3(TypedDict, total=False):
    """Relational arguments for Almacen"""
    alamacen: Union[bool, 'AlmacenArgsFromAlmacenRecursive4']
    product: Union[bool, 'ProductArgsFromAlmacenRecursive4']


class envioIncludeFromAlmacenRecursive4(TypedDict, total=False):
    """Relational arguments for Almacen"""

    

class envioArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'envioIncludeFromenvioRecursive1'


class envioArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'envioIncludeFromenvioRecursive2'


class envioArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'envioIncludeFromenvioRecursive3'


class envioArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'envioIncludeFromenvioRecursive4'


class envioArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    
    

class FindManyenvioArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive1'


class FindManyenvioArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive2'


class FindManyenvioArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive3'


class FindManyenvioArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    include: 'envioIncludeFromenvioRecursive4'


class FindManyenvioArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['envioOrderByInput', List['envioOrderByInput']]
    where: 'envioWhereInput'
    cursor: 'envioWhereUniqueInput'
    distinct: List['envioScalarFieldKeys']
    
    

class Pedidos_FabricanteIncludeFromAlmacen(TypedDict, total=False):
    """Relational arguments for Almacen"""
    product: Union[bool, 'ProductArgsFromAlmacenRecursive1']
    user: Union[bool, 'UsersArgsFromAlmacenRecursive1']


class Pedidos_FabricanteIncludeFromAlmacenRecursive1(TypedDict, total=False):
    """Relational arguments for Almacen"""
    product: Union[bool, 'ProductArgsFromAlmacenRecursive2']
    user: Union[bool, 'UsersArgsFromAlmacenRecursive2']


class Pedidos_FabricanteIncludeFromAlmacenRecursive2(TypedDict, total=False):
    """Relational arguments for Almacen"""
    product: Union[bool, 'ProductArgsFromAlmacenRecursive3']
    user: Union[bool, 'UsersArgsFromAlmacenRecursive3']


class Pedidos_FabricanteIncludeFromAlmacenRecursive3(TypedDict, total=False):
    """Relational arguments for Almacen"""
    product: Union[bool, 'ProductArgsFromAlmacenRecursive4']
    user: Union[bool, 'UsersArgsFromAlmacenRecursive4']


class Pedidos_FabricanteIncludeFromAlmacenRecursive4(TypedDict, total=False):
    """Relational arguments for Almacen"""

    

class Pedidos_FabricanteArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class Pedidos_FabricanteArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class Pedidos_FabricanteArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class Pedidos_FabricanteArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class Pedidos_FabricanteArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    
    

class FindManyPedidos_FabricanteArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive1'


class FindManyPedidos_FabricanteArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive2'


class FindManyPedidos_FabricanteArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive3'


class FindManyPedidos_FabricanteArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    include: 'Pedidos_FabricanteIncludeFromPedidos_FabricanteRecursive4'


class FindManyPedidos_FabricanteArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['Pedidos_FabricanteOrderByInput', List['Pedidos_FabricanteOrderByInput']]
    where: 'Pedidos_FabricanteWhereInput'
    cursor: 'Pedidos_FabricanteWhereUniqueInput'
    distinct: List['Pedidos_FabricanteScalarFieldKeys']
    
    

class AlmacenIncludeFromAlmacen(TypedDict, total=False):
    """Relational arguments for Almacen"""
    user: Union[bool, 'UsersArgsFromAlmacenRecursive1']
    envio: Union[bool, 'FindManyenvioArgsFromAlmacenRecursive1']


class AlmacenIncludeFromAlmacenRecursive1(TypedDict, total=False):
    """Relational arguments for Almacen"""
    user: Union[bool, 'UsersArgsFromAlmacenRecursive2']
    envio: Union[bool, 'FindManyenvioArgsFromAlmacenRecursive2']


class AlmacenIncludeFromAlmacenRecursive2(TypedDict, total=False):
    """Relational arguments for Almacen"""
    user: Union[bool, 'UsersArgsFromAlmacenRecursive3']
    envio: Union[bool, 'FindManyenvioArgsFromAlmacenRecursive3']


class AlmacenIncludeFromAlmacenRecursive3(TypedDict, total=False):
    """Relational arguments for Almacen"""
    user: Union[bool, 'UsersArgsFromAlmacenRecursive4']
    envio: Union[bool, 'FindManyenvioArgsFromAlmacenRecursive4']


class AlmacenIncludeFromAlmacenRecursive4(TypedDict, total=False):
    """Relational arguments for Almacen"""

    

class AlmacenArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class AlmacenArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class AlmacenArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class AlmacenArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class AlmacenArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    
    

class FindManyAlmacenArgsFromAlmacen(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive1'


class FindManyAlmacenArgsFromAlmacenRecursive1(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive2'


class FindManyAlmacenArgsFromAlmacenRecursive2(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive3'


class FindManyAlmacenArgsFromAlmacenRecursive3(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    include: 'AlmacenIncludeFromAlmacenRecursive4'


class FindManyAlmacenArgsFromAlmacenRecursive4(TypedDict, total=False):
    """Arguments for Almacen"""
    take: int
    skip: int
    order_by: Union['AlmacenOrderByInput', List['AlmacenOrderByInput']]
    where: 'AlmacenWhereInput'
    cursor: 'AlmacenWhereUniqueInput'
    distinct: List['AlmacenScalarFieldKeys']
    


FindManyAlmacenArgs = FindManyAlmacenArgsFromAlmacen
FindFirstAlmacenArgs = FindManyAlmacenArgsFromAlmacen


    

class AlmacenWhereInput(TypedDict, total=False):
    """Almacen arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nombre: Union[_str, 'types.StringFilter']
    direccion: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    user: 'UsersRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    envio: 'envioListRelationFilter'

    # should be noted that AND and NOT should be Union['AlmacenWhereInputRecursive1', List['AlmacenWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AlmacenWhereInputRecursive1']
    OR: List['AlmacenWhereInputRecursive1']
    NOT: List['AlmacenWhereInputRecursive1']


class AlmacenWhereInputRecursive1(TypedDict, total=False):
    """Almacen arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nombre: Union[_str, 'types.StringFilter']
    direccion: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    user: 'UsersRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    envio: 'envioListRelationFilter'

    # should be noted that AND and NOT should be Union['AlmacenWhereInputRecursive2', List['AlmacenWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AlmacenWhereInputRecursive2']
    OR: List['AlmacenWhereInputRecursive2']
    NOT: List['AlmacenWhereInputRecursive2']


class AlmacenWhereInputRecursive2(TypedDict, total=False):
    """Almacen arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nombre: Union[_str, 'types.StringFilter']
    direccion: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    user: 'UsersRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    envio: 'envioListRelationFilter'

    # should be noted that AND and NOT should be Union['AlmacenWhereInputRecursive3', List['AlmacenWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AlmacenWhereInputRecursive3']
    OR: List['AlmacenWhereInputRecursive3']
    NOT: List['AlmacenWhereInputRecursive3']


class AlmacenWhereInputRecursive3(TypedDict, total=False):
    """Almacen arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nombre: Union[_str, 'types.StringFilter']
    direccion: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    user: 'UsersRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    envio: 'envioListRelationFilter'

    # should be noted that AND and NOT should be Union['AlmacenWhereInputRecursive4', List['AlmacenWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AlmacenWhereInputRecursive4']
    OR: List['AlmacenWhereInputRecursive4']
    NOT: List['AlmacenWhereInputRecursive4']


class AlmacenWhereInputRecursive4(TypedDict, total=False):
    """Almacen arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nombre: Union[_str, 'types.StringFilter']
    direccion: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    user: 'UsersRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    envio: 'envioListRelationFilter'



# aggregate Almacen types


    

class AlmacenScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Almacen arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nombre: Union[_str, 'types.StringWithAggregatesFilter']
    direccion: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['AlmacenScalarWhereWithAggregatesInputRecursive1']
    OR: List['AlmacenScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AlmacenScalarWhereWithAggregatesInputRecursive1']


class AlmacenScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Almacen arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nombre: Union[_str, 'types.StringWithAggregatesFilter']
    direccion: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['AlmacenScalarWhereWithAggregatesInputRecursive2']
    OR: List['AlmacenScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AlmacenScalarWhereWithAggregatesInputRecursive2']


class AlmacenScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Almacen arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nombre: Union[_str, 'types.StringWithAggregatesFilter']
    direccion: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['AlmacenScalarWhereWithAggregatesInputRecursive3']
    OR: List['AlmacenScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AlmacenScalarWhereWithAggregatesInputRecursive3']


class AlmacenScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Almacen arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nombre: Union[_str, 'types.StringWithAggregatesFilter']
    direccion: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['AlmacenScalarWhereWithAggregatesInputRecursive4']
    OR: List['AlmacenScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AlmacenScalarWhereWithAggregatesInputRecursive4']


class AlmacenScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Almacen arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nombre: Union[_str, 'types.StringWithAggregatesFilter']
    direccion: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']



class AlmacenGroupByOutput(TypedDict, total=False):
    id: _int
    nombre: _str
    direccion: _str
    descripcion: _str
    user_id: _int
    _sum: 'AlmacenSumAggregateOutput'
    _avg: 'AlmacenAvgAggregateOutput'
    _min: 'AlmacenMinAggregateOutput'
    _max: 'AlmacenMaxAggregateOutput'
    _count: 'AlmacenCountAggregateOutput'


class AlmacenAvgAggregateOutput(TypedDict, total=False):
    """Almacen output for aggregating averages"""
    id: float
    user_id: float


class AlmacenSumAggregateOutput(TypedDict, total=False):
    """Almacen output for aggregating sums"""
    id: _int
    user_id: _int


class AlmacenScalarAggregateOutput(TypedDict, total=False):
    """Almacen output including scalar fields"""
    id: _int
    nombre: _str
    direccion: _str
    descripcion: _str
    user_id: _int


AlmacenMinAggregateOutput = AlmacenScalarAggregateOutput
AlmacenMaxAggregateOutput = AlmacenScalarAggregateOutput


class AlmacenMaxAggregateInput(TypedDict, total=False):
    """Almacen input for aggregating by max"""
    id: bool
    nombre: bool
    direccion: bool
    descripcion: bool
    user_id: bool


class AlmacenMinAggregateInput(TypedDict, total=False):
    """Almacen input for aggregating by min"""
    id: bool
    nombre: bool
    direccion: bool
    descripcion: bool
    user_id: bool


class AlmacenNumberAggregateInput(TypedDict, total=False):
    """Almacen input for aggregating numbers"""
    id: bool
    user_id: bool


AlmacenAvgAggregateInput = AlmacenNumberAggregateInput
AlmacenSumAggregateInput = AlmacenNumberAggregateInput


AlmacenCountAggregateInput = TypedDict(
    'AlmacenCountAggregateInput',
    {
        'id': bool,
        'nombre': bool,
        'direccion': bool,
        'descripcion': bool,
        'user_id': bool,
        '_all': bool,
    },
    total=False,
)

AlmacenCountAggregateOutput = TypedDict(
    'AlmacenCountAggregateOutput',
    {
        'id': int,
        'nombre': int,
        'direccion': int,
        'descripcion': int,
        'user_id': int,
        '_all': int,
    },
    total=False,
)


AlmacenKeys = Literal[
    'id',
    'nombre',
    'direccion',
    'descripcion',
    'user',
    'user_id',
    'envio',
]
AlmacenScalarFieldKeys = Literal[
    'id',
    'nombre',
    'direccion',
    'descripcion',
    'user_id',
]
AlmacenScalarFieldKeysT = TypeVar('AlmacenScalarFieldKeysT', bound=AlmacenScalarFieldKeys)

AlmacenRelationalFieldKeys = Literal[
        'user',
        'envio',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields